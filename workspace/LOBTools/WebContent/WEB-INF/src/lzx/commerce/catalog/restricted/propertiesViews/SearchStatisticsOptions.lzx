<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2011 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->
<library>
	<!---
		The class that represents the apply button for the statistics report. 
	-->
	<class name="catReportOptionsPropertyButton" extends="wcfPropertiesComponent">
		<!---
			@keywords private
			Get the search statistics report. 
		-->
		<method name="getReport">
			<![CDATA[
			if (this.o) {
				this.o.setPropertyValue("getReport", null, "true");
				var childObjectDefinitions = this.o.objectDefinition.objectDefinitions;
				var oDefs = [];
				for (var i = 0; i < childObjectDefinitions.length; i++) {
					var childDef = childObjectDefinitions[i].objectDefinition;
					childDef.initializeDefinition(this.o.model);
					oDefs.push(childDef);
				}
				this.o.refreshChildren(oDefs);
			}
			]]>
		</method>
		
		<wcfButton text="${catalogResources.topSearchReportOptionAppyButton.string}" x="${parent.promptWidth + parent.xspacing}">	
			<handler name="onclick">
				<![CDATA[
				if (wcfEventTimer.enabled) {
					wcfEventTimer.start("catReportOptionsApplyButon onclick: " + "Get Search Statistics Report");
				}
				classroot.getReport();
				if (wcfEventTimer.enabled) {
					wcfEventTimer.end();
				}
				]]>
			</handler>
		</wcfButton>
	</class>
	
	<!---
		@keywords private
	-->
	<class name="catReportRangePicker" extends="basecomponent">
		<!---
			This attribute specifies the {@link wcfModelProperty property} of the reporting range. This is a required attribute.
		-->
		<attribute name="property"/>
		<!---
			This attribute specifies the name of the {@link wcfModelProperty property} of the reporting range. This is a required attribute.
		-->
		<attribute name="propertyName" type="string"/>	
		
		<!---
			This attribute specifies the name of the {@link wcfModelProperty property}  of the start date. This is a required attribute.
		-->
		<attribute name="startDatePropertyName" type="string"/>
		<!---
			This attribute specifies the name of the {@link wcfModelProperty property} of the end date. This is a required attribute.
		-->
		<attribute name="endDatePropertyName" type="string"/>
		
		<setter name="property" args="newProperty">
			<![CDATA[
			if (newProperty != this.property) {
				if (typeof(this.updateValueDel) == "undefined") {
					this.updateValueDel = new lz.Delegate(this, "updateValue");
				} else {
					this.updateValueDel.unregisterAll();
				}
				this.property = newProperty;
				if (this.property != null){
					this.updateValueDel.register(this.property, "onvalue");
					if (this.property.value != "4") {
						this.updateValue();
					}
				}
				if (this["onproperty"]) {
					this.onproperty.sendEvent();
				}
			}
			]]>
		</setter>
		
		<!---
			@keywords private
		-->
		<method name="destroy">
			if (this["updateValueDel"]) {
				this.updateValueDel.unregisterAll();
				delete this.updateValueDel;
			}
			super.destroy();
		</method>
		
		<!---  
			@keywords private
			The datestart and dateend property values of the reporting option object will be updated 
			if the user selects the reportRange of the reporting option.   
		 -->
		<method name="updateValue" args="e=null">
			<![CDATA[
			if (this.property){
				var newStartDate = null;
				var newEndDate = null;
				if (this.property.value == "1" || this.property.value == "2" || this.property.value == "3") {			
					newStartDate = new Date();
					newEndDate = new Date();
					if (this.property.value == "3") {
						newStartDate = new Date(newStartDate.getFullYear(), newStartDate.getMonth() - 1, 1);
						newEndDate = new Date(newEndDate.getFullYear(), newEndDate.getMonth(), 1);
						wcfDateUtil.adddays(newEndDate, -1);
					} else {
						var dayOfThisWeek = newStartDate.getDay() - wcfDateUtil.getFirstDayOffSet();
						if (dayOfThisWeek < 0) {
							dayOfThisWeek = dayOfThisWeek + 7;
						}
						if (this.property.value == "1") {
							wcfDateUtil.adddays(newStartDate, -7 - dayOfThisWeek);
						} else {
							wcfDateUtil.adddays(newStartDate, -14 - dayOfThisWeek);
						}
						wcfDateUtil.adddays(newEndDate, -1 - dayOfThisWeek);
					}
				}
				var startDateProperty = this.property.o.getProperty("datestart");	
				var formattedStartDate = wcfDateUtil.format(newStartDate, wcfDateUtil.DATE_FORMAT);
				if (formattedStartDate != startDateProperty.value) {
					startDateProperty.setAttribute("value", formattedStartDate);
				}
				var endDateProperty = this.property.o.getProperty("dateend");
				var formattedEndDate = wcfDateUtil.format(newEndDate, wcfDateUtil.DATE_FORMAT_END);
				if (formattedEndDate != endDateProperty.value) {
					endDateProperty.setAttribute("value", formattedEndDate);
				}
			}
			]]>
		</method>

		<simplelayout axis="x" spacing="5"/>
		<wcfComboBox name="reportRangeOption" property="${classroot.property}" enabled="${classroot.enabled}"/>
		<view name="paddingView"/>
		<text text="${catalogResources.topSearchReportOption_ReportingPeriod_From.string}"/>
		<wcfPropertyDatePicker name="startDateOption" propertyName="${classroot.startDatePropertyName}" promptWidth="0">
			<wcfEnablementCondition conditionId="customReportingPeriodCondition" propertyName="${classroot.propertyName}" enablementValue="4"/>
		</wcfPropertyDatePicker>
		<text text="${catalogResources.topSearchReportOption_ReportingPeriod_to.string}"/>
		<wcfPropertyDatePicker name="endDateOption" propertyName="${classroot.endDatePropertyName}" endOfDay="true" promptWidth="0">
			<wcfEnablementCondition conditionId="customReportingPeriodCondition" propertyName="${classroot.propertyName}" enablementValue="4"/>
		</wcfPropertyDatePicker>
	</class>
	
	<!---
		The class that represents the reporting range for the statistics report. 
	-->
	<class name="catReportRangePropertyEditor" extends="wcfPropertyEditor">
		<!---
			This attribute specifies the name of the {@link wcfModelProperty property}  of the start date. This is a required attribute.
		-->
		<attribute name="startDatePropertyName" type="string"/>
		<!---
			This attribute specifies the name of the {@link wcfModelProperty property} of the end date. This is a required attribute.
		-->
		<attribute name="endDatePropertyName" type="string"/>
		
		<!---	
			@keywords private
			@param wcfPropertiesComponent parentComponent The parent properties component from which to create the reporting range selection and date pickers.
		-->
		<method name="createEditor" args="parentComponent">
			<![CDATA[
			new lz.catReportRangePicker(parentComponent, {
				name: "editor",
				x: parentComponent.promptWidth + parentComponent.xspacing,
				property: parentComponent.property,
				propertyName: this.propertyName,
				startDatePropertyName: this.startDatePropertyName,
				endDatePropertyName: this.endDatePropertyName,
				enabled: parentComponent.enabled
			});
			]]>
		</method>
	</class>
	
	<!---
		@keywords private
	-->
	<class name="catSearchTotalText" extends="wcfTextViewer">
		<!---
			Gets the display value from the properties value and sets it as the text to be displayed in the viewer.
			@param lz.Delegate del An optional delegate to call when a change in property value is caused by the value service.
			@returns string: display value
		-->
		<method name="getDisplayValue" args="del">
			<![CDATA[
			del.register(catalogResources.topSearchHitsTotalSearchSessions, "onstring");
			return catalogResources.replaceValues("topSearchHitsTotalSearchSessions", [this.property.value]);
			]]>
		</method>
	</class>
	
	<!---
		The class that represents search total for the statistics report. 
	-->
	<class name="catSearchTotalPropertyViewLongText" extends="wcfPropertyEditor" sizeToAvailableWidth="true">
		<!---	
			@keywords private
			@param wcfPropertiesComponent parentComponent The parent properties component from which to create the search total text viewer.
		-->
		<method name="createEditor" args="parentComponent">
			<![CDATA[
			var availableWidth = parentComponent.width - parentComponent.promptWidth - parentComponent.xspacing;
			new lz.catSearchTotalText(parentComponent, {
				name: "editor",
				x: parentComponent.promptWidth + parentComponent.xspacing,
				property: parentComponent.property,
				width: availableWidth,
				enabled: parentComponent.enabled
			});
			]]>
		</method>
	</class>
	
</library>
