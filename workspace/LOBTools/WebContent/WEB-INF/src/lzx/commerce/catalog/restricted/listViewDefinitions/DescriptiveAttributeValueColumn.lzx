<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2010, 2013 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->
<library>
	<!---
		@keywords private
		
		This class defines a grid column for use with the descriptive allowed values attribute grid on the properties
		page of a catalog entry.
	-->
	<class name="catDescriptiveAttributeValueColumn" extends="wcfGridColumn" findable="false">
					
		<!---
			@keywords private
		-->
		<attribute name="cellViewerClass" value="catAttributeAllowedValuesComboBoxViewer"/>
		
		<!---
			@keywords private
		-->		
		<attribute name="cellEditorClass" value="catAttributeAllowedValuesComboBoxEditor"/>	
			
		<!---
			Not useful in the context of allowed value descriptive attributes.
			@keywords private
		-->		
		<attribute name="columnEditorClass" value="${null}"/>
		
	</class>
	
	<!---
		@keywords private
		
		Combo box viewer class to display the attribute value of an attribute and will be
		displayed while the grid is in view mode.
	-->
	<class name="catAttributeAllowedValuesComboBoxViewer" extends="wcfGridComboBoxViewer">
		<!---
			Update and refresh wcfGridComboBoxViewer value with a new {@link wcfModelProperty} value.
		-->
		<method name="updateValue" args="e=null">
			<![CDATA[
			
			var displayValue = this.getDisplayName(this.property.value);
			if (this.text != displayValue) {
				this.setAttribute("text", displayValue);
			}
			
			]]>
		</method>
		
		<!---
			@keywords private
			Get display name for attribute 
		-->
		<method name="getDisplayName" args="attrValId">
			<![CDATA[
			var displayName = null;
			
			if (attrValId && this.property.o)
			{
				// The attribute allowed value type to fetch.
				var attributeAllowedValueType = null;
				   				   
				var attributeDataType = this.property.o.getPropertyValue("attrDataType","AttributeDictionaryAttributes");
				
				// Get the attribute allowed values from the registered attribute object
				if (attributeDataType == "String") {	
					attributeAllowedValueType = "AttributeDictionaryAttributeStringValueAlias";
					this.datatype="string";
				}
				else if (attributeDataType == "Integer") {
					attributeAllowedValueType = "AttributeDictionaryAttributeIntegerValueAlias";
					this.datatype="number";
				}
				else if (attributeDataType == "Float") {
					attributeAllowedValueType = "AttributeDictionaryAttributeFloatValueAlias";
					this.datatype="number";
				}
				// Get the allowed value
				if(attributeDataType != null)
				{
					var definingAttributeAllowedValue = this.property.o.getObject("AttributeDictionaryAttributeWithAllowedValuesAlias/" + attributeAllowedValueType + "[attrValId=" + attrValId + "]");
					displayName = definingAttributeAllowedValue.getPropertyValue("value", "AttributeDictionaryAttributeValueDescription");
					if(attributeDataType == "Float")
					{
						// Format for 1 decimal place padding
						displayName = wcfGlobalizationUtil.formatNumberToDisplayFormat(displayName, 1);
					}
					displayName = wcfStringUtil.escapeText(displayName);
				}
			}
			return displayName;
			]]>
		</method>
		
	</class>
	
	<!---
		This class represents a combo box used for selecting an allowed attribute value.
		
		@keywords private
	-->
	<class name="catAttributeAllowedValuesComboBoxEditor" extends="wcfGridComboBoxEditor">
		<!---
			Creates the combo box and adds the attribute values from the attribute specified in the
			property.  The current selection is then set for the combo box from the value.
		-->
		<method name="createComboBox" args="e=null">
			<![CDATA[
			if (this.property != null) {
				if (!this["propValueDel"]) {
					this.propValueDel = new lz.Delegate(this, "createComboBox");
				}
				else {
					this.propValueDel.unregisterAll();
				}
				this._initializingComboBox = true;
				this.values = [];
				var defaultValue = null;
				
				var o = this.property.o;
				// Load attribute values
				var attributeObject = o.getObject("AttributeDictionaryAttributes");
				var attributeValueDefs = attributeObject.objectDefinition.getChildDefinitions("AttributeDictionaryAttributeValueAlias");
				attributeObject.loadChildren(attributeValueDefs);
				
				var attributeAllowedValueType = null;

				// Get attribute dictionary attributes type to construct path
				var attributeDataType = o.getPropertyValue("attrDataType","AttributeDictionaryAttributes");
				// Get the attribute allowed values from the registered attribute object
				if (attributeDataType == "String")
				{
					attributeAllowedValueType = "AttributeDictionaryAttributeStringValueAlias";
					this.datatype="string";
				}
				else if (attributeDataType == "Integer")
				{
					attributeAllowedValueType = "AttributeDictionaryAttributeIntegerValueAlias";
					this.datatype="number";
				}
				else if (attributeDataType == "Float")
				{
					attributeAllowedValueType = "AttributeDictionaryAttributeFloatValueAlias";
					this.datatype="number";
				}

				
				// Add the allowed values to the combo box
				if(attributeDataType != null)
				{
					var definingAttributeAllowedValues = null;
					definingAttributeAllowedValues = o.getObjects("AttributeDictionaryAttributeWithAllowedValuesAlias/" + attributeAllowedValueType, this.propValueDel);
					var size = definingAttributeAllowedValues.length;
					for (var i = 0; i < size; i++)
					{
						var allowedValue = definingAttributeAllowedValues[size - 1 - i];

						var itemValue = allowedValue.getPropertyValue("attrValId");
						if(itemValue && itemValue.length > 0)
						{
							var languageSelector = "";
							if (this.parent.column.language != null) {
								languageSelector = "[languageId=" + this.parent.column.language.languageId + "]";
							}
							var displayNameProperty = allowedValue.getProperty("value", "AttributeDictionaryAttributeValueDescription" + languageSelector);
							if (displayNameProperty == null) {
								this.addItem("", itemValue);
								this.propValueDel.register(allowedValue, "onchildObjects");								
							}
							else {
								this.propValueDel.register(displayNameProperty, "onvalue");
								var displayName = displayNameProperty.value;
								if(attributeDataType == "Float")
								{
									// Format for 1 decimal place padding
									displayName = wcfGlobalizationUtil.formatNumberToDisplayFormat(displayName, 1);
								}
								displayName = wcfStringUtil.escapeText(displayName);
								this.addItem(displayName, itemValue);
								if( allowedValue.getPropertyValue("default") == "true")
								{
									defaultValue = itemValue;
								}
							}
						}
						else {
							var attrValIdProperty = allowedValue.getProperty("attrValId");
							this.propValueDel.register(attrValIdProperty, "onvalue");
						}
					}
					if(attributeDataType == "String")
					{
						wcfSortUtil.sort(this.values, catStringValuesComparator);
					} else
					{
						wcfSortUtil.sort(this.values, catNumericValuesComparator);
					}
				}
	
				//Set currently selected item
				if((this.property.value == null || this.property.value == "") && defaultValue != null)
				{
					this.selectItem(defaultValue);
					this.property.change(defaultValue);
				} else
				{	
					this.selectItem(this.property.value);
				}
				this._initializingComboBox = false;
			}
			]]>
		</method>
	</class>
	
	<!---
		@keywords private
		Use this class to display allowed values of an attribute dictionary attributes. 
	-->
	<class name="catAttributeAllowedValuesComboBoxCellDescriptor" extends="wcfGridCellDescriptor">
	
		<!---
			@keywords private
			Use {@link wcfGridTextViewer} to create cell viewer instances.
		-->
		<attribute name="cellViewerClass" value="catAttributeAllowedValuesComboBoxViewer"/>
		<!---
			@keywords private
			Use {@link wcfGridTextEditor} to create cell editor instances.
		-->
		<attribute name="cellEditorClass" value="catAttributeAllowedValuesComboBoxEditor"/>	
	</class>	
</library>