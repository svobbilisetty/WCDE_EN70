<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2007, 2011 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->
<library>
	    
    <!---
    	@keywords private
    	Search Service to get the list of catalogs (master and sales) for the loaded store
    -->
    <wcfService id="catCatalogSelectionGetCatalogListService" url="/cmc/FindCatalogs" retryOnError="true">

        <!---
			Parses the catalog objects. And sets the values in the requested parent.
			@param XML dataElement: the parent data element
			@param catCatalogSelectionWidget requestParent : the parent widget that invokes the service
			@param boolean hasMoreRecordsFlag: true when more records exist that have not been loaded
			@param string reqIdentifier: the request identifier associated with the dataset that returned this data
			@param number startIndex: the start index for this request
		-->
        <method name="parseObjects" args="requestParent, dataElement, hasMoreRecordsFlag, reqIdentifier, startIndex">
        	<![CDATA[
        	// Save id for a previously selected catalog
			var oldSelectedCatalogId = requestParent.getValue();
			var masterCatalog = null;
			var noSalesCatalogStoreType = new Array("DPS","DPX","SPS","SHS","HCP","PBS");
			var storeType = wcfContextUtil.findContextValue(requestParent.advancedSearchContent.oEditor, "storeType").value;
			requestParent.setValues([]);
            for (var i = 0; i < dataElement.childNodes.length; i++) {
                var catalog = this.parseCatalog(dataElement.childNodes[i]);
                if (catalog["masterCatalog"] == "true" || noSalesCatalogStoreType.indexOf(storeType) == -1 ) {
                    requestParent.addValue(catalog);
                    if (oldSelectedCatalogId != null && catalog.value == oldSelectedCatalogId ) {
                        requestParent.selectValue(catalog);
                    }
                    if (catalog["masterCatalog"] == "true") {
                        masterCatalog = catalog;
                    }
                }
            }
			if (requestParent.selectedValue == null) {
				requestParent.selectValue(masterCatalog);
			}
			]]>
		</method>

		<!---
			Parses each catalog object.
			@param XML dataElement: the child data element
			@returns wcfCatalogSelection : a wcfCatalogSelection catalog object.
		-->
        <method name="parseCatalog" args="dataElement"><![CDATA[
			var catalog = {};
            for (var i = 0; i < dataElement.childNodes.length; i++) {
                var e = dataElement.childNodes[i];
                if (e.nodeName == "catalogId") {
                    var textNode = e.firstChild;
                    if (textNode != null && textNode.nodeType == 3) {
                        catalog.value = textNode.nodeValue;
                    }
                }
                if (e.nodeName == "identifier") {
                    var textNode = e.firstChild;
                    if (textNode != null && textNode.nodeType == 3) {
                        catalog.displayName = textNode.nodeValue;
                    }
                }
                if (e.nodeName == "primary") {
                    var textNode = e.firstChild;
                    if (textNode != null && textNode.nodeType == 3) {
                        if (textNode.nodeValue == "true") {
                            catalog.masterCatalog = "true";
                        } else {
                            catalog.masterCatalog = "false";
                        }
                    }
                }
                if (e.nodeName == "objectStoreId") {
                    var textNode = e.firstChild;
                    if (textNode != null && textNode.nodeType == 3) {
                        catalog.objectStoreId = textNode.nodeValue;
                    }
                }
            }
			return catalog;
			]]></method>
    </wcfService>
    
    <!---
    	@keywords private
    	Catalog Selection Widget to display the list of catalogs in the given store.
    -->
    <class name="catCatalogSelectionWidget" extends="wcfBaseComboBox">
        
        <!--- A reference to the parent content class -->
        <attribute name="advancedSearchContent" value="null"/>

		<!--- @keywords private -->
        <method name="init">
			super.init();
			if (this["onLoadDel"] == null)
			{
				this.onLoadDel = new lz.Delegate(this, "reload");
				this.onLoadDel.register(this.advancedSearchContent, "onload");
			}
		</method>
		
		<!--- @keywords private -->
		<method name="destroy">
			<![CDATA[
			if(this["onLoadDel"]){
				this.onLoadDel.unregisterAll();
				delete this.onLoadDel;						
			}
			super.destroy();
			]]>
		</method>
		
		<!---
			Reloads the widget every time the Advanced Search Panel is opened to refresh the catalog list
		-->
		<method name="reload" args="e=null"><![CDATA[
			if (this.advancedSearchContent.advancedSearchDialog.open) {
				catCatalogSelectionGetCatalogListService.doRequest(this, {storeId: wcfContextUtil.findContextValue(this.advancedSearchContent.oEditor, "storeId").value});
			}
			else {
				this.setValues([]);
			}
		]]></method>

		<!--- @keywords private -->
		<method name="getIdentifier">
			<![CDATA[
			if(this.selectedValue == null){
				return null;
			}
			return this.selectedValue.displayName;
			]]>
		</method>

		<!--- @keywords private -->
		<method name="getObjectStoreId">
			<![CDATA[
			if(this.selectedValue == null){
				return null;
			}
			return this.selectedValue.objectStoreId;
			]]>
		</method>
		
    </class>
</library>
