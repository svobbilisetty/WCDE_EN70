<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2010 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->
<library>
		
	<!---
		<p>Use this class to define an object definition for a store primary object. This class extends the behavior of the
		standard primary object definition by allowing you to define a different properties view for every store. The definition
		name of the properties view is determined by appending the store identifier to the name specified with the
		{@link wcfObjectDefinition#propertiesDefinitionName} attribute. For example, if the specified properties definition name is
		"stoStoreProperties" and the ID of the store is "10001", then the framework will search for a properties view with the definition name
		of "stoStoreProperties_10001". If no such properties view is found, then the framework will use the unqualified properties definition
		name, "stoStoreProperties".</p>

		<p>If the store extends a storefront asset store, then the store identifier used to determine the properties definition name is the parent store ID.
		This allows all stores that extend from the same storefront asset store to share the same properties view.</p>
		
		<p>The following example demonstrates the declaration of a store primary object definition and two properties
		views. The properties view with the definition name stoStoreProperties_10001 will be loaded for store 10001.
		All other stores will use the default properties view with the definition name stoStoreProperties.</p>
		@START_CODE
		<StorePrimaryObjectDefinition 
			package="sto" 
			definitionName="StoreFrontStore" 
			displayNameProperty="storeIdentifier" 
			objectType="StoreFrontStore" 
			propertiesDefinitionName="stoStoreProperties">
					
		<ObjectProperties definitionName="stoStoreProperties_10001" >
			<PropertyTabs definitionName="tabs">
				<PropertyTabPane name="general" text="${stoStoreResources.generalTabTitle}">
					<PropertyPane name="pane" baseDefinitionName="stoStorePropertiesPane" />
				</PropertyTabPane>
				<PropertyTabPane name="flexFlow" text="{stoStoreResources.flexFlowTabTitle}">
					<PropertyPane name="flexFlowPane" baseDefinitionName="stoFlexFlowPropertiesPane" />
				</PropertyTabPane>
			</PropertyTabs>
		</ObjectProperties>

		<ObjectProperties definitionName="stoStoreProperties" >
			<PropertyPane name="pane" baseDefinitionName="stoStorePropertiesPane" />
		</ObjectProperties>
		@END_CODE
	-->
	<class name="stoStorePrimaryObjectDefinition" extends="wcfPrimaryObjectDefinition" >
		<!---
			@keywords private
			Name of the property that contains the store identifier.
		-->
		<attribute name="storeIdPropertyName" type="string" value="storeId"/>
		<!---
			@keywords private
			Name of the property that contains the asset store identifier.
		-->
		<attribute name="assetStoreIdPropertyName" type="string" value="assetStoreId"/>
		
		<!---
			@keywords private
			This method finds the instance of {@link wcfObjectDefinition#propertiesClass} that is the child of the specified
			parent view. First, the class name contained in <code>propertiesClass</code> appended with the current store ID is searched.
			If no view is found, <code>propertiesClass</code> is appended with the asset store ID and that class name is searched.
			If still no view can be found, <code>propertiesClass</code> without any modification is used.
			
			If an instance has previously been requested for the given parent, the previously created one will be
			returned.  Otherwise it will create a new instance. The method will also set {@link wcfBaseObjectProperties#o} to
			be the specified {@link wcfModelObject} instance.
			
			@param view parentView The parent view to consider.
			@param wcfModelObject o The model object instance whose properties should be displayed.
			@param boolean inDetails When set to true, this boolean flag indicates that the properties view instance is used
					in the details view. For more information see {@link wcfBaseObjectProperties#inDetails}.
			@return wcfObjectProperties An instance of the class specified in {@link wcfObjectDefinition#propertiesClass propertiesClass}
					that is the child of the specified parent view.
		-->
		<method name="getPropertiesView" args="parentView,o,inDetails">
			<![CDATA[
			var v = null;
			if (this.baseDefinition != null && this.propertiesClass == this.baseDefinition.propertiesClass) {
				v = this.baseDefinition.getPropertiesView(parentView, o, inDetails);
			}
			else if (this.propertiesClass != null) {
				v = this.getPropertiesViewByClassName(this.propertiesClass + "_" + o.getPropertyValue(this.storeIdPropertyName), parentView, o, inDetails);
				if(!v) {
					v = this.getPropertiesViewByClassName(this.propertiesClass + "_" + o.getPropertyValue(this.assetStoreIdPropertyName), parentView, o, inDetails);
				}
				if(!v) {
					v = this.getPropertiesViewByClassName(this.propertiesClass, parentView, o, inDetails);
				}
				o.loadChildren(o.objectDefinition.getOpenGroupObjectDefinitions());
				o.loadReferences();
			}
			return v;
			]]>
		</method>	
		
		
		<!---
			@keywords private
			This method is called by the getPropertiesView method but attempts to retrieve the {@link wcfObjectDefinition#propertiesClass}
			based on the Unique ID plus the propertiesClass name.  If an instance is not found then one will be created.
			
			@param string propertiesClassName The name of the class to use for displaying the properties view of objects with this 
			{@link wcfObjectDefinition#objectType}. 
			@param view parentView The parent view to consider.
			@param wcfModelObject o The model object instance whose properties should be displayed.
			@param boolean inDetails When set to true, this boolean flag indicates that the properties view instance is used
					in the details view. For more information see {@link wcfBaseObjectProperties#inDetails}.
			@return wcfObjectProperties An instance of the class specified in {@link wcfObjectDefinition#propertiesClass propertiesClass}
					that is the child of the specified parent view.
		-->
		<method name="getPropertiesViewByClassName" args="propertiesClassName,parentView,o,inDetails">
			<![CDATA[
			var propertiesViewKey = parentView.getUID();
			if (inDetails) {
				propertiesViewKey += "browsing";
			}
			var v = this.propertiesViews[propertiesViewKey + propertiesClassName];
			if (typeof(v) == "undefined") {
				if (lz[propertiesClassName]) {
					v = new lz[propertiesClassName](parentView, {
							o: o,
							inDetails: inDetails
					});
				}
				else {
					v = wcfDefinitionLoader.getDefinition(propertiesClassName, parentView, {
							o: o,
							inDetails: inDetails
					});
				}
				if(v){
					this.propertiesViews[propertiesViewKey + propertiesClassName] = v;
				}
			}
			else {
				v.setAttribute("o", o);
			}
			return v;
			]]>
		</method>	
	</class>
	
</library>