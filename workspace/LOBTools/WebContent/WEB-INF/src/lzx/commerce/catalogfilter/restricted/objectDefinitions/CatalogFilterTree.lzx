<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2010 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->

<library>
    
   <!---
		This class controls the icon that will be displayed next to the nodes in the catalog filter tree.
	-->
	<class name="catFilterTreeNodeCustomizer" extends="wcfPropertyTreeNodeCustomizer">
		<!--- @keywords private -->
		<method name="getIcon" args="o, nodeObject, del">
			<![CDATA[
			del.register(o, "onchildObjects");
			nodeObject = nodeObject.getReferencedObject();
			var nodeRefType = nodeObject.objectType;
			var result = nodeRefType + "ImplicitIncludeIcon";
			var elements = o.getObjects("CategoryElementGroup");
			if (elements.length > 0) {
				var impexp = 'Explicit';
				var done = false;
				while (nodeObject != null && !done) {
					for (var i=0; i<elements.length; i++) {
						var element = elements[i];
						if (element.getReferencedObject() == nodeObject) {
							var property = element.getProperty("xclude");
							del.register(property, "onvalue");
							if (property.value == "Include" || property.value == "Exclude") {
								result = nodeRefType + impexp + property.value + "Icon";
								done = true;
							}
							break;
						}
					}
					nodeObject = nodeObject.getParentPrimaryObject();
					impexp = 'Implicit';
				}
			}
			return result;
			]]>
		</method>
	</class>
    
    <!---
		This class performs the include action for nodes of the catalog filter tree.
	-->
    <class name="catFilterTreeIncludeAction" extends="wcfPropertyTreeAction" displayName="${cftCatalogFilterResources.catalogFilterIncludeCategoryElement.string}">
    	<!--- @keywords private -->
        <method name="performAction" args="o, nodeObject">
            <![CDATA[
            var elements = o.getObjects("CategoryElementGroup");
            var currentElement = null;
            
            for (var i=0; i<elements.length; i++) {
                var element = elements[i];
               if (element.getReferencedObject() == nodeObject.getReferencedObject()) {
                    currentElement = elements[i];
                    break;
                }
            }
            
            if (currentElement == null) {
                
                var nodeRefType = nodeObject.getReferencedObject().objectType;
                var elementDef;
                
                if (nodeRefType == 'Catalog'){
                  elementDef = o.model.getObjectDefinition(o, "CatalogElement");
                } else if (nodeRefType == 'InheritedCatalog'){
                  elementDef = o.model.getObjectDefinition(o, "InheritedCatalogElement");
                } else if (nodeRefType == 'CatalogGroup'){
                  elementDef = o.model.getObjectDefinition(o, "CategoryElement");	
                } else if (nodeRefType == 'InheritedCatalogGroup'){
                  elementDef = o.model.getObjectDefinition(o, "InheritedCategoryElement");	
                }
                
                currentElement = o.model.createNewObject(elementDef, o);
                currentElement.addChild(nodeObject.getReferencedObject());
            }
            	currentElement.getProperty("xclude").change("Include");   
           ]]>
        </method>
        
        <!--- @keywords private -->
        <method name="isEnabled" args="o, nodeObject,del=null">
            <![CDATA[
            var result = true;
            var elements = o.getObjects("CategoryElementGroup", false, null, del);
            var currentElement = null;
            for (var i=0; i<elements.length; i++) {
                var element = elements[i];
                
                if (element.getReferencedObject() == nodeObject.getReferencedObject())  {
                    currentElement = element;
                    break;
                }
            }
            
            if (currentElement != null) {
                if (currentElement.getPropertyValue("xclude") == "Include") {
                    result = false;
                }
                if (del != null) {
                    var property = currentElement.getProperty("xclude");
                    del.register(property, "onvalue");
				}
            }
            return result;
            ]]>
        </method>
    </class>
    
    <!---
		This class performs the exclude action for nodes of the catalog filter tree.
	-->
    <class name="catFilterTreeExcludeAction" extends="wcfPropertyTreeAction" displayName="${cftCatalogFilterResources.catalogFilterExcludeCategoryElement.string}">
    	<!--- @keywords private -->
        <method name="performAction" args="o, nodeObject">
            <![CDATA[
            var elements = o.getObjects("CategoryElementGroup");
            var currentElement = null;
            for (var i=0; i<elements.length; i++) {
                var element = elements[i];
                if (element.getReferencedObject() == nodeObject.getReferencedObject()) {
                    currentElement = elements[i];
                    break;
                }
            }
            
            if (currentElement == null) {
                var nodeRefType = nodeObject.getReferencedObject().objectType;
                var elementDef;
                
                if (nodeRefType == 'Catalog'){
                  elementDef = o.model.getObjectDefinition(o, "CatalogElement");
                } else if (nodeRefType == 'InheritedCatalog'){
                  elementDef = o.model.getObjectDefinition(o, "InheritedCatalogElement");
                } else if (nodeRefType == 'CatalogGroup'){
                  elementDef = o.model.getObjectDefinition(o, "CategoryElement");	
                } else if (nodeRefType == 'InheritedCatalogGroup'){
                  elementDef = o.model.getObjectDefinition(o, "InheritedCategoryElement");	
                }
                
                currentElement = o.model.createNewObject(elementDef, o);
                currentElement.addChild(nodeObject.getReferencedObject());
            }
            currentElement.getProperty("xclude").change("Exclude");
            ]]>
        </method>
        
        <!--- @keywords private -->
        <method name="isEnabled" args="o, nodeObject,del=null">
            <![CDATA[
            var result = true;
            var elements = o.getObjects("CategoryElementGroup", false, null, del);
            var currentElement = null;
            for (var i=0; i<elements.length; i++) {
                var element = elements[i];
                
               if (element.getReferencedObject() == nodeObject.getReferencedObject()) {
                    currentElement = element;
                    break;
                }
            }
            
            if (currentElement != null) {
                if (currentElement.getPropertyValue("xclude") == "Exclude") {
                    result = false;
                }
                if (del != null) {
                    var property = currentElement.getProperty("xclude");
                    del.register(property, "onvalue");
				}
            }
            return result;
            ]]>
        </method>
    </class>
    
    <!---
		This class performs the clear action for nodes of the catalog filter tree.
	-->
    <class name="catFilterTreeClearAction" extends="wcfPropertyTreeAction" displayName="${cftCatalogFilterResources.catalogFilterClearCategoryElement.string}">
        
        <!--- @keywords private -->
        <method name="performAction" args="o, nodeObject">
            <![CDATA[
            var elements = o.getObjects("CategoryElementGroup");
            var currentElement = null;
            for (var i=0; i<elements.length; i++) {
                var element = elements[i];
               
               if (element.getReferencedObject() == nodeObject.getReferencedObject()) {
                    currentElement = element;
                    break;
                }
            }
            if (currentElement != null) {
                currentElement.deleteObject();
            }
            ]]>
        </method>
        
        <!--- @keywords private -->
        <method name="isEnabled" args="o, nodeObject, del=null">
            <![CDATA[
            var result = false;
            var elements = o.getObjects("CategoryElementGroup", false, null, del);
            var currentElement = null;
            for (var i=0; i<elements.length; i++) {
                var element = elements[i];
                if (element.getReferencedObject() == nodeObject.getReferencedObject()) {
                    currentElement = element;
                    break;
                }
            }
            if (currentElement != null) {
                    result = true;
            }
            return result;
            ]]>
        </method>
    </class>
    
    <!---
		This class handles selection in the catalog filter tree.
	-->
	<class name="catFilterTreeSelectionHandler" extends="wcfPropertyTreeSelectionHandler">
		<!--- @keywords private -->
		<attribute name="oView" when="once" value="${wcfModelUtil.findObjectView(this.parent, 'o_selectedCategory')}"/>
		<!--- @keywords private -->
		<method name="handleSelection" args="o, selectedObject">
	    		<![CDATA[
			var elements = o.getObjects("CategoryElementGroup");
			var currentElement = null;
			if (selectedObject != null) {
				for (var i=0; i<elements.length; i++) {
					var element = elements[i];
					if (element.getReferencedObject() == selectedObject.getReferencedObject()) {
						currentElement = element;
						break;
					}
				}
			}
			this.oView.setAttribute("o_selectedCategory", currentElement);
			]]>
		</method>
	</class>
</library>