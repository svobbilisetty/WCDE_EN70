<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2007, 2010 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->
<library>
	<!---
		<p>Marketing checkbox implementation that allows for editing of individual elements
		of name/value pair (NVP) strings. For example, assume the server property is in the format:
		<code>name1=value1,name2=value2,name3=value3</code></p>

		<p>This widget allows for editing one NVP like name2, while keeping the rest of the parameters as-is.
		Ordering of the NVP's is not guaranteed.</p>
	-->
	<class name="mktCheckboxNVP" extends="wcfCheckbox">
		<!---
			Reference to wcfModelProperty object that is being edited.
			@type wcfModelProperty
		-->
		<attribute name="property" value="null" setter="setProperty(property)"/>

		<!--- Name in the name/value pair to edit -->
		<attribute name="pairName" type="string" value=""/>

		<!--- Optional value to return when checked. Default is "true" -->
		<attribute name="trueValue" type="string" value="true"/>

		<!---
			Optional value to return when checked. Default is "false".
			If blank (""), the NVP will not be set at all. For example, "name=" would not
			be saved.
		-->
		<attribute name="falseValue" type="string" value="false"/>

		<!--- @keywords private -->
		<attribute name="nonTargetPairs" type="string" value=""/>
		<!--- @keywords private -->
		<attribute name="targetPairValue" type="string" value=""/>

		<!--- @keywords private -->
		<method name="setProperty" args="newProperty">
			<![CDATA[
			if (newProperty != this["property"]) {
				if (typeof(this.updateValueDel) == "undefined") {
					this.updateValueDel = new lz.Delegate(this, "updateValue");
				}
				this.updateValueDel.unregisterAll();
				this.property = newProperty;
				if (this.property) {
					this.updateValueDel.register(this.property, "onvalue");
					this.updateValue();
				}
				else {
					if (this._initcomplete) {
						this.setAttribute("value", false);
					}
				}
			}
			]]>
		</method>

		<!--- @keywords private -->
		<method name="updateValue" args="e=null">
			<![CDATA[
			if (this._initcomplete && this.property && (this.property != null)) {
				parsePropertyString(this.property.value);

				var newValue = (this.targetPairValue == this.trueValue);
				if (newValue != this.value) {
					this.setAttribute("value", newValue);
				}
			}
			]]>
		</method>

		<!--- @keywords private -->
		<method name="storeValue">
			<![CDATA[
			if (this._initcomplete && this.property && (this.property != null)) {
				parsePropertyString(this.property.value);
				var prefix = this.nonTargetPairs;

				if(this.value) {
					if(prefix != "") {
						prefix += ";"
					}
					prefix += this.pairName + "=";
					this.property.change(prefix + this.trueValue);
				}
				else {
					if(this.falseValue == "") {
						this.property.change(prefix);
					}
					else {
						if(prefix != "") {
							prefix += ";"
						}
						prefix += this.pairName + "=";
						this.property.change(prefix + this.falseValue);
					}
				}
			}
			]]>
		</method>

		<!--- @keywords private -->
		<method name="parsePropertyString" args="x">
			<![CDATA[
				// parse string and extract non-targetted values and target value
				this.nonTargetPairs = "";
				this.targetPairValue = "";

				var pairs = x.split(";");
				for(var i = 0; i < pairs.length; i++) {
					var nvp = pairs[i].split("=");
					if(nvp.length == 2) {
						if(nvp[0] != this.pairName) {
							if(this.nonTargetPairs != "") {
								this.nonTargetPairs += ";";
							}
							this.nonTargetPairs += pairs[i];
						}
						else {
							this.targetPairValue = nvp[1];
						}
					}
				}
			]]>
		</method>

		<!--- @keywords private -->
		<handler name="onvalue" args="newValue">
			this.storeValue();
		</handler>
	 </class>

	<!---
		@keywords final
		<p>mktPropertyCheckboxNVP is a property editor and that uses {@link mktCheckboxNVP} to create a check box that
		binds to a {@link wcfModelProperty property value}. Use mktPropertyCheckboxNVP when implementing a check box
		inside a {@link wcfPropertyPane} or {@link wcfPropertyGroup}. This class is similar to {@link wcfPropertyCheckbox},
		but should be used when the property value is stored in a name/value pair format. See {@link mktCheckboxNVP} for
		more information about name/value pair format handling.</p>
	-->
	<class name="mktPropertyCheckboxNVP" extends="wcfPropertyEditor">
		<!--- Name in the name/value pair to edit -->
		<attribute name="pairName" type="string" value=""/>

		<!--- Optional value to return when checked. Default is "true" -->
		<attribute name="trueValue" type="string" value="true"/>

		<!---
			Optional value to return when checked. Default is "false".
			If blank (""), the NVP will not be set at all. For example, "name=" would not
			be saved.
		-->
		<attribute name="falseValue" type="string" value="false"/>

		<!---
			Create the editor for the given property component
			@param wcfPropertiesComponent parentComponent The parent properties component from which to create the editor
		-->
		<method name="createEditor" args="parentComponent">
			<![CDATA[
			new lz.mktCheckboxNVP(parentComponent, {
				name: "editor",
				x: parentComponent.promptWidth + parentComponent.xspacing,
				property: parentComponent.property,
				trueValue: this.trueValue,
				falseValue: this.falseValue,
				pairName: this.pairName,
				text: ""
			});
			]]>
		</method>
	</class>
</library>
