<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2007, 2010 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->
<library>
	<!---
		This summary view provides brief information about the {@link mktCustomerSearchesElementObject} flow element.
		The generated text is shown beneath the element on the Activity Builder flow diagram.
	-->
	<class name="mktCustomerSearchesSummary" extends="wcfFlowElementSummary">
		<wcfFlowSummaryParam name="comparison" propertyName="comparison"/>
		<wcfFlowSummaryParam name="searchTerm" objectPath="searchTerm" propertyName="searchTerm"/>
		<wcfFlowSummaryParam name="daysOperator" propertyName="daysOperator"/>
		<wcfFlowSummaryParam name="days" propertyName="days"/>
		<wcfFlowSummaryParam name="date1" propertyName="date1"/>
		<wcfFlowSummaryParam name="date2" propertyName="date2"/>
		<wcfFlowSummaryParam name="beforeDate" propertyName="beforeDate"/>
		<wcfFlowSummaryParam name="beforeAfterOnDate" propertyName="beforeAfterOnDate"/>
		<wcfFlowSummaryParam name="numberOfTimes" propertyName="numberOfTimes"/>

		<!--- @keywords private -->
		<handler name="oninit">
			<![CDATA[
			this.updateSummaryDel.register(mktMarketingResources.summarySearchTermsExactly, "onstring");
			this.updateSummaryDel.register(mktMarketingResources.summarySearchTermsStartsWith, "onstring");
			this.updateSummaryDel.register(mktMarketingResources.summarySearchTermsContains, "onstring");
			this.updateSummaryDel.register(mktMarketingResources.summarySearchTermsEndsWith, "onstring");
			this.updateSummaryDel.register(mktMarketingResources.summarySearchTermsAny, "onstring");
			this.updateSummaryDel.register(mktMarketingResources.summaryPerformedWithinLastXDays, "onstring");
			this.updateSummaryDel.register(mktMarketingResources.summaryPerformedAtLeastXDaysAgo, "onstring");
			this.updateSummaryDel.register(mktMarketingResources.summaryPerformedBeforeXDate, "onstring");
			this.updateSummaryDel.register(mktMarketingResources.summaryPerformedAfterXDate, "onstring");
			this.updateSummaryDel.register(mktMarketingResources.summaryPerformedBetweenXandYDates, "onstring");
			this.updateSummaryDel.register(mktMarketingResources.summaryPerformedOnXDate, "onstring");
			]]>
		</handler>

		<method name="updateSummary" args="e=null">
			<![CDATA[
				var summaryText = this.getEventSummary();
				var dateText = this.getDateSummary();

				if(summaryText != "") {
					summaryText += "\n";
				}
				
				if(dateText != "") {
					summaryText += dateText;
				} 
				
				this.setSummaryText(summaryText);
			]]>
		</method>
		
		<!--- @keywords private -->
		<method name="getEventSummary">
			<![CDATA[
				var summary = "";
				
				var numberOfTimes = this.getValuesList("numberOfTimes");
				if (numberOfTimes != "") {
					numberOfTimes = wcfGlobalizationUtil.formatNumberToDisplayFormat(this.resolvedParams["numberOfTimes"]);
					
					var searchTermName = this.getValuesList("searchTerm");
					var comparison = this.getValuesList("comparison")
						
					if ((searchTermName != "" && comparison != "") || (comparison == "any")) {
						var compText = "";
				
						switch(comparison) {
							case "=":
								compText = "Exactly";
								break;
							case "start":
								compText = "StartsWith";
								break;
							case "contain":
								compText = "Contains";
								break;
							case "end":
								compText = "EndsWith";
								break;
							case "any":
								compText = "Any";
								break;
						}
				  		
						var valueText = this.getValuesList("searchTerm");
						
						if(compText == "Any") {
							summary = mktMarketingResources.replaceValues("summarySearchTerms" + compText, [numberOfTimes]);
						}
						else if(valueText != "") {
							summary = mktMarketingResources.replaceValues("summarySearchTerms" + compText, [numberOfTimes, valueText]);
				 		}
				 	}
				}
				
				return summary;
			]]>
		</method>
		
		<!--- @keywords private -->
		<method name="getDateSummary">
			<![CDATA[
				var summary = "";

				if (this.resolvedParams["daysOperator"] == "<=") {
					if(this.resolvedParams["days"] != "") {
						var days = wcfGlobalizationUtil.formatNumberToDisplayFormat(this.resolvedParams["days"]);
						summary = mktMarketingResources.replaceValues("summaryPerformedWithinLastXDays", [days]);
					}
				}
				else if (this.resolvedParams["daysOperator"] == ">") {
					if(this.resolvedParams["days"] != "") {
						var days = wcfGlobalizationUtil.formatNumberToDisplayFormat(this.resolvedParams["days"]);
						summary = mktMarketingResources.replaceValues("summaryPerformedAtLeastXDaysAgo", [days]);
					}
				}
				else if (this.resolvedParams["beforeAfterOnDate"] == "<") {
					if(this.resolvedParams["date1"] != "") {
						var date1 = wcfDateUtil.formatUI(wcfDateUtil.parse(this.resolvedParams["date1"], wcfDateUtil.DATE_TIME_FORMAT), wcfDateUtil.UI_DATE_TIME_FORMAT);
						summary = mktMarketingResources.replaceValues("summaryPerformedBeforeXDate", [date1]);
					}
				}
				else if (this.resolvedParams["beforeAfterOnDate"] == ">") {
					if(this.resolvedParams["date1"] != "") {
						var date1 = wcfDateUtil.formatUI(wcfDateUtil.parse(this.resolvedParams["date1"],wcfDateUtil.DATE_TIME_FORMAT), wcfDateUtil.UI_DATE_TIME_FORMAT);
						summary = mktMarketingResources.replaceValues("summaryPerformedAfterXDate", [date1]);
					}
				}
				else if (this.resolvedParams["beforeAfterOnDate"] == ">=" && this.resolvedParams["beforeDate"] == "<=") {
					if(this.resolvedParams["date1"] != "" && this.resolvedParams["date2"] != "") {
						var date1 = wcfDateUtil.formatUI(wcfDateUtil.parse(this.resolvedParams["date1"],wcfDateUtil.DATE_TIME_FORMAT), wcfDateUtil.UI_DATE_TIME_FORMAT);
						var date2 = wcfDateUtil.formatUI(wcfDateUtil.parse(this.resolvedParams["date2"],wcfDateUtil.DATE_TIME_FORMAT), wcfDateUtil.UI_DATE_TIME_FORMAT);
						summary = mktMarketingResources.replaceValues("summaryPerformedBetweenXandYDates", [date1, date2]);
					}
				}
				else if (this.resolvedParams["beforeAfterOnDate"] == "=") {
					if(this.resolvedParams["date1"] != "") {
						var date1 = wcfDateUtil.formatUI(wcfDateUtil.parse(this.resolvedParams["date1"],wcfDateUtil.DATE_TIME_FORMAT), wcfDateUtil.UI_DATE_FORMAT);
						summary = mktMarketingResources.replaceValues("summaryPerformedOnXDate", [date1]);
					}
				}

				return summary;
			]]>
		</method>
						
	</class>

</library>