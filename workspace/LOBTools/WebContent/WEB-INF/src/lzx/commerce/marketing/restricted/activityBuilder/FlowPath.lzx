<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2007, 2010 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->
<library>
	<!--- @keywords private -->
	<class name="mktFlowPath" extends="wcfFlowPath" objectClass="mktFlowElement" contextMenuClass="mktFlowElementContextMenu">
		<!---
			Percentage of the time this path is traveled in a branch. This value comes from the "pctg" property of the object.
			@keywords private
		-->
		<attribute name="pathPercent" type="string" value=""/>
		
		<!--- @keywords private -->
		<method name="init">
			<![CDATA[
			super.init();
			this.pathInfo.icon.setAttribute("resource", "pathIcon");
			]]>
		</method>
		
		<!--- @keywords private -->
		<method name="destroy">
			<![CDATA[
			if(this["winnerDel"]) {
				this.winnerDel.unregisterAll();
				delete this.releaseModelObjectDel;
			}
			if (this["experimentValidateDel"]) {
				this.experimentValidateDel.unregisterAll();
				delete this.experimentValidateDel;
			}
			super.destroy();
			]]>
		</method>

		<!---
			@keywords private
			Set the model object for this tree node to the specified object.
			@param wcfModelObject newObject: the new object
		-->
		<method name="setModelObject" args="newObject">
			<![CDATA[
				if (this["winnerDel"]) {
					this.winnerDel.unregisterAll();
				}
				else {
					this.winnerDel = new lz.Delegate(this, "updateWinner");
				}
				if (this["experimentValidateDel"]) {
					this.experimentValidateDel.unregisterAll();
				}
				else {
					this.experimentValidateDel = new lz.Delegate(this, "updatePercent");
				}
				super.setModelObject(newObject);
				
				if(this.o) {
					var winnerProp = this.o.getProperty("winner");
					this.winnerDel.register(winnerProp, "onvalue");
					var percentProp = this.o.getProperty("pctg");
					this.experimentValidateDel.register(percentProp, "onvalue");
					
					if(this.parentFlowElement && this.parentFlowElement["o"]) {
						var branchTypeProp = this.parentFlowElement.o.getProperty("branchtype");
						this.experimentValidateDel.register(branchTypeProp, "onvalue");
					}
					
					this.updatePercent();
				}
			]]>
		</method>

		<!--- @keywords private -->
		<method name="updateWinner" args="e=null">
			<![CDATA[
				if(this.o && this.parentFlowElement && this.parentFlowElement["oList"]) {
					var winnerProp = this.o.getProperty("winner");
					if(winnerProp.dirty && winnerProp.value == "true") {
						var siblings = wcfFlowUtils.getSortedElements(this.o.parentObject);
						for(var i = 0; i < siblings.length; i++) {
							if(siblings[i] != this.o) {
								if(siblings[i].getPropertyValue("winner") != "false") {
									siblings[i].setPropertyValue("winner", "", "false");
								}
							}
						}

					}
					// notify parent experiment to update their icon
					this.parentFlowElement.updateBranch();
					
					// need to make sure all the winner flags are set before we update icons
					var siblingPaths = this.parentFlowElement.getChildren();
					for(var i = 0; i < siblingPaths.length; i++) {
						siblingPaths[i].updatePathIcon();
					}
				}
				this.updatePathIcon();
			]]>
		</method>

		<!---
			Sets or unsets the winner flag on this path
			@param string winner Either "true" or "false".
			@keywords private
		-->
		<method name="markAsWinner" args="winner">
			<![CDATA[
				if(this.o && this.parentFlowElement && this.parentFlowElement["oList"]) {
					var winnerProp = this.o.getProperty("winner");
					winnerProp.change(winner);
				}
			]]>
		</method>
		
		<!--- @keywords private -->
		<method name="updatePercent" args="e=null">
			<![CDATA[
				if(this.o && this.parentFlowElement && this.parentFlowElement["o"]) {
					this.parentFlowElement.o.validate();
					
					var percentProp = this.o.getProperty("pctg");
					
					var branchType = this.parentFlowElement.o.getPropertyValue("branchtype");
					if(branchType == "random") {
						var percent = percentProp.value
						var percentString = (percent != "") ? mktMarketingResources.replaceValues("percentValue", [percent]) : "";
						this.setAttribute("pathPercent", percentString);
					}
					else {
						this.setAttribute("pathPercent", "");
					}
				}
			]]>
		</method>

		<!---
			Updates all the path images including the icon and path backgrounds.
			@keywords private
		-->
		<method name="updatePathIcon" args="e=null">
			<![CDATA[
				if(this.o && this.parentFlowElement && this.parentFlowElement["o"]) {
					var parentState = "";
					if(this.parentFlowElement.o.objectType == "branch") {
						parentState = this.parentFlowElement.o.getPropertyValue("state");
					}
					// get winner data
					var experimentHasWinner = false;
					var winnerSequence = 0;
					var siblings = wcfFlowUtils.getSortedElements(this.o.parentObject);
					for(var i = 0; i < siblings.length; i++) {
						var isWinner = siblings[i].getPropertyValue("winner");
						if(isWinner == "true") {
							experimentHasWinner = true;
							winnerSequence = Number(siblings[i].getPropertyValue("sequence"));
							break;
						}
					}
					var isThisWinner = this.o.getPropertyValue("winner");

					// top path joints are always the same
					if(this.siblingSequence == 0) {
						this.leftJoint.setAttribute('frame', 1);
						this.rightJoint.setAttribute('frame', 1);
					}

					if(parentState == "inactive") {
						if(this.siblingSequence != 0) {
							this.background.setAttribute('frame', 2);
							this.pathInfo.icon.setAttribute('frame', 2);
							this.leftJoint.setAttribute('frame', 3);
							this.rightJoint.setAttribute('frame', 3);
						}
						else {
							this.background.setAttribute('frame', 1);
							this.pathInfo.icon.setAttribute('frame', 1);
						}
						this.leftTopVertical.setAttribute('frame', 2);
						this.leftBottomVertical.setAttribute('frame', 2);
						this.rightTopVertical.setAttribute('frame', 2);
						this.rightBottomVertical.setAttribute('frame', 2);
					}
					else if(experimentHasWinner) {
						if(isThisWinner != "true") {
							this.background.setAttribute('frame', 2);
							this.pathInfo.icon.setAttribute('frame', 2);
							
							var thisSequence = Number(this.o.getPropertyValue("sequence"));
							if(thisSequence > winnerSequence) {
								if(this.siblingSequence != 0) {
									this.leftJoint.setAttribute('frame', 3);
									this.rightJoint.setAttribute('frame', 3);
								}
								this.leftTopVertical.setAttribute('frame', 2);
								this.leftBottomVertical.setAttribute('frame', 2);
								this.rightTopVertical.setAttribute('frame', 2);
								this.rightBottomVertical.setAttribute('frame', 2);
							}
							else {
								if(this.siblingSequence != 0) {
									this.leftJoint.setAttribute('frame', 2);
									this.rightJoint.setAttribute('frame', 2);
								}
								this.leftTopVertical.setAttribute('frame', 1);
								this.leftBottomVertical.setAttribute('frame', 1);
								this.rightTopVertical.setAttribute('frame', 1);
								this.rightBottomVertical.setAttribute('frame', 1);
							}
						}
						else {
							if(this.siblingSequence != 0) {
								this.leftJoint.setAttribute('frame', 2);
								this.rightJoint.setAttribute('frame', 2);
							}
							this.background.setAttribute('frame', 1);
							this.pathInfo.icon.setAttribute('frame', 3);
							this.leftTopVertical.setAttribute('frame', 1);
							this.leftBottomVertical.setAttribute('frame', 2);
							this.rightTopVertical.setAttribute('frame', 1);
							this.rightBottomVertical.setAttribute('frame', 2);
						}
					}
					else {
						if(this.siblingSequence != 0) {
							this.leftJoint.setAttribute('frame', 2);
							this.rightJoint.setAttribute('frame', 2);
						}
						this.background.setAttribute('frame', 1);
						this.pathInfo.icon.setAttribute('frame', 1);
						this.leftTopVertical.setAttribute('frame', 1);
						this.leftBottomVertical.setAttribute('frame', 1);
						this.rightTopVertical.setAttribute('frame', 1);
						this.rightBottomVertical.setAttribute('frame', 1);
					}
				}
			]]>
		</method>
		
		<text fontsize="11" visible="${this.text != ''}" text="${classroot.pathPercent}" placement="container"/>
	</class>
	
</library>
