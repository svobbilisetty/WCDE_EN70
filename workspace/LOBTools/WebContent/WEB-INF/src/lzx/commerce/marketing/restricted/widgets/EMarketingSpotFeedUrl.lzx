<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2010, 2011 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->
<library>

	<!---
		@keywords final
		<p>mktPropertyMarketingFeedURL is a text viewer that displays the Atom feed URL of an e-Marketing spot.
		The {@link wcfPropertyEditor#propertyName property name} provided should be the property name that
		contains the name of the e-Marketing spot.</p>
		
		<p>E-Marketing spot feed URLs have the format:
		<code>http://&lt;hostname&gt;/rest/MarketingSpotData/&lt;name&gt;?responseFormat=atom</code></p>
	-->
	<class name="mktPropertyEMarketingFeedURL" extends="wcfPropertiesComponent" sizeToAvailableWidth="true">
		<!---
			This attribute specifies the name of the {@link wcfModelProperty property} that will be used to derive the feed URL.
		-->
		<attribute name="propertyName" type="string"/>		
		<!---
			The {@link wcfModelProperty} instance that this property editor is editing.
			@type wcfModelProperty
		-->
		<attribute name="property"/>
		
		<!---
			@keywords private
			Create the editor box for the given {@link wcfModelProperty} component. This method overrides the createEditor
			method in the {@link wcfPropertiesComponent} class.
			@param wcfPropertiesComponent parentComponent The parent properties component from which to create the editor.
		-->
		<method name="createEditor" args="parentComponent">
			<![CDATA[
			var availableWidth = parentComponent.width - parentComponent.promptWidth - parentComponent.xspacing;
			new lz.mktEMarketingFeedURLViewer(parentComponent, {
				name: "editor",
				x: parentComponent.promptWidth + parentComponent.xspacing,
				property: parentComponent.property,
				width: availableWidth,
				enabled: parentComponent.enabled
			});
			]]>
		</method>
		
		<!---
			@keywords private
			Set the model object for this property viewer to the specified object.
			@param wcfModelObject newObject: the new object
		-->
		<method name="setModelObject" args="newObject">
			<![CDATA[
			super.setModelObject(newObject);
			var newProperty = null;
			if (this.o != null) {
				newProperty = this.o.getProperty(this.propertyName);
			}
			this.setAttribute("property", newProperty);
			
			if (this["editor"]) {
				this.editor.setAttribute("property", newProperty);
			}
			]]>
		</method>
	</class>
	
	<!---
		@keywords private
		This text viewer takes the e-Marketing spot name and generates the Atom feed URL for display.
		E-Marketing spot feed URLs have the format:
		<code>http://&lt;hostname&gt;/rest/stores/&lt;storeId&gt;/MarketingSpotData/&lt;name&gt;?responseFormat=atom</code>
	-->
	<class name="mktEMarketingFeedURLViewer" extends="wcfTextViewer">
		<!---
			Generates and returns the feed URL based on the properties value and sets it as the text
			to be displayed in the viewer.
			@param lz.Delegate del An optional delegate to call when a change in property value is caused by the value service.
			@returns string: display value
		-->
		<method name="getDisplayValue" args="del">
			<![CDATA[
			var value = this.property.value;
			var displayValue = "";
			var storeConfig = wcfContextUtil.findStoreConfig(this.property.o, del);
			
			if ((value != "") && (storeConfig != null)) {
				var currentURL = new LzURL(lz.Browser.getLoadURL());
				var hostname = currentURL.host;

				if(typeof(storeConfig.remoteWidgets["ProductionServer"]) != "undefined" && storeConfig.remoteWidgets.ProductionServer != null && storeConfig.remoteWidgets.ProductionServer != "") {
					hostname = storeConfig.remoteWidgets.ProductionServer;
				}
				
				var contextPath = "/wcs/resources";
				if(storeConfig.remoteWidgets.restContextPath != "") {
					contextPath = storeConfig.remoteWidgets.restContextPath;
				}

				var protocol = "http";
				var port = "";
				if(storeConfig.remoteWidgets.restNonSSLPort != "") {
					if(storeConfig.remoteWidgets.restNonSSLPort != "80") {
						port = ":" + storeConfig.remoteWidgets.restNonSSLPort;
					}
				}
				else if(storeConfig.remoteWidgets.restSSLPort != "") {
					protocol = "https";
					if(storeConfig.remoteWidgets.restSSLPort != "443") {
						port = ":" + storeConfig.remoteWidgets.restSSLPort;
					}
				}
				
				displayValue = protocol + "://" + hostname + port + contextPath + "/stores/" + storeConfig.storeId + "/MarketingSpotData/" + encodeURIComponent(value) + "?responseFormat=atom";
			}
			
			return displayValue;
			]]>
		</method>
	</class>
</library>
