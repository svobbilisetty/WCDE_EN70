<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2007, 2012 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->

<library>

	<!---
		@keywords private
		
		Class for creating a help manager that knows how to open links from 
		the help server.
		
		@START_CODE
    	<sample>
      		<include href="../HelpManager.lzx"/>
        
        	<wcfHelpManager id="helpManager"/>
    	</sample>
		@END_CODE
	-->
	<class name="wcfHelpManager" extends="node">		
		<!--- @keywords private -->
		<handler name="oninit">
			this.attemptToLaunchContextSensitiveHelpDel = new lz.Delegate(this, "attemptToLaunchContextSensitiveHelp");
			lz.Keys.callOnKeyCombo(this.attemptToLaunchContextSensitiveHelpDel, ['f2']);
			
		</handler>

		<!---
			@keywords private
			Delay 50ms and execute <code>del</code>
			@param lz.Delegate del: the delecate that will be executed 50ms later
		-->
		<method name="delay" args="del">
			lz.Timer.addTimer(del, 50);
		</method>

		<!---
			@keywords private
			Attempt to launch the context sensitive help by first checking if the lz.Keys.downKeysArray.length has 
			been reset first. If it's not, it will attempt to relaunch the function 50ms later.  This is a workaround
			provided for OL Support (Ticket LZ_SUP #EJN-31117-624).
		-->
		<method name="attemptToLaunchContextSensitiveHelp" args="e=null">
			if (lz.Keys.downKeysArray.length == 0) {
				this.openContextSensitiveHelp();
			} else {
				this.delay(this.attemptToLaunchContextSensitiveHelpDel);
			}
		</method>

		<!--- @keywords private -->
		<handler name="ondestroy">
			lz.Keys.removeKeyComboCall(this.attemptToLaunchContextSensitiveHelpDel, ['f2']);
		</handler>
		
		<!--- 
			Open a new browser with the specified URL in the specified window.
			@param string url: the full URL to launch
			@param string windowHandlerName: the name of the window to launch
		-->
		<method name="openLink" args="url,windowHandlerName">
			<![CDATA[
				// put together an object containing all required parameters
				var newWindowObj = new Object();
				newWindowObj.URL = url;
				newWindowObj.windowName = windowHandlerName;
				newWindowObj.windowFeatures = "left=0,top=0,width=1014,height=710,scrollbars=yes,toolbar=yes,directories=yes,status=yes,menubar=yes,copyhistory=yes,resizable=yes";
	
				// call the javascript method in the parent window provided by shell
				// to open a new window with the specified parameters
				callJSFunction("openNewWindow", newWindowObj);
			]]>
		</method>
		
		<!---
			Get the prefix for all help URLs. This includes the protocol, host, port and context path.
			The default prefix is http://<host>:8001/help
			@return string The help URL prefix
		-->
		<method name="getHelpURLPrefix">
			<![CDATA[
				var url = new LzURL(lz.Browser.getLoadURL());
				var host = global["helpServerHostName"] ? global.helpServerHostName : url.host;
				var helpPort = global["helpServerPort"] ? global.helpServerPort : "8001";
				var context = global["helpServerContextPath"] ? global.helpServerContextPath : "/help";
				var helpURLPrefix = "http://" + host;
				if (helpPort != "80") {
					helpURLPrefix += ":" + helpPort;
				}
				helpURLPrefix += context;
				return helpURLPrefix;
			]]>
		</method>

		<!--- 
			Open a new browser with the specified relative URL.
			The relative URL will be pre-pended with the common help server
			path and required parameters.
			@param string relativeURL: the relative URL to launch
		-->
		<method name="openHelpLink" args="relativeURL">
			<![CDATA[
				var helpURL = "";
				if (relativeURL.indexOf("?") != -1) {
					helpURL = this.getHelpURLPrefix() + "/topic/com.ibm.commerce.management-center.doc/" + relativeURL + "&lang=" + preferenceManager.getPreference("preferredLanguage");
				} else {
					helpURL = this.getHelpURLPrefix() + "/topic/com.ibm.commerce.management-center.doc/" + relativeURL + "?lang=" + preferenceManager.getPreference("preferredLanguage");
				}
				this.openLink(helpURL,"helpWindow");
			]]>
		</method>		

		<!--- 
			Open a new browser to show videos with the specified relative URL.
			The relative URL will be pre-pended with the common help server
			path and required parameters.
			@param string relativeURL: the relative URL to launch
		-->
		<method name="openVideoLink" args="relativeURL">
			<![CDATA[
				var videoURL = "";
				if (relativeURL.indexOf("?") != -1) {
					videoURL = this.getHelpURLPrefix() + "/topic/com.ibm.commerce.management-center.doc/" + relativeURL;
				} else {
					videoURL = this.getHelpURLPrefix() + "/topic/com.ibm.commerce.management-center.doc/" + relativeURL;
				}
				this.openLink(videoURL,"videoWindow");
			]]>
		</method>	

		<!--- 
			Open a new browser and direct it to the information center home page.
		-->
		<method name="openInfoCenter">
			<![CDATA[
				var helpURL = this.getHelpURLPrefix() + "/index.jsp?lang=" + preferenceManager.getPreference("preferredLanguage");
				this.openLink(helpURL,"helpWindow");
			]]>
		</method>
				
		<!--- 
			Determine the relative URL that contains the help information
			that explains the task in hand depending on the current context
			of the user.
			The relative URL is either defined here for general shell panels
			or they are defined in each component business editor code.
		-->
		<method name="openContextSensitiveHelp">
			<![CDATA[
				var helpLink = "";
				
				if (!global['logonPanel'] && global.logonPanel.visible) {
					//must be in logon page
					helpLink = "tasks/ttflogon.htm";
				} else if (preferenceManager.userPreferenceDialog != null && preferenceManager.userPreferenceDialog.visible) {
					//must be in user preference dialog open
					helpLink = "concepts/ctfcmc.htm";
				} else if (typeof(global["toolsController"]) == "undefined" || toolsController.toolList.length > 0) {
					var currentToolPane;
					if (typeof(global["toolsController"]) != "undefined") {
						// there is some tool selected
						currentToolPane = toolPanesWidget.getCurrentPane();
					} else {
						currentToolPane = canvas.testShell.editorArea.editor;
					}

					if (currentToolPane instanceof lz.wcfBusinessObjectEditor) {
						// get the navigation tree
						var navigationTree = currentToolPane.navigationTree;
						var treeNodeSelection = navigationTree.getSelection();

						if (treeNodeSelection instanceof lz.wcfBrowseObjectTree) {
							// browse object
							// showing the child list of the object
							// thus helpLink must be in the ChildListDefinition
							var selectedNavigationListDefinition = treeNodeSelection.navigationListDefinition;
							if (selectedNavigationListDefinition == null && treeNodeSelection.o != null) {
							   selectedNavigationListDefinition = treeNodeSelection.o.objectDefinition;
							}
							helpLink = selectedNavigationListDefinition.helpLink;
						} else if (treeNodeSelection instanceof lz.wcfOpenObjectTree) {
							// active work open object
							// showing the object properties
							// thus helpLink must be in the object definition
							var selectedObjectDefinition = treeNodeSelection.o.objectDefinition;
							helpLink = selectedObjectDefinition.helpLink;
						} else if (treeNodeSelection instanceof lz.wcfSearchResultsTree) {
							// search results selected
							// for now just pass the main tool link
							helpLink = treeNodeSelection.searchDefinition.helpLink;
						} //else {
							// cannot find a context sensitive help therefore default to main tool help
							//helpLink = currentToolPane.helpLink;
						//}

						if (helpLink == "") {
							helpLink = currentToolPane.helpLink;
						}
					} else {
						//getting started page is not a business object editor
						helpLink = "concepts/ctfcmc.htm";
					}
				} else {
					//no tools tab open so is a blank shell
					helpLink = "concepts/ctfcmc.htm";
				}

				//open help with the link determined by algorithm
				this.openHelpLink(helpLink);
			]]>
		</method>
		
		<!--- 
			Open a new browser and direct it to the shortcut key legend help page.
		-->
		<method name="openShortcutKeyLegend">
			<![CDATA[
				this.openHelpLink("concepts/ctfcmcshortcut.htm");
			]]>
		</method>
		
		<!--- 
			Open a new browser and direct it to the getting started help page.
		-->
		<method name="openGettingStarted">
			<![CDATA[
				this.openHelpLink("refs/rtfgetstart.htm?noframes=true");
			]]>
		</method>
	</class>
</library>
