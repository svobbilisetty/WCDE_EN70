<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2007, 2012 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->
<library>
	<!---
		The logger instance. It is used to log messages. Messages can be buffered in memory and
		sent to the server or debugger window in batches periodically.

		The initial values of the following attributes can be set from the URL:

		Attribute		URL parameter			Default value

		enabled			logger.enabled			"false"
		display			logger.display			"false"
		nodecount		logger.nodecount		"false"
		bufferSize		logger.bufferSize		1000
		level			logger.level			"INFO"
		flushInterval	logger.flushInterval	20
		serverURL		logger.serverURL		"/cmc/LogMessages"
		target			logger.target			"server"
		sendImmediately	logger.sendImmediately	false
		components		logger.components		null
		
		Below is an example of how wcfLogger can be used.  This example would log the methods entry as well as it's exit.  Additional 
		information would also be logged about the object to be saved as well as the service transaction.
		
		@START_CODE
			<method name="addSaveObject" args="o">
				<![CDATA[
				if (wcfLogger.enabled) {
					wcfLogger.entering("com.ibm.commerce.lobtools.foundation.service", "wcfServiceTransaction", "addSaveObject(o)", [o]);
					wcfLogger.log("com.ibm.commerce.lobtools.foundation.service", "INFO", "wcfServiceTransaction", "addSaveObject(o)", "adding save object for service " + this.service.url + " " + o.logString());
				}
				
				//content of addSaveObject method
				
				if (wcfLogger.enabled) {
					wcfLogger.exiting("com.ibm.commerce.lobtools.foundation.service", "wcfServiceTransaction", "addSaveObject");
				}
				]]>
			</method>
		@END_CODE
	-->
	<node id="wcfLogger">
		<!---
			@keywords private
			The level and level value mapping.
		 -->
		<attribute name="levelValues" value="${{}}"/>
		<!---
			@keywords private
			Whether or not display the floating Logging and Tracing window after logon is successful. Default is not
		-->
		<attribute name="display" type="boolean" value="false"/>
		<!---
			@keywords private
			Whether or not display the node count when the logger is enabled or disabled. Default is not
		-->
		<attribute name="nodecount" type="boolean" value="false"/>
		<!---
			Indicates that trace has been enabled.
		-->
		<attribute name="enabled" type="boolean" value="false"/>
		<!---
			Indicates that performance trace has been enabled.
		-->
		<attribute name="perfTraceEnabled" type="boolean" value="false"/>
		<!---
			@keywords private
			Where to send the trace. 'server' means the traces will be sent to server. 'debugger' means the traces will
			be printed in the local Openlaszlo Debug Window. Default value is 'server'. This value can only be
			set to 'debugger' if Openlaszlo Debugger is enabled.
		-->
		<attribute name="target" type="string" value="server"/>
		<!---
			@keywords private
			Whether or not send the trace immediately. This option is only used when the target is 'debugger'. If target is 'debugger'
			and this value is true, the trace will be printed in the Openlaszlo Debug Window immediately instead of buffering it and send in batch.
		-->
		<attribute name="sendImmediately" type="boolean" value="false"/>
		<!---
			@keywords private
			The buffer size. Buffered messages are sent to the
			server immediately if the number of buffered messages
			equals or exceeds this value.
		-->
		<attribute name="bufferSize" type="number" value="1000"/>
		<!---
			@keywords private
			The time interval which buffered messages are sent to the
			server (in seconds).
		-->
		<attribute name="flushInterval" type="number" value="20"/>
		<!---
			@keywords private
			The log level value. Messages with levels lower than the log
			level are discarded. A log level of "OFF" (equivalent to
			2^31 - 1) disables the logger and clears the buffer.
			Other log levels include "SEVERE", "WARNING", "INFO",
			"CONFIG", "FINE", "FINER", "FINEST" and "ALL". The corresponding
			level values are: Math.pow(2, 31) - 1, 1000, 800, 700, 600, 500,
			400, 300, -Math.pow(2, 31).
		-->
		<attribute name="levelValue" setter="setLevelValue(levelValue)" type="number"/>

		<!---
			@keywords private
			The server URL which buffered messages are sent to.
		-->
        <attribute name="serverURL" type="string" value="${this.getInitialValue('logger.serverURL', this.getServerURLDefaultValue())}" />
        <!---
			@keywords private
        	 An array of the names of all components.
         -->
		<attribute name="components" value="${[]}"/>	
		<!---
			@keywords private
			A map keeps the specific level setting for components. Key the name of the component, value is one of the levels.
			If a component does not have specific level in the map, this means it uses default level.
		 -->
		<attribute name="componentsLevel" value="${{}}"/>
		<!---
			@keywords private
			An array of pending flush requests. This array is used to serialize the flush requests to ensure that messages
			are not interleaved in the log.
		-->
		<attribute name="pendingFlushRequests" value="${[]}"/>
		
		<dataset name="action" type="http" querytype="post" request="false"
			src="${parent.serverURL}" />
		<!---
			@keywords private
			Initialize the wcfLogger. Set level values, attribute defaults and initialize the delegates.
		-->
		<method name="init">
			<![CDATA[
			super.init();
			this.levelValues = {'OFF':Math.pow(2, 31) - 1, 'SEVERE':1000, 'WARNING':800, 'INFO':700, 'CONFIG':600, 'FINE':500, 'FINER':400, 'FINEST':300, 'ALL':-Math.pow(2, 31)};
			this.flushDelegate = new lz.Delegate(this, "flush");
			
			setDisplay(getInitialValue("logger.display", false));
			setLevel(getInitialValue("logger.level", "INFO"));
			setTarget(getInitialValue("logger.target", "server"));
			setSendImmediately(getInitialValue("logger.sendImmediately", "false"));			
			setBufferSize(getInitialValue("logger.bufferSize", "1000"));
			setFlushInterval(getInitialValue("logger.flushInterval", "20"));
			setServerURL(getInitialValue("logger.serverURL", getServerURLDefaultValue()));
			setNodeCount(getInitialValue("logger.nodecount", false));
			setPerfTraceEnabled(getInitialValue("logger.perfTraceEnabled", false));
			initComponents(getInitialValue("logger.components", null));
			if (this.display && !this["logTraceWindow"]) {
				this.logTraceWindow = new lz.wcfLogTraceWindow(canvas, {showDebuggerOptions:(this.target === "debugger")});
			}
			
			setEnabled(getInitialValue("logger.enabled", false)); //should be done last
			]]>			
		</method>
		
		<!---
			@keywords private
			Get the initial value from the URL parameters.
			@param string name: the name of the attribute
			@param expression defaultValue: the default value
			@return string: The value for a key that appears in the request to the lps server
		-->
		<method name="getInitialValue" args="name,defaultValue">
			<![CDATA[
				var value = lz.Browser.getInitArg(name);
				return (typeof value == "undefined" || value == null ? defaultValue : value);
			]]>
		</method>
		
		<!---
			@keywords private
			Registers the build-in components as well as the passed in components.
			New components can be passed in using URL parameter logger.components. Multiple components are separated using ",".
			For example, logger.components=com.yourco.yourcomp1,com.yourco.yourcomp2
			@param string passInComponents: URL parameter for components
		-->
		<method name="initComponents" args="passInComponents">
			<![CDATA[
			this.components = ['com.ibm.commerce.lobtools.foundation.view',
								'com.ibm.commerce.lobtools.foundation.model',
								'com.ibm.commerce.lobtools.foundation.service',
								'com.ibm.commerce.lobtools.foundation.util',
								'com.ibm.commerce.lobtools.foundation.shell'];
			if (passInComponents != null)
			{					
				var newComponents = passInComponents.split(",");
				for (var i = 0; i < newComponents.length; i++)
				{
					var newComponent = newComponents[i];
					if (newComponent != '')
					{
						this.components.push(newComponents[i]);
					}
				}					
			}
			]]>
		</method>
		
		<!---
			@keywords private
			Get the default value for the specified attribute.
			@return string
		-->
		<method name="getServerURLDefaultValue">
			<![CDATA[
			var value = null;
			value = "/cmc/LogMessages";
			if (global["serviceContextRoot"]) {
				value = global["serviceContextRoot"] + value;
			}
			else {
				value = "/lobtools" + value;
			}
			return value;
			]]>
		</method>
		
		<!---
			@keywords private
			Sets if display the 'Logging and Tracing' menu item on the application menu.
			@param string/boolean display: true or false
		 -->
		<method name="setDisplay" args="display">
			<![CDATA[
				if ((typeof display == "string" && display == "true") || (typeof display == "boolean") && display) {
					this.display = true;
				}
				else
				{
					this.display = false;
				}
				if (this.enabled) {
					this.log("com.ibm.commerce.lobtools.foundation.util", "CONFIG", "wcfLogger", "setDisplay", "logger.dipslay=" + this.display);
				}
			]]>
		</method>
		
		<!---
			@keywords private
			Sets if enable the trace.
			@params boolean enabled
		 -->
		<method name="setEnabled" args="enabled">
			<![CDATA[
				var numOfNodes = 0;
				var logMsg = "";				
				if (typeof enabled != "undefined" && enabled != null && this.enabled != enabled) {
					if ((typeof enabled == "string" && enabled == "true") || (typeof enabled == "boolean") && enabled) {
						this.enabled = true;
					}
					else
					{
						logMsg = "wcfLogger disabled. ";
						if (this.nodecount == true) {
							numOfNodes = this.countNodes(canvas);
							logMsg = logMsg + "Current NODE COUNT is: " + numOfNodes;
						}
						this.log("com.ibm.commerce.lobtools.foundation.util", "CONFIG", "wcfLogger", "setEnabled", logMsg);	
						this.flush();
						this.enabled = false;
					}
					this.resetTimer();
					if (this.enabled) {
						logMsg = "wcfLogger enabled. ";
						if (this.nodecount == true) {
							numOfNodes = this.countNodes(canvas);
							logMsg = logMsg + "Current NODE COUNT is: " + numOfNodes;
						}
						this.log("com.ibm.commerce.lobtools.foundation.util", "CONFIG", "wcfLogger", "setEnabled", logMsg);										
					}
				}
			]]>
		</method>

		<!---
			@keywords private
			Sets if enable the Performance trace.
			@params boolean enabled
		 -->
		<method name="setPerfTraceEnabled" args="enabled">
			<![CDATA[
				if (typeof enabled != "undefined" && enabled != null && this.perfTraceEnabled != enabled) {
					if ((typeof enabled == "string" && enabled == "true") || (typeof enabled == "boolean") && enabled) {
						this.perfTraceEnabled = true;
						wcfLogger.perfTrace("wcfLogger", "setPerfTraceEnabled", "Performance Trace enabled");
					}
					else
					{
						wcfLogger.perfTrace("wcfLogger", "setPerfTraceEnabled", "Performance Trace disabled");					
						this.perfTraceEnabled = false;
					}
				}
			]]>
		</method>
		
		<!---
			@keywords private
			Creates the buffer.
		-->
		<method name="createBuffer">
			<![CDATA[
			var bufferLength = this.bufferSize + 10; //just in case
			if(typeof(this.buffer) === "undefined" || this.buffer.length !== bufferLength) {
				//create a new buffer if there isn't one or it needs to be resized
				this.buffer = new Array(bufferLength);
			}
			else {
				//delete (dereference) the buffered messages
				for(var i = 0; i < this.messageCount; i++) {
					delete this.buffer[i];
				}
			}
			this.messageCount = 0;
			]]>
		</method>

		<!---
			@keywords private
			Clear the buffer.
		-->
		<method name="clearBuffer">
			<![CDATA[
			delete this.buffer;
			delete this.messageCount;
			]]>
		</method>

		
		<!---
			@keywords private
			Reset or remove the flush timer, depending on configuration.
		-->
		<method name="resetTimer">
			<![CDATA[
				if(this.enabled && (this.target === "server" || this.target === "debugger" && !this.sendImmediately)) {
					lz.Timer.resetTimer(this.flushDelegate, this.flushInterval*1000);
				}
				else {
					lz.Timer.removeTimer(this.flushDelegate);
				}
			]]>
		</method>
		
		<!---
			@keywords private
			Sets where to send the trace. It acccepts one of the two values:
			'debugger' - message will print out in the debugger window.
			'server' - message will send to log server and print out in trace file.
			'debugger' option can only be set when the application is running in debug mode.
			@param string target: server or debugger
		 -->
		<method name="setTarget" args="target">
			<![CDATA[
				if ($debug && target == 'debugger') {
					this.flush();				
					this.target = 'debugger';
				}
				else {
					this.setSendImmediately(false);
					this.target = 'server';
					this.resetTimer();
				}
				if (this.enabled) {
					this.log("com.ibm.commerce.lobtools.foundation.util", "CONFIG", "wcfLogger", "setTarget", "logger.target=" + this.target);
				}
			]]>
		</method>
		
		<!---
			@keywords private
			Sets if send the trace to debugger window immediately. Send immediately means print out the log message in debugger window right away
			instead of caching it in the message buffer first.
			@param string/boolean sendImmediately
		 -->
		<method name="setSendImmediately" args="sendImmediately">
			<![CDATA[
				if (this.target == 'debugger') {
					if ((typeof sendImmediately == "string" && sendImmediately == "true") || (typeof sendImmediately == "boolean") && sendImmediately) {
						if (this.enabled) {
							this.log("com.ibm.commerce.lobtools.foundation.util", "CONFIG", "wcfLogger", "setSendImmediatelyTarget", "logger.sendImmediately=true");
						}
						this.sendImmediately = true;
						this.resetTimer();
					}
					else
					{
						if (this.enabled) {
							this.log("com.ibm.commerce.lobtools.foundation.util", "CONFIG", "wcfLogger", "setSendImmediatelyTarget", "logger.sendImmediately=false");
						}
						this.sendImmediately = false;
						this.resetTimer();
					}
				}
			]]>
		</method>
		
		<!---
			@keywords private
			Sets the URL of the server to send the trace to.
			@param string serverURL: URL of server to send trace to
		 -->
		<method name="setServerURL" args="serverURL">
			<![CDATA[
				if(typeof serverURL != "undefined" && serverURL != null && this.serverURL != serverURL) {
					this.serverURL = serverURL;
					this.action.setAttribute('src', this.serverURL);
					if (this.enabled) {
						this.log("com.ibm.commerce.lobtools.foundation.util", "CONFIG", "wcfLogger", "setServerURL", "logger.serverURL=" + this.serverURL);
					}
				}
			]]>
		</method>

		<!---
			@keywords private
			Sets the default log level.
			@param string level: levels include "SEVERE", "WARNING", "INFO", "CONFIG", "FINE", "FINER", "FINEST" and "ALL". 
		 -->
		<method name="setLevel" args="level">
			<![CDATA[
				this.setLevelValue(this.getLevelValue(level));
			]]>
		</method>
		
		<!---
			@keywords private
			Sets the default log level value.
			@param string level: level values are Math.pow(2, 31) - 1, 1000, 800, 700, 600, 500, 400, 300, -Math.pow(2, 31).
		 -->
		<method name="setLevelValue" args="levelVal">
			<![CDATA[
				this.levelValue = levelVal;
				if (this.enabled) {
					this.log("com.ibm.commerce.lobtools.foundation.util", "CONFIG", "wcfLogger", "setLevel", "logger.level=" + this.levelValue);
				}
			]]>
		</method>
		
		<!---
			@keywords private
			Sets the size of the message buffer. Size means how many messages the buffer can hold before flushing.
			The range is from 100 to 5000.
		 -->
		<method name="setBufferSize" args="bufferSize">
			<![CDATA[
				if(typeof bufferSize != "undefined" && bufferSize != null) {
					bufferSize = Number(bufferSize);
					if(!isNaN(bufferSize)) {
					    if (bufferSize < 100)
					    {
					    	bufferSize = 100;
					    }
					    if (bufferSize > 5000)
					    {
					    	bufferSize = 5000;
					    }				
				    }
				    this.bufferSize = bufferSize;
					if (this.enabled) {
						this.log("com.ibm.commerce.lobtools.foundation.util", "CONFIG", "wcfLogger", "setBufferSize", "logger.bufferSize=" + this.bufferSize);
					}
				}
			]]>
		</method>
		
		<!---
			@keywords private
			Sets the flush interval (in seconds).
			@param number flushInterval: The range is from 10 to 600.
		 -->
		<method name="setFlushInterval" args="flushInterval">
			<![CDATA[
				if(typeof flushInterval != "undefined" && flushInterval != null) {
					flushInterval = Number(flushInterval);
					if(!isNaN(flushInterval)) {
					    if (flushInterval < 10)
					    {
					    	flushInterval = 10;
					    }
					    if (flushInterval > 600)
					    {
					    	flushInterval = 600;
					    }				
	
					    this.flushInterval = flushInterval;
					    if (this.enabled) {
						    this.flush();
						}
						if (this.enabled) {
							this.log("com.ibm.commerce.lobtools.foundation.util", "CONFIG", "wcfLogger", "setFlushInterval", "logger.flushInterval=" + this.flushInterval);
						}
					}
				}
			]]>
		</method>
		
		<!---
			Flush the messages in the buffer to the server.
		 -->
		<method name="flush" args="e=null">
			<![CDATA[
			if(typeof(this["buffer"]) != "undefined" && this.messageCount > 0) {
				var flushStart = new Date();
				this.buffer[this.messageCount++] = this.buildMsg(flushStart, "com.ibm.commerce.lobtools.foundation.util", "CONFIG", "wcfLogger", "flush", "sending " + this.messageCount + " messages to = " + this.serverURL);
				if (target == 'debugger') {
					for (var i = 0; i < this.messageCount; i++) {
						Debug.write(this.buffer[i]);
					}
				}
				else {
					var msgs = "msgs=%3Cmsgs%3E"; //"msgs=" + encodeURIComponent("<msgs>")
					for (var i = 0; i < this.messageCount; i++) {
						msgs += this.buffer[i];
					}
					msgs += "%3C%2Fmsgs%3E"; //encodeURIComponent("</msgs>");
					this.pendingFlushRequests.push(msgs);
					if (this.pendingFlushRequests.length == 1) {
						this.doFlushRequest();
					}
				}
				this.clearBuffer();
				//var flushEnd = new Date();
				//this.createBuffer();
				//this.buffer[this.messageCount++] = this.buildMsg(flushEnd, "com.ibm.commerce.lobtools.foundation.util", "CONFIG", "wcfLogger", "flush", "total time: " + ((flushEnd.getTime() - flushStart.getTime())/1000));
			}
			this.resetTimer();
			]]>
		</method>
		
		<!---
			@keywords private
			Perform the next flush request in the list of pending flush requests.
		-->
		<method name="doFlushRequest">
			<![CDATA[
			if (this.pendingFlushRequests.length > 0) {
				var queryString = "identityId=" + wcfContextUtil.findContextValue(null, "identityId").value + "&";
				queryString += this.pendingFlushRequests[0];
				this.action.setQueryString(queryString);
				this.action.doRequest();
				this.action.setQueryString(""); //to dereference the previous query string
			}
			]]>
		</method>
		
		<!---
			@keywords private
			Handle service request successful.
		-->
		<handler name="ondata" reference="action">
			<![CDATA[
			this.pendingFlushRequests.shift();
			this.doFlushRequest();
			]]>
		</handler>

		<!---
			@keywords private
			Handle service request error.
		-->
		<handler name="onerror" reference="action">
			<![CDATA[
			this.pendingFlushRequests.shift();
			this.doFlushRequest();
			]]>
		</handler>

		<!---
			@keywords private
			Handle service request timeout.
		-->
		<handler name="ontimeout" reference="action">
			<![CDATA[
			this.pendingFlushRequests.shift();
			this.doFlushRequest();
			]]>
		</handler>

		<!---
			Logs a message.
			@param string loggerName: the logger name.
			@param string level: the message level.
			@param string sourceClass: the source class.
			@param string sourceMethod: the source method.
			@param string message: the message.
			@param string parameters: the message parameters.
		-->
		<method name="log" args="loggerName,level,sourceClass,sourceMethod,message,parameters=null">
			<![CDATA[
			if (this.isEnabled(loggerName, level))
			{
				var now = new Date();
				var msg = this.buildMsg(now, loggerName,level,sourceClass,sourceMethod,message,parameters);
				if (this.sendImmediately) {
					Debug.write(msg);
				}
				else {
					if (level == "SEVERE") {
						Debug.write(message);
					}
					if(typeof(this.buffer) === "undefined") {
						this.createBuffer();
					}
					this.buffer[this.messageCount++] = msg;
					if(this.messageCount > this.bufferSize || level == "SEVERE") {
						this.flush();
					}
				}
			}
			]]>
		</method>

		<!---
			Logs a performance related message for response time measurement.
			Using the default loggername (com.ibm.commerce.lobtools.foundation.perf) and level (INFO). No "parameters"
			@param string sourceClass: the source class.
			@param string sourceMethod: the source method.
			@param string message: the message.
		-->
		<method name="perfTrace" args="sourceClass,sourceMethod,message">
			<![CDATA[
				var now = new Date();
				var msg = this.buildMsg(now, "com.ibm.commerce.lobtools.foundation.perf", "INFO",sourceClass,sourceMethod,message);
				if (this.sendImmediately) {
					Debug.write(msg);
				}
				else {
					if(typeof(this.buffer) === "undefined") {
						this.createBuffer();
					}
					this.buffer[this.messageCount++] = msg;
					if(this.messageCount > this.bufferSize) {
						this.flush();
					}
				}
			]]>
		</method>

		<!---
			@keywords private
			Builds the log messsage to be send.
			This mehtod is called inside of log method to build the individual log message.
			@param string currentTime: the current time.
			@param string loggerName: the logger name.
			@param string level: the message level.
			@param string sourceClass: the source class.
			@param string sourceMethod: the source method.
			@param string message: the message.
			@param string parameters: the message parameters.
			@return string message
		-->
		<method name="buildMsg" args="currentTime, loggerName,level,sourceClass,sourceMethod,message,parameters=null">
			<![CDATA[
				var msg;
				if (this.target == 'debugger') {
					msg = currentTime + " " + loggerName + " " + level + " " + sourceClass + " " + sourceMethod + " " + message;
					var param = "";
					if(typeof parameters != "undefined" && parameters != null) {
							for(var i = 0; i < parameters.length; i++) {
								param = param + " " + parameters[i];
							}
					}
					msg = msg + param;
				}
				else {
					msg =  "%3Cmsg%20time%3D%22" //encodeURIComponent("<msg time=\"")
							+ currentTime.getTime() //all alphanumeric characters, no need to encode
							+ "%22%20logrName%3D%22" //encodeURIComponent("\" logrName=\"")
							+ encodeURIComponent(loggerName)
							+ "%22%20lvl%3D%22" //encodeURIComponent("\" lvl=\"")
							+ level //all alphanumeric characters, no need to encode
							+ "%22%20srcCls%3D%22" //encodeURIComponent("\" srcCls=\"")
							+ encodeURIComponent(sourceClass)
							+ "%22%20srcMthd%3D%22" //encodeURIComponent("\" srcMthd=\"")
							+ encodeURIComponent(sourceMethod)
							+ "%22%3E%3Ctext%3E%3C%21%5BCDATA%5B" //encodeURIComponent("\"><text><![CDATA[")
							+ this.encodeCDataSection(encodeURIComponent(message))
							+ "%5D%5D%3E%3C%2Ftext%3E"; //encodeURIComponent("]]" + "></text>")
					var param = "";
					if(typeof parameters != "undefined" && parameters != null) {
						if (parameters.length > 0) {
							for(var i = 0; i < parameters.length; i++) {
								param = param + "%3Cparam%3E%3C%21%5BCDATA%5B" //encodeURIComponent("<param><![CDATA[")
										+ this.encodeCDataSection(encodeURIComponent(parameters[i]))
										+ "%5D%5D%3E%3C%2Fparam%3E"; //encodeURIComponent("]]" +"></param>")
							}
						}
					}
					
					msg = msg + param + "%3C%2Fmsg%3E"; //encodeURIComponent("</msg>")
				}
				return msg;
			]]>
		</method>
		
		<!---
			@keywords private
			Gets the level value for the given level.
			@param string level: For example, 'INFO' level will return 700.
			@return number
		 -->
		<method name="getLevelValue" args="level">
			<![CDATA[
				if(typeof level == "number") {
					return level;
				}
				else if(typeof this.levelValues[level] == "undefined") {
					return parseInt(level);
				}
				else {
					return this.levelValues[level];
				}
			]]>
		</method>

		<!---
			Logs a method entry.
			@param string loggerName: the logger name.
			@param string level: the message level.
			@param string sourceClass: the source class.
			@param string sourceMethod: the source method.
			@param string parameters: the message parameters.
		-->
		<method name="entering" args="loggerName,sourceClass,sourceMethod,parameters=null">
			<![CDATA[
				var message = "ENTRY";
				if(typeof parameters != "undefined" && parameters != null) {
					if(!(parameters instanceof Array)) {
						parameters = [parameters];
					}
					if (this.target != 'debugger')
					{
						for (var i = 0; i < parameters.length; i++) {
							message = message + " {" + i + "}";
						}
					}
				}
				this.log(loggerName, "FINER", sourceClass, sourceMethod, message, parameters);
			]]>
		</method>

		<!---
			Logs a method exit.
			@param string loggerName: the logger name.
			@param string level: the message level.
			@param string sourceClass: the source class.
			@param string sourceMethod: the source method.
			@param string result: the result of the method.
		-->
		<method name="exiting" args="loggerName,sourceClass,sourceMethod,result=undefined">
			<![CDATA[
				if(typeof result == "undefined")
				{
					this.log(loggerName, "FINER", sourceClass, sourceMethod, "RETURN");				
				}
				else
				{
					if (this.target != 'debugger')
					{
						this.log(loggerName, "FINER", sourceClass, sourceMethod, "RETURN {0}", [result]);
					}
					else
					{
						this.log(loggerName, "FINER", sourceClass, sourceMethod, "RETURN", [result]);
					}
				}
					
			]]>
		</method>

		<!---
			@keywords private
			Method to open the Log and Trace window. This method is called when user select Logging and Tracing from application menu.
		-->
		<method name="loadLogTraceWindow">
			<![CDATA[
			if (!this["logTraceWindow"]) {
				this.logTraceWindow = new lz.wcfLogTraceWindow();
			}			
			this.logTraceWindow.openWindow();
			]]>
		</method>
		<!---
			@keywords private
			Method to close the Log and Trace window. This method is called when user logs out.
		-->
		<method name="closeLogTraceWindow">
			<![CDATA[
			if (this["logTraceWindow"]) {
				this.logTraceWindow.closeWindow();
			}			

			]]>
		</method>

		<!---
			@keywords private
			@param number nodecount
		 -->
		<method name="setNodeCount" args="nodecount">
			<![CDATA[
				if ((typeof nodecount == "string" && nodecount == "true") || (typeof nodecount == "boolean") && nodecount) {
					this.nodecount = true;
				}
				else
				{
					this.nodecount = false;
				}
				if (this.enabled) {
					this.log("com.ibm.commerce.lobtools.foundation.util", "CONFIG", "wcfLogger", "setNodeCount", "logger.nodecount=" + this.nodecount);
				}
			]]>
		</method>

		<!---
			@keywords private
			@param node
			@return number count
		 -->
		<method name="countNodes" args="node">
			<![CDATA[
				var count = 1;
				if("subnodes" in node && node.subnodes !== null) {
					for(var i = 0; i < node.subnodes.length; i++) {
						count += countNodes(node.subnodes[i]);
					}
				}
				return count;
			]]>
		</method>
		
		<!---
			@keywords private
			Check if the specified level is enabled for the component.
			For example, if the level setting for component 'com.ibm.commerce.lobtools.foundation.model' is 'CONFIG' and the
			specified level is 'INFO', false will be returned. If the specified level is 'FINE', then true will be returned.
			@param string component: component path
			@param string level: specified level
			@return boolean
		 -->
		<method name="isEnabled" args="component, level">
			<![CDATA[
			// Not calling getLevelValue for improving performance
			var thisLevelVal = this.levelValues[level];
			// Always log severe message.
			if (thisLevelVal >= 1000)
			{
				return true;
			}
			// Get component specific level setting
			var levelVal = this.componentsLevel[component];
			// Use the default level if there is no specific level setting			
			if (levelVal == null)
			{
				levelVal = this.levelValue;
			}
			if (thisLevelVal >= levelVal)
			{
				return true;
			}
			else
			{
				return false;
			}
			]]>
		</method>

		<!---
			@keywords private
			This method encodes the end part of a CDATA section to avoid nested CDATA sections in the specified data.
			@param string data: original string of data to be encoded
			@return string the encoded string
		-->
		<method name="encodeCDataSection" args="data">
			<![CDATA[
				return wcfStringUtil.replace(data, "%5D%5D%3E", "%5D%5D%5D%5D%3E%3C%21%5BCDATA%5B%3E");
			]]>
		</method>
	</node>
	<!---
		The event timer instance. If enabled, the event timer will time user events such as mouse clicks and keyboard actions.
		The timings will start when the user event is detected and continue until all of the services and deferred callbacks generated
		by the user action are completed.
	-->
	<node id="wcfEventTimer">
		
		<!--- @keywords private -->
		<attribute name="enabled" type="boolean" value="false" />
	
		<!--- @keywords private -->
		<attribute name="currentEventId" type="number" value="null" />

		<!--- @keywords private -->
		<attribute name="eventTimeMap" value="${{}}" />
		
		<!--- @keywords private -->
		<method name="start" args="msg">
		<![CDATA[			
			if (currentEventId == null) {
				var currentTime = new Date();
				this.currentEventId = currentTime.getTime();
				this.eventTimeMap[this.currentEventId] = {msg: msg, objCount: 0};
			}
			else {
				this.appendMsg(msg);
			}
		]]>
		</method>
		
		<!--- @keywords private -->
		<method name="restart" args="eventId">
		<![CDATA[
			this.currentEventId = eventId;
		]]>
		</method>
		
		<!--- @keywords private -->
		<method name="end">
		<![CDATA[
		if (this.currentEventId != null) {
			this.eventTimeMap[this.currentEventId].endTime = new Date().getTime();
			this.currentEventId = null;
		}
		]]>
		</method>
		
		<!--- @keywords private -->
		<method name="appendMsg" args="msg">
		<![CDATA[
			if (this.currentEventId != null) {
				this.eventTimeMap[this.currentEventId].msg = this.eventTimeMap[this.currentEventId].msg + " " + msg;
			}
		]]>
		</method>
		
		<!--- @keywords private -->
		<method name="updateObjCount" args="numOfObjects">
		<![CDATA[
			if (this.currentEventId != null) {
				this.eventTimeMap[this.currentEventId].objCount += numOfObjects;
			}
		]]>
		</method>
		
		<!--- @keywords private -->
		<handler name="onenabled">
			<![CDATA[
			if (!this.enabled) {
				this.log();
			}
			]]>
		</handler>		
		
		<!--- @keywords private -->
		<method name="log" >
		<![CDATA[
			var msg;
			var event;
			var tempArray = [];
			var startTime;
			var objCount;
			for (var eventId in this.eventTimeMap) {
				event = this.eventTimeMap[eventId];
				event.startTime = eventId;
				tempArray.push(event);
			}
			for (var i = tempArray.length-1; i >= 0; i--) {
				event = tempArray[i];
				startTime = Number(event.startTime);
				objCount = event.objCount > 0 ? ("/"+event.objCount+" object" + (event.objCount > 1 ? "s" : "")) : "";
				if (event["endTime"]) {
					msg = [wcfDateUtil.format(new Date(startTime), "MM/dd/yy HH:mm:ss.SSS "),
						   event.msg,
						   " (",
						   (event.endTime - startTime),
						   "ms",
						   objCount,
						   ")"
						  ].join("");					
					messageLogger.logStatus(msg);
					wcfLogger.log("com.ibm.commerce.lobtools.foundation.perf", "INFO", "wcfEventTimer", "log", msg);
				}
			}
			wcfLogger.flush();
			this.eventTimeMap = {};
			this.currentEventId = null;
		]]>
		</method>
		
	</node>
</library>
