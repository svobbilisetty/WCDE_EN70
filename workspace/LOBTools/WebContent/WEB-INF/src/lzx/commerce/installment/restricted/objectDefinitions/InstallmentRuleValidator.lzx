<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2009, 2010 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->
<library>
	<class name="istInstallmentRuleValidator" extends="wcfValidator">
		<attribute name="includeCatEntriesPropertyName" type="string" value="includeAllCatEntries"/>
		<attribute name="blankCatEntryObjectType" type="string" value="AllInclusionChildCatentry"/>
		<attribute name="inclusionCatalogObjectPath" type="string" value="InclusionCatalogGroup"/>
		
		<attribute name="includePayMethodsPropertyName" type="string" value="includeAllPayMethods"/>
		<attribute name="blankPaymentMethodObjectType" type="string" value="AllPaymentMethod"/>
		<attribute name="paymentMethodsObjectPath" type="string" value="PaymentMethod"/>
		<attribute name="installmentOptionObjectPath" type="string" value="InstallmentOption"/>
		
		<attribute name="includeManufacturersPropertyName" type="string" value="includeAllManufacturers"/>
		<attribute name="currencyPropertyName" type="string" value="currency"/>
		<attribute name="manufacturersObjectType" type="string" value="ManufacturerCondition"/>
		
		<method name="validate" args="o, changedProperty=null">
			<![CDATA[
			if(o) {
				var includeAllPayments = o.getPropertyValue(this.includePayMethodsPropertyName) == "true";
				if(includeAllPayments) {
					// if including all payments, delete other payment methods and create NULL payment method
					var children = o.getObjects(this.paymentMethodsObjectPath);
					for(var i = 0; i < children.length; i++) {
						children[i].deleteObject();
					}
					
					var blankObj = o.getObject(this.blankPaymentMethodObjectType, true);
				}
				else {
					var blankObj = o.getObject(this.blankPaymentMethodObjectType);
					if(blankObj) {
						blankObj.deleteObject();
					}
				}
				
				var includeAllCatEntries = o.getPropertyValue(this.includeCatEntriesPropertyName) == "true";
				if(includeAllCatEntries) {
					// if including all catalog entries, delete other included categories and catalog entries and create NULL entry
					var children = o.getObjects(this.inclusionCatalogObjectPath);
					for(var i = 0; i < children.length; i++) {
						children[i].deleteObject();
					}
					
					var blankObj = o.getObject(this.blankCatEntryObjectType, true);
				}
				else {
					var blankObj = o.getObject(this.blankCatEntryObjectType);
					if(blankObj) {
						blankObj.deleteObject();
					}
				}
				
				var includeAllManufacturers = o.getPropertyValue(this.includeManufacturersPropertyName) == "true";
				if(includeAllManufacturers) {
					// if including all manufacturers, delete manufacture object
					var children = o.getObjects(this.manufacturersObjectType);
					for(var i = 0; i < children.length; i++) {
						children[i].deleteObject();
					}
				}
				else {
					// create manufacturer object
					var manufacturerObj = o.getObject(this.manufacturersObjectType, true);
				}
				
				var installmentOptions=o.getObjects(this.installmentOptionObjectPath);
				
				if (installmentOptions&&installmentOptions.length>0){
					var originalCurrency=installmentOptions[0].getProperty(this.currencyPropertyName);
					var currentCurrency=o.getProperty(this.currencyPropertyName);
					if ((currentCurrency)&&(currentCurrency.value!=originalCurrency.value)){
						for (var i=0; i<installmentOptions.length; i++){
							var option=installmentOptions[i];
							var curProperty=option.getProperty(this.currencyPropertyName);
							curProperty.change(currentCurrency.value);
						}
					}
				}
			}
			]]>
		</method>
	</class>
</library>
