<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2009, 2010 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->

<library>

	<!---
		@keywords abstract

		This class declares a view option that business users can use to toggle between different views within the
		properties view of an object. You can use {@link wcfEnablementCondition enablement conditions} that reference
		view options to control the visibility of {@link wcfPropertyGroup property groups} and
		{@link wcfPropertyTabPane property tab panes}.

		You can declare more than one instance of wcfViewOption as a child of {@link wcfPrimaryObjectDefinition}. When
		the properties view of the primary object is visible, the view options are enabled in the "View" menu.

		<p>The following example demonstrates the declaration of view options. It toggles the properties view of a web
		activity between displaying summary text and statistics.

		@START_CODE
		<PrimaryObjectDefinition definitionName="mktBaseWebActivityPrimaryObjectDefinition">
		        <ViewOption displayName="Show summary" viewOptionType="showSummary" />
		        <ViewOption displayName="Show statistics" viewOptionType="showStatistics" />
		</PrimaryObjectDefinition>
		@END_CODE
	-->
	<class name="wcfViewOption" extends="node">
		<!---
			The display name for this view option. This name will appear in the View menu.
			This is a required attribute.
		-->
		<attribute name="displayName" type="string" />

		<!---
			The type of this view option. This is a required attribute.
		-->
		<attribute name="viewOptionType" type="string" />

		<!---
			The group name of this view option. If multiple view options share the same group name, then they will be mutually
			exclusive view options. Selecting one view option in the group will disable all of the other view options in the same group.
			This is an optional attribute.
		-->
		<attribute name="viewOptionGroup" type="string" value="${null}" />
		
		<!---
			Indicates whether to add the viewOption to the "View" menu. The default value is "true".
		-->		
		<attribute name="addToViewMenu" type="boolean" value="true"/>

		<!---
			Indicates whether to add the viewOption to the Tool bar. The default value is "true".
		-->	
		<attribute name="addToToolBar" type="boolean" value="true"/>
		
		<!---
			The value of this view option. This value is a boolean type value. If the view option is selected,
			the value is true. If the view option is not selected, the value is false.
		-->
		<attribute name="value" type="boolean" value="false" />

		<!---
			@keywords private
		-->
		<method name="init">
			<![CDATA[
				super.init();
				var options = parent["viewOptions"];
				if (!options) {
					options = [];
					parent.viewOptions = options;
				}
				options.push(this);
			]]>
		</method>
	</class>

	<!---
		@keywords final
		Use wcfPropertyViewOption to display a {@link wcfViewOption view option} or a group of view options in a properties view.
		
		The following example demonstrates the declaration of a view option widget that controls whether a tree view
		or a grid view is displayed in the catalog filter properties view.
		@START_CODE
			<PropertyViewOption
				viewOptionGroup="categoryDisplayViewOptionGroup"
				promptText="${resourceBundles.displayMode}"/>
		@END_CODE
	-->
	<class name="wcfPropertyViewOption" extends="wcfPropertiesComponent" >
		<!---
			The view option type of the view option that is managed by this properties component.
			Only specify this attribute if you have not specified a value for <code>viewOptionGroup</code>.
		-->
		<attribute name="viewOptionType" type="string" value="${null}"/>
		<!---
			The view option group of the view options that are managed by this properties component.
			Only specify this attribute if you have not specified a value for <code>viewOptionType</code>.
		-->
		<attribute name="viewOptionGroup" type="string" value="${null}"/>
		
		<!---
			@keywords private
			Creates the editor for the given property component.
			@param wcfPropertiesComponent parentComponent The parent properties component from which to create the editor
		-->
		<method name="createEditor" args="parentComponent">
			<![CDATA[	
				if (this.viewOptionGroup != null) { // create a radio group
					new lz.wcfViewOptionRadioGroup(parentComponent, {
						name: "editor",
						x: parentComponent.promptWidth + parentComponent.xspacing,
						o: parentComponent.o,
						enabled: parentComponent.enabled,
						viewOptionGroup: this.viewOptionGroup
					});
				} else { // create a checklist
					new lz.wcfViewOptionCheckbox(parentComponent, {
						name: "editor",
						x: parentComponent.promptWidth + parentComponent.xspacing,
						y: 1,
						o: parentComponent.o,
						viewOptionType: this.viewOptionType
					});
				}
			]]>
		</method>
	</class>
	
	<!---
		@keywords private
		
		This radio group implementation is for internal use by {@link wcfPropertyViewOption}
		to bind a set of {@link wcfViewOption view options} to a radio button group.
	-->
	<class name="wcfViewOptionRadioGroup" extends="wcfBaseRadioGroup">
		<attribute name="o" setter="this.setModelObject(o)"/>
		<attribute name="viewOptionGroup" type="string"/>

		<!--- 
			@keywords private
			Cleanup delegates when this widget is destroyed  
		-->
		<method name="destroy">
			<![CDATA[
				if (this["updateViewOptionDel"]) {
					this.updateViewOptionDel.unregisterAll();
					delete this.updateViewOptionDel;
				}
				super.destroy();
			]]>
		</method>
	
		<!---
			@keywords private
			@param wcfModelObject newObject The new object
		-->
		<method name="setModelObject" args="newObject">
			<![CDATA[
				if (wcfLogger.enabled) {
					wcfLogger.entering("com.ibm.commerce.lobtools.foundation.view", "wcfViewOptionRadioGroup", "setModelObject(newObject)", [newObject]);
				}
				if (typeof(this["o"]) == "undefined" || newObject != this["o"]) {
					if (typeof(this.updateViewOptionDel) == "undefined") {
						this.updateViewOptionDel = new lz.Delegate(this, "updateViewOption");
					}
					this.updateViewOptionDel.unregisterAll();
					this.o = newObject;
					if (this.o) {
						if(this.isinited) {
							this.createRadioButtons();
						}
						for (var i = 0; i < this.o.objectDefinition.viewOptions.length; i++) {
							if (this.o.objectDefinition.viewOptions[i].viewOptionGroup == this.viewOptionGroup) {
								this.updateViewOptionDel.register(this.o.objectDefinition.viewOptions[i], "onvalue");
							}
						}
					}					
				}
				if (wcfLogger.enabled) {
					wcfLogger.exiting("com.ibm.commerce.lobtools.foundation.view", "wcfViewOptionRadioGroup", "setModelObject(newObject)");				
				}			
			]]>
		</method>
			
		<!--- 
			@keywords private
			Create the radio buttons once the widget is initialized.
		-->
		<handler name="oninit">
			<![CDATA[
				if (this["o"]) {
					this.createRadioButtons();
				}
			]]>
		</handler>
	
		<!--- Create the actual radio group and child radio buttons -->
		<method name="createRadioButtons" args="e=null">
			<![CDATA[
				if (this.o && this.o.objectDefinition != null) {
					var objDef = this.o.objectDefinition;
					
					var viewOptions = [];
					for (var i = 0; i < this.o.objectDefinition.viewOptions.length; i++) {
						if (this.o.objectDefinition.viewOptions[i].viewOptionGroup == this.viewOptionGroup) {
							viewOptions.push(this.o.objectDefinition.viewOptions[i]);
						}
					}
					
					var createItems = false;
					if (!this["_viewOptions"]) {
						createItems = true;
					}
					if (!createItems && this._viewOptions.length != viewOptions.length) {
						createItems = true;
					}
					if (!createItems) {
						for (var i = 0; i < this._viewOptions.length; i++) {
							if (this._viewOptions[i] != viewOptions[i]) {
								createItems = true;
								break;
							}
						}
					}
	
					if (createItems) {
						this._viewOptions = viewOptions;
						for(var i = this.getNumItems() - 1; i >= 0; i--) {
							this.removeItemAt(i);
						}
						for (var i = 0; i < viewOptions.length; i++) {
							var viewOption = viewOptions[i];
							
							this.addItem(viewOption.displayName, viewOption.viewOptionType);
							var newItem = this.getItem(viewOption.viewOptionType);
							newItem.setAttribute("propertyValue", viewOption);
						}
					}
					this.updateViewOption();
				}
			]]>
		</method>
	
		<!--- Update the widget with a new view option. -->
		<method name="updateViewOption" args="e=null">
			<![CDATA[
				if (!this["__updateValueLock"]) {
					var selectedViewOptionType = null;
					for (var i = 0; i < this._viewOptions.length; i++) {
						if (this._viewOptions[i].value) {
							selectedViewOptionType = this._viewOptions[i].viewOptionType;
							break;
						}
					}
					if (selectedViewOptionType != this.value) {
						if (selectedViewOptionType != null) {
							this.selectItem(selectedViewOptionType);
						}
						else {
							this.clearSelection();
							this.value = selectedViewOptionType;
						}
					}
				}
			]]>
		</method>

		<!--- 
			When the selection of the radio group is changed by the business user, storeValue method will be called.
		-->
		<handler name="onvalue">
			<![CDATA[
				if (this["_viewOptions"]) {
					this.__updateValueLock = true;
					for (var i = 0; i < this._viewOptions.length; i++) {
						var viewOption = this._viewOptions[i];
						var newValue = this.value == viewOption.viewOptionType;
						if (newValue != viewOption.value) {
							viewOption.setAttribute("value", newValue);
						}
					}
					this.__updateValueLock = false;
				}
			]]>
		</handler>
	</class>
	
	<!---
		@keywords private
		
		This check box implementation is for internal use by {@link wcfPropertyViewOption}
		to bind a {@link wcfViewOption view option} to a check box.
	-->
	<class name="wcfViewOptionCheckbox" extends="wcfBaseCheckbox">
		<attribute name="o" setter="this.setModelObject(o)"/>
		<attribute name="viewOption" value="${null}"/>
		<attribute name="viewOptionType" type="string"/>
				
		<!--- @keywords private -->
		<method name="init">
			super.init();
			if (this["o"]) {
				this.updateValue();
			}
		</method>
		
		<!--- @keywords private -->
		<method name="destroy">
			<![CDATA[
			if (this["updateValueDel"]) {
				this.updateValueDel.unregisterAll();
				delete this.updateValueDel;
			}
			super.destroy();
			]]>
		</method>
				
		<!--- @keywords private -->
        <method name="_applystyle" args="s">
        	<![CDATA[
        	if (this.style != null) {
				// Change the default OpenLaszlo label color to wcf color.
				if (_enabled) {
					_title.setAttribute('fgcolor',0x000000);
				} else {
					_title.setAttribute('fgcolor',s.textdisabledcolor);
				}
			}
        	]]>
        </method>
	
		<!---
			Set the {@link wcfModelObject} to be associated with this check box. The model object
			is used to locate the view option.
			@param wcfModelProperty o: New object associated with this check box.
		-->
		<method name="setModelObject" args="o">
			<![CDATA[
			if (typeof(this["o"]) == "undefined" || o != this["o"]) {
				if (typeof(this.updateValueDel) == "undefined") {
					this.updateValueDel = new lz.Delegate(this, "updateValue");
				}
				this.updateValueDel.unregisterAll();
				this.viewOption = null;
				this.o = o;
				for (var i = 0; i < this.o.objectDefinition.viewOptions.length; i++) {
					if (this.o.objectDefinition.viewOptions[i].viewOptionType == this.viewOptionType) {
						this.viewOption = this.o.objectDefinition.viewOptions[i];
						break;
					}
				}
				if (this.viewOption) {
					this.updateValueDel.register(this.viewOption, "onvalue");
					this.updateValue();
				}
				else {
					this.__updateValueLock = true;
					this.setAttribute("value", false);
					this.__updateValueLock = false;
				}
			}
			]]>
		</method>
		
		<!---
			@keywords private
			Update and refresh the wcfViewOptionCheckbox value with a new wcfViewOption value.
			@event onvalue the event that indicates the value of this checkbox is changed
		-->
		<method name="updateValue" args="e=null">
			<![CDATA[
			if (this._initcomplete) {
				if (this.viewOption.value != this.value) {
					this.__updateValueLock = true;
					this.setAttribute("value", this.viewOption.value);
					this.__updateValueLock = false;
				}
			}
			]]>
		</method>
		
		<!---
			@keywords private
			When the value of the check box is changed by the business user, the associated view option will be updated
			with the new checkbox value.
		-->		
		<handler name="onvalue">
			<![CDATA[
				// Do not need to store the value if this event is sent in updateValue() method
				if (!this["__updateValueLock"]) {
					if (this.viewOption != null && this.viewOption.value != this.value) {
						this.viewOption.setAttribute("value", this.value);
					}
				}
			]]>
		</handler>
	</class>
</library>
