<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2007, 2009 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->
<library>
	<!---
		@keywords private
		
		View utility methods.
	-->
	<node id="wcfViewUtil">
		<!---
			Last recorded mouse "x" position.
		-->
		<attribute name="mouseX" value="null"/>
		<!---
			Last recorded mouse "y" position.
		-->
		<attribute name="mouseY" value="null"/>
		<!---
			Last time the mouse move was detected.
		-->
		<attribute name="lastMouseMove" type="number" value="0"/>
		<!---
			Last view that fired the mouse over event
		-->
		<attribute name="mouseOverView" value="null"/>
		<!---
			Last time a keyboard action was detected.
		-->
		<attribute name="lastKeyStroke" type="number" value="0"/>
		
		<!---
			Utility method used to release all the layouts for a view.
			@START_CODE
			wcfViewUtil.releaseLayouts(v);
			@END_CODE

			@param view v: the view to destroy
		-->
		<method name="releaseLayouts" args="v">
			<![CDATA[
			if (v["layouts"]) {
				var layouts = v.layouts;
				while (layouts.length > 0) {
					layouts[0].releaseLayout();
				}
			}
			for (var i = 0; i < v.subviews.length; i++) {
				this.releaseLayouts(v.subviews[i]);
			}
			]]>
		</method>
		
		<!---
			Utility method used to check if the first view is an ancestor
			of the second view.
			@param view v1: the anscestor view to check
			@param view v2: the descendant view to check
		-->
		<method name="checkDescendant" args="v1,v2">
			<![CDATA[
			var found = false;
			var v = v2;
			do {
				if (v == v1) {
					found = true;
					break;
				}
				if (v["immediateparent"] && v != v.immediateparent) {
					v = v.immediateparent;
				}
				else {
					v = null;
				}
			} while (v);
			return found;
			]]>
		</method>
		
		<!---
			Locate the closest ancestor view that has an "availableHeight" attribute.
		-->
		<method name="getAvailableHeightView" args="v">
			<![CDATA[
			var availableHeightView = null;
			while (v != null && v != canvas) {
				v = v.immediateparent;
				if (typeof v["availableHeight"] != "undefined") {
					availableHeightView = v;
					break;
				}
			}
			return availableHeightView;
			]]>
		</method>
		
		<!---
			Locate the closest ancestor view that has an "availableWidth" attribute.
		-->
		<method name="getAvailableWidthView" args="v">
			<![CDATA[
			var availableWidthView = null;
			while (v != null && v != canvas) {
				v = v.immediateparent;
				if (typeof v["availableWidth"] != "undefined") {
					availableWidthView = v;
					break;
				}
			}
			return availableWidthView;
			]]>
		</method>
		
		<!---
			Locate the closest ancestor view that has the "visible" attribute set to false.
			@param view v: the view
		-->
		<method name="getInvisibleAncestor" args="v">
			<![CDATA[
			var invisibleView = null;
			while (v != null && v != canvas) {
				v = v.immediateparent;
				if (!v.visible) {
					invisibleView = v;
					break;
				}
			}
			return invisibleView;
			]]>
		</method>
		
		<!---
			Register delegate to listen to the "onvisible" event for the specified view and all ancestors.
			@param view v: the view
		-->
		<method name="registerVisibilityDelegate" args="v,del">
			<![CDATA[
			while (v != null && v != canvas) {
				del.register(v, "onvisible");
				v = v.immediateparent;
			}
			]]>
		</method>

		<!---
			Check if the specified view is contained in the active modal view or there is no active modal view.
			@param view v: the child view
		-->
		<method name="containedInModalView" args="v">
			<![CDATA[
			var modal = lz.ModeManager.getModalView();
			return modal == null || wcfViewUtil.containsView(modal, v);
			]]>
		</method>
				
		<!---
			Check if the specified view contains the view.
			@param view containerView: the container view
			@param view v: the child view
		-->
		<method name="containsView" args="containerView,v">
			<![CDATA[
			var result = false;
			while (v != null && v != canvas) {
				if (v == containerView) {
					result = true;
					break;
				}
				v = v.immediateparent;
			}
			return result;
			]]>
		</method>
		
		<!---
			Utility method that will return the number of milliseconds since the last time the mouse moved.
		-->
		<method name="getLastMouseMove">
			<![CDATA[
			this._now = new Date();
			var result = this._now.getTime() - this.lastMouseMove;
			delete this._now;
			return result;
			]]>
		</method>
		
		<method name="isMouseOver" args="v">	
			<![CDATA[	
			if(wcfViewUtil.getInvisibleAncestor(v)==null && v.visible)
				return v.containsPt(v.getMouse("x"), v.getMouse("y"));
			else
				return false;
			]]>
		</method>
		
		<!--- 
	    	@keywords private
	    -->
		<handler name="onmouseover" reference="lz.GlobalMouse" args="who">
			this.mouseOverView = who;
    	</handler>
		
		<!---
			Watch the mouse and record the last mouse move.
		-->
		<handler name="onidle" reference="lz.Idle">
			<![CDATA[
			var newMouseX = canvas.getMouse("x");
			var newMouseY = canvas.getMouse("y");
			if (this.mouseX != newMouseX || this.mouseY != newMouseY) {
				this.mouseX = newMouseX;
				this.mouseY = newMouseY;
				this._now = new Date();
				this.lastMouseMove = this._now.getTime();
				delete this._now;
			}
			]]>
		</handler>
		
		<!---
			Utility method that will return the number of milliseconds since the last time the keyboard action
			was detected
		-->
		<method name="getLastKeyStroke">
			<![CDATA[
			this._now = new Date();
			var result = this._now.getTime() - this.lastKeyStroke;
			delete this._now;
			return result;
			]]>
		</method>
		
		<!---
			Listen to the onkeydown method and record the time that the keyboard action was last detected
		-->
		<handler name="onkeydown" reference="lz.Keys">
			<![CDATA[
			this._now = new Date();
			this.lastKeyStroke = this._now.getTime();
			delete this._now;
			]]>
		</handler>
		
		<!---
			@keywords private
			Log a message when the modal view changes.
		-->
		<handler name="onmode" reference="lz.ModeManager" args="m">
			<![CDATA[
			if (wcfLogger.enabled) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.util", "INFO", "wcfViewUtil", "onmode", "New modal view: "+m);
			}
			]]>
		</handler>
	</node>
</library>
