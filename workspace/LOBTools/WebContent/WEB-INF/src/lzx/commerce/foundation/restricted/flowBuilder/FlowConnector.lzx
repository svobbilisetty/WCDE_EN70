<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2007, 2010 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->
<library>

	<!---
		<p>The default flow connector class for use in {@link wcfFlowBuilder flow builders}. Within a flow builder,
		a connector joins two elements together visually, and when elements are dropped onto a connector, the elements
		are inserted between the two, previously joined elements.</p>
		
		<p>If the connector is enabled (as determined by {@link wcfBaseFlowConnector#isEnabled}, the connector appears
		on the flow diagram as views and object start to be dragged. If it is not enabled based on the dragged objects,
		the connector does not appear.</p>
		
		<p>New classes that extend from this base class must implement the 
		<code>handleDroppedElements</code> method. The method should perform the 
		logic required to handle dropped elements.</p>
	-->
	<class name="wcfBaseFlowConnector" width="40">
		<!--- @keywords private -->
		<attribute name="parentFlow" value="null"/>
		<!--- @keywords private -->
		<attribute name="parentFlowPath" value="null"/>
		<!--- @keywords private -->
		<attribute name="parentFlowElement" value="null"/>

		<!--- Indicates whether this flow connector is enabled. -->
		<attribute name="enabled" type="boolean" value="true"/>
		<!--- @keywords private -->
		<attribute name="editableFlow" type="boolean" value="true"/>

		<!--- @keywords private -->
		<handler name="oninit">
			<![CDATA[
				this.parentFlow = wcfFlowUtils.getParentFlow(this);

				if(this.parentFlow != null) {
					this.updateEditableFlow();
					this.updateEditableFlowDel = new lz.Delegate(this, "updateEditableFlow");
					this.updateEditableFlowDel.register(this.parentFlow, "oneditableFlow");
				}
				this.parentFlowPath = wcfFlowUtils.getParentFlowPath(this.parent);
				this.parentFlowElement = this.getFlowElement();
				this.updateConnectorSize();
			]]>
		</handler>
		
		<!--- @keywords private -->
		<method name="destroy">
			<![CDATA[
			if (this["updateEditableFlowDel"]) {
				this.updateEditableFlowDel.unregisterAll();
				delete this.updateEditableFlowDel;
			}
			if (this["updateConnectorSizeDel"]) {
				this.updateConnectorSizeDel.unregisterAll();
				delete this.updateConnectorSizeDel;
			}
			
			super.destroy();
			]]>
		</method>
		
		<!---
			@keywords private
		-->
		<method name="updateEditableFlow" args="e=null">
			<![CDATA[
			this.setAttribute("editableFlow", this.parentFlow.editableFlow);
			]]>
		</method>
		
		<!--- @keywords private -->
		<method name="updateConnectorSize" args="e=null">
			<![CDATA[
			if (this["updateConnectorSizeDel"]) {
				this.updateConnectorSizeDel.unregisterAll();
			}
			else {
				this.updateConnectorSizeDel = new lz.Delegate(this, "updateConnectorSize");
			}
			if (this.parentFlowPath != null) {
				if (this.parentFlowPath["oList"]) {
					this.updateConnectorSizeDel.register(this.parentFlowPath.oList, "objectViewsUpdated");
					var previousElement = null;
					var elementCount = this.parentFlowPath.oList.getViewsLength();
					for (var i = 0; i < elementCount; i++) {
						var element = this.parentFlowPath.oList.getView(i);
						if (this.parentFlowElement == element) {
							break;
						}
						previousElement = element;
					}
					var leftExpansionSize = 0;
					var rightExpansionSize = 0;
					if (previousElement != null) {
						leftExpansionSize = previousElement.getConnectorLeftExpansionSize(this.updateConnectorSizeDel);
					}
					else {
						leftExpansionSize = this.parentFlowPath.getConnectorLeftExpansionSize(this.updateConnectorSizeDel);
					}
					if (this.parentFlowElement == null) {
						rightExpansionSize = this.parentFlowPath.getConnectorRightExpansionSize(this.updateConnectorSizeDel);
					}
					if (this.connectorView.x != -leftExpansionSize) {
						this.connectorView.setAttribute("x", -leftExpansionSize);
					}
					if (this.connectorView.width != 40 + leftExpansionSize + rightExpansionSize) {
						this.connectorView.setAttribute("width", 40 + leftExpansionSize + rightExpansionSize);
					}
				}
				else {
					this.updateConnectorSizeDel.register(this.parentFlowPath, "onoList");
				}
			}
			]]>
		</method>
		
		<!--- @keywords private -->
		<method name="getFlowElement">
			<![CDATA[
				var ancestor = this.parent;
				while (ancestor != null && !(ancestor instanceof lz.wcfFlowPath)) {
					if (ancestor instanceof lz.wcfFlowElement) {
						return ancestor;
					}
					ancestor = ancestor.parent;
				}
				return null;
			]]>
		</method>

		<!---
			Checks to see whether or not this connector is enabled. If enabled, the views being dragged will be
			allowed to be dropped onto this connector.
			@param views[] dragSources list of objects currently being dragged. See {@link wcfDragSource} for more information.
			@return boolean <code>true</code> if {@link wcfBaseFlowConnector#enabled} is <code>true</code> and the parent
					flow is not read-only.
		-->
		<method name="isEnabled" args="dragSources">
			<![CDATA[
			var enabled = this.enabled && this.editableFlow;
			if(enabled) {
				var parentPath = wcfFlowUtils.getParentFlowPath(this);
				if(parentPath) {
					var isBranch = false;
					var dragFromObject = null;
					if(dragSources[0]["flowElement"]) {
						var dragObjectParentFlow = wcfFlowUtils.getParentFlow(dragSources[0].flowElement);
						dragFromObject = dragObjectParentFlow == null ? null : dragObjectParentFlow.o;
						// move case
						if(dragSources[0].flowElement["o"] && dragSources[0].flowElement.o.objectDefinition.elemTemplateType == "Branch") {
							isBranch = true;
						}
					}
					else {
						// new from palette
						dragFromObject = dragSources[0].dragObject.oView.o;
						var parentPathObj = parentPath.o;
						if(parentPathObj && dragSources[0].dragObject["objectType"]) {
							var objectType = dragSources[0].dragObject.objectType;
							var objectDef = parentPathObj.model.getObjectDefinition(parentPathObj, objectType);
							if(objectDef && objectDef.elemTemplateType == "Branch") {
								isBranch = true;
							}
						}
					}
					
					if (dragFromObject && dragFromObject != this.parentFlow.o) {
						enabled = false;
					}
					else if(isBranch && wcfFlowUtils.getElementDepth(this) >= this.parentFlow.flowBuilder.maxBranchDepth) {
						enabled = false;
					}
				}
			}
			return enabled;  
			]]>
		</method>

		<!--- 
			Must be overwritten in children classes with the different logic of 
			handling dropped elements.
			@param views[] sources list of objects currently being dragged. See {@link wcfDragSource} for more information.
			@keywords private 
		-->
		<method name="handleDroppedElements" args="sources">
			<![CDATA[
			
			]]>
		</method>

		<view name="connectorView" height="32" width="40">
			<view name="connector" resource="wcfFlowConnector" visible="false" width="${parent.width}" stretches="width"/>
			<wcfDropTarget targetKey="${'flowelement'}" dragAndDropManager="${wcfDndManager}" dropMouseOverBGColor="0xEEEEEE">
				<method name="isEnabled" args="currentDragSource">
					<![CDATA[
					return classroot.isEnabled(currentDragSource);
					]]>
				</method>
		    	
				<method name="registerDropTarget">
					<![CDATA[
					if (this.isEnabled(this.dragAndDropManager.currentDragSource.getDragSources())) {
						super.registerDropTarget();
						classroot.connectorView.connector.setAttribute("visible", true);
					}
					]]>
				</method>
				
				<method name="unregisterDropTarget">
					<![CDATA[
					super.unregisterDropTarget();
					classroot.connectorView.connector.setAttribute("visible", false);
					]]>
				</method>
			
				<handler name="ondroppedintarget" args="sources">
					<![CDATA[
					classroot.handleDroppedElements(sources);
					]]>
				</handler>
			</wcfDropTarget>
		</view>
	</class>

</library>
