<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2010, 2011 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->


<library>
	
	<!---
		@keywords private
		Property Browse object tree node for the property view of a primary object.
	-->
	<class name="wcfPropertyBrowseObjectTree" extends="wcfTree" maxObjectViews="20">
		<!---
			The class used to create child nodes.
		-->
		<attribute name="objectClass" type="string" value="wcfPropertyBrowseObjectTree"/>
		<!---
			Reference to the business object editor instance.
		-->
		<attribute name="oEditor" value="null"/>
		<!---
			Indicates that the children should be loaded recursively.
		-->
		<attribute name="recurse" value="false"/>
		<!---
			Indicates that this node is a leaf node.
		-->
		<attribute name="isTreeLeaf" type="boolean" value="false"/>
		<!---
			The model object associated with this tree node.
		-->
		<attribute name="o" value="null" setter="this.setModelObject(o)"/>
		<!---
			The object being referenced through "o".
		-->
		<attribute name="referencedObject" value="null"/>
		<!---
			Indicates that the child tree nodes have been created.
		-->
		<attribute name="childrenCreated" type="boolean" value="false"/>
		<!---
			An array of the filtered child object definitions for this node. Only
			child object definitions that will be visible in the tree view
			will be included in this array.
		-->
		<attribute name="objectDefinitions" value="null"/>
		<!---
			Indicates that this tree node can be used to navigate to the child objects.
			Navigating to child objects is allowed for primary, organizational, parent reference,
			and collection reference objects.
		-->
		<attribute name="navigationEnabled" type="boolean" value="true"/>
		
		<!--- @keywords private -->
		<method name="init">
			<![CDATA[
			super.init();
			if (this.oEditor == null) {
				this.oEditor = immediateparent.parent.oEditor;
			}
			this.updateDisplayNameDel = new lz.Delegate(this, "updateDisplayName");
			this.updateDisplayNameStyleDel = new lz.Delegate(this, "updateDisplayNameStyle");
			this.updateFilterDel = new lz.Delegate(this, "updateFilter");
			if (this != this.getRoot()) {
				this.updateFilterDel.register(this.getRoot(), "onfilter");
			}
			if (this.item) {
				new lz.wcfPropertyBrowseObjectTreeMenu(this, {
					name: "menu",
					tree: this
				});
				this.menu.addView(this.item.contextMenuArea);
			}
			this.updateReferencedObjectDel = new lz.Delegate(this, "updateReferencedObject");
			this.checkStatusMessageDel = new lz.Delegate(this, "checkStatusMessage");
			this.releaseModelObjectDel = new lz.Delegate(this, "releaseModelObject");
			this.checkLeafDel = new lz.Delegate(this, "checkLeaf");
			this.updateExpandedTreesDel = new lz.Delegate(this, "updateExpandedTrees");
			this.updateIconDel = new lz.Delegate(this, "updateIcon");
			]]>
		</method>

		<!--- @keywords private -->
		<method name="checkLeaf" args="e=null">
			<![CDATA[
			this.checkLeafDel.unregisterAll();
			var leaf = false;
			if (this.navigationEnabled) {
				this.checkLeafDel.register(this, "onstatusMessage");
				if (this.statusMessage == "" && this.objectDefinitions != null) {
					var oDef = this.referencedObject.objectDefinition;
					if (oDef.organizational) {
						leaf = this.objectDefinitions.length == 0 && oDef.organizedObjectDefinitions != null && oDef.organizedObjectDefinitions.length > 0;
					}
					else {
						leaf = this.objectDefinitions.length == 0;
					}
					if (!leaf && this.childrenCreated && this.children.height == 0) {
						this.checkLeafDel.register(this.children, "onheight");
						leaf = true;
					}
				}
			}
			else {
				leaf = true;
			}
			if (leaf != this.isTreeLeaf) {
				this.setAttribute("isTreeLeaf", leaf);
			}
			]]>
		</method>
		
		<!--- @keywords private -->
		<method name="destroy">
			<![CDATA[
			if (this.o) {
				this.releaseChildObjectTree();
				this.oList = null;
				this.referencedObject = null;
				this.o = null;
			}
			this.updateDisplayNameDel.unregisterAll();
			delete this.updateDisplayNameDel;
			this.updateDisplayNameStyleDel.unregisterAll();
			delete this.updateDisplayNameStyleDel;
			this.updateFilterDel.unregisterAll();
			delete this.updateFilterDel;
			this.updateReferencedObjectDel.unregisterAll();
			delete this.updateReferencedObjectDel;
			this.checkStatusMessageDel.unregisterAll();
			delete this.checkStatusMessageDel;
			this.releaseModelObjectDel.unregisterAll();
			delete this.releaseModelObjectDel;
			this.checkLeafDel.unregisterAll();
			delete this.checkLeafDel;
			this.updateExpandedTreesDel.unregisterAll();
			delete this.updateExpandedTreesDel;
			this.updateIconDel.unregisterAll();
			delete this.updateIconDel;
			super.destroy();
			]]>
		</method>
		
		<!---
			@keywords private
			When the oList is updated, we listen to the objectViewsUpdated event to trigger an update.
		-->		
		<handler name="onoList">
			<![CDATA[
			this.updateExpandedTreesDel.unregisterAll();
			if (this["oList"]) {
				this.updateExpandedTreesDel.register(this.oList, "objectViewsUpdated");
			}
			this.updateExpandedTrees();
			]]>
		</handler>

		<!---
			Set the model object for this tree node.
			@param wcfModelObject newObject: the new model object
		-->
		<method name="setModelObject" args="newObject">
			<![CDATA[
			if (this["o"] != newObject) {
				this.releaseModelObjectDel.unregisterAll();
				this.updateDisplayNameDel.unregisterAll();
				this.updateDisplayNameStyleDel.unregisterAll();
				this.updateReferencedObjectDel.unregisterAll();
				this.updateIconDel.unregisterAll();
				if (this["o"]) {
					if (this.selected) {
						this.setAttribute("selected", false);
					}
					if (this.open) {
						this.setAttribute("open", false);
					}
					this.releaseChildObjectTree();
					this.referencedObject = null;
				}
				this.o = newObject;
				if (this.o) {
					var oDef = this.o.objectDefinition;
					this.navigationEnabled = oDef.primary || oDef.organizational || oDef.parentReference || oDef.collectionReference;
					this.releaseModelObjectDel.register(this.o, "beingDestroyed");
					this.updateIcon();
					
					if (this.o.objectDisplayName != null) {
						this.setAttribute("text", this.o.objectDisplayName);
					}
					this.updateDisplayNameDel.register(this.o, "onobjectDisplayName");
					this.updateDisplayNameStyleDel.register(this.o, "ondisplayNameStyle");
					this.referencedObject = this.o.getReferencedObject();
					if (this.referencedObject == null) {
						this.updateReferencedObjectDel.register(this.o, "onchildObjects");
					}
					else {
						this.updateReferencedObject();
					}
					this.updateDisplayNameStyle();
					if (this.parent == this.getRoot() && !this.isTreeLeaf) {
						var openSibling = false;
						for (var i = 0; i < this.parent.children.subviews.length; i++) {
							var child = this.parent.children.subviews[i];
							if (child instanceof lz.wcfPropertyBrowseObjectTree && child.open) {
								openSibling = true;
								break;
							}
						}
						if (!openSibling) {
							this.setAttribute("open", true);
						}
					}
				}
				else {
					this.referencedObject = null;
				}
			}
			]]>
		</method>
		
		<!---
			@keywords private
			Register to updateIconDel for the events you want to trigger updating icon.
		-->	
		<method name="updateIcon" args="e=null">
			<![CDATA[
			this.updateIconDel.unregisterAll();
			var root = this.getRoot();
			var customizer = root.parent.propertyTree.customizer
			this.updateIconDel.register(root.parent, "ono");
			var icon = null;
			if (customizer && root.parent.o != null) {
				icon = customizer.getIcon(root.parent.o, this.o, this.updateIconDel);
			}
			if (icon != null) {
				this.setAttribute("icon", icon);
			}
			else if (this.o.getIcon() != null) {
				this.setAttribute("icon", this.o.getIcon());
			}
			]]>
		</method>
		
		<!---
			This method releases the {@link wcfModelObject model object} from this tree node.
		-->
		<method name="releaseModelObject" args="e=null">
			<![CDATA[
			this.setAttribute("o", null);
			]]>
		</method>
		
		<!---
			Update the referenced object.
		-->
		<method name="updateReferencedObject" args="e=null">
			<![CDATA[
			this.referencedObject = this.o.getReferencedObject();
			if (this.referencedObject != null) {
				this.updateReferencedObjectDel.unregisterAll();
				if (this.navigationEnabled) {
					if (this.open) {
						this.createChildObjectTree();
					}
				}
				this.updateObjectDefinitions();
			}
			]]>
		</method>
		
		<!---
			Update the child list nodes to match the current filter.
		-->
		<method name="updateFilter" args="e=null">
			<![CDATA[
			if (this["oList"]) {
				var newFilter = this.getRoot().filter;
				if (this.oList.baseFilter != newFilter) {
					if (this.oList.getViewsLength() > 0) {		
						this.oList.setAttribute("baseFilter", newFilter);
					}
					else if (this.open) {
						this.setAttribute("open", false);
					}
				}
			}
			this.updateObjectDefinitions();
			]]>
		</method>
		
		<!---
			Update the array of child object definitions that match
			the current filter.
		-->
		<method name="updateObjectDefinitions">
			<![CDATA[
			if (wcfLogger.enabled) {
				wcfLogger.entering("com.ibm.commerce.lobtools.foundation.view", "wcfUtilitiesBrowseObjectTree", "updateObjectDefinitions");				
			}			
			if (this.referencedObject != null) {
				this.objectDefinitions = [];
				if (this.navigationEnabled) {
					var filter = this.getRoot().filter;
					var oDef = this.referencedObject.objectDefinition;
					var defs = oDef.organizational ? oDef.organizedObjectDefinitions : oDef.getReferenceObjectDefinitions();
					if (defs != null) {
						for (var i = 0; i < defs.length; i++) {
							var childDef = defs[i];
							if (filter.objectTypeMatchesFilter(childDef.objectType)) {
								this.objectDefinitions.push(childDef);
							}
						}
					}
				}
				this.checkLeaf();
			}
			else {
				this.objectDefinitions = null;
			}
			if (wcfLogger.enabled) {
				wcfLogger.exiting("com.ibm.commerce.lobtools.foundation.view", "wcfUtilitiesBrowseObjectTree", "updateObjectDefinitions");				
			}			
			]]>
		</method>
		
		<!--- @keywords private -->
		<method name="createChildObjectTree">
			<![CDATA[
			if (!this.childrenCreated && this.navigationEnabled) {
				this.childrenCreated = true;
				this.referencedObject.bindViewToChildren(this, this.getRoot().filter, null, this);
				this.checkStatusMessage();
				this.checkLeaf();
			}
			]]>
		</method>
		
		<!--- @keywords private -->
		<method name="releaseChildObjectTree">
			<![CDATA[
			if (this.childrenCreated) {
				this.childrenCreated = false;
				for (var i = 0; i < this.children.subviews.length; i++) {
					var v = this.children.subviews[i];
					if (v["releaseChildObjectTree"]) {
						v.releaseChildObjectTree();
					}
				}
				this.referencedObject.releaseViewFromChildren(this);
				this.checkStatusMessage();
				this.checkLeaf();
			}
			]]>
		</method>
		
		<!--- @keywords private -->
		<method name="compare" args="o1,o2,sortAscending">
			<![CDATA[
			var currentFilter = this.getRoot().filter;
			return currentFilter.objectCompare(o1,o2);
			]]>
		</method>		
		
		<!---
			Handle the expand event. If this is the first time the
			object's children have been expanded, then the child nodes will
			be created.
		-->
		<handler name="onopen">
			<![CDATA[
			if (this["o"]) {
				if (this.open) {
					this.createChildObjectTree();
				}
				else {
					this.releaseChildObjectTree();
				}
			}
			]]>
		</handler>
		
		<!---
			@keywords private
			When this tree is expanded, we store the time it was expanded with it and its parents.  We also close any other tree nodes
			in the browse tree when we have more than the maximinum number of tree nodes expanded.
		-->
		<method name="updateExpandedTrees" args="e=null">
			<![CDATA[
			if (this.open && this["oList"] && this.oList.getViewsLength() > 0) {
				if (!this["__expandedTime"]) {
					var rootObjectTree = this.getRootObjectTree();
					var expandedTime = (new Date()).getTime();
					var tree = this;
					tree.__expandedTime = expandedTime;
					while (tree && !tree.isRoot() && tree != rootObjectTree) {
						tree = tree.parent;
						tree.__expandedTime = expandedTime;
					}
					if (rootObjectTree) {
						rootObjectTree.closeChildrenTreesLeastRecent();
					}
				}
			}
			else {
				this.__expandedTime = null;
			}
			]]>
		</method>
		
		<!---
			@keywords private
			Returns the root object tree, the first tree under the "Top" tree node.
		-->
		<method name="getRootObjectTree">
			<![CDATA[
			var tree = null;
			if (this["o"] && this.o.objectDefinition.objectType != "Top") {
				tree = this;
				while (tree && !tree.isRoot() && !tree.parent.o.objectDefinition.objectType != "Top") {
					tree = tree.parent;
				}
			}
			return tree;
			]]>
		</method>
		
		<!---
			@keywords private
			Calculates the ordered expanded times and updates the given array.  Iterating through the children of this tree, this method checks
			the expanded time for expanded child tree nodes and updates the given expandedTimes array by inserting each expanded time in the appropriate
			ordered position in the array.  This method recurses to this tree's leaf nodes.
			@param Array expandedTimes: An ordered array of expanded times. The array is ordered in ascending order and does not have duplicate entries.
		-->
		<method name="calculateOrderedExpandedTimes" args="expandedTimes">
			<![CDATA[
			for (var i = 0; i < this.children.subviews.length; i++) {
				var child = this.children.subviews[i];
				if (child instanceof lz.wcfPropertyBrowseObjectTree && child["__expandedTime"]) {
					var insertIdx = expandedTimes.length;
					for (var j = 0; j < expandedTimes.length; j++) {
						if (child.__expandedTime == expandedTimes[j]) {
							insertIdx = -1;
							break;
						}
						if (child.__expandedTime < expandedTimes[j]) {
							insertIdx = j;
							break;
						}
					}
					if (insertIdx > -1) {
						expandedTimes.splice(insertIdx, 0, child.__expandedTime);
					}
					child.calculateOrderedExpandedTimes(expandedTimes);
				}
			}	
			]]>
		</method>
		
		<!---
			@keywords private
			This method closes all the children trees least recently expanded.  Closing trees will occur when we have a number expanded greater than the maximum number
			of browse tree nodes expanded, the maxBrowseTreesExpanded context value.
		-->
		<method name="closeChildrenTreesLeastRecent">
			<![CDATA[
			var contextValue = wcfContextUtil.findContextValue(null, "maxBrowseTreesExpanded");
			if (contextValue) {
				var maxBrowseTreesExpanded = contextValue.value;
				if (maxBrowseTreesExpanded && maxBrowseTreesExpanded > 1) {
					var time = null;
					var expandedTimes = [];
					this.calculateOrderedExpandedTimes(expandedTimes);
					if (expandedTimes.length >= maxBrowseTreesExpanded) {
						time = expandedTimes[expandedTimes.length - maxBrowseTreesExpanded];
					}
					if (time) {
						this.closeChildrenTreesBeforeTime(time);
					}
				}
			}
			]]>
		</method>
		
		<!---
			@keywords private
			This method closes all the children trees that were expanded before the given time.
			@param number time: The given time.
		-->
		<method name="closeChildrenTreesBeforeTime" args="time">
			<![CDATA[
			if (time) {
				for (var i = 0; i < this.children.subviews.length; i++) {
					var child = this.children.subviews[i];
					if (child instanceof lz.wcfUtilitiesBrowseObjectTree && child["__expandedTime"]) {
						child.closeChildrenTreesBeforeTime(time);
						if (child.__expandedTime < time) {
							child.setAttribute("open", false);
						}
					}
				}
			}
			]]>
		</method>
		
		<!---
			Update the display name.
		-->
		<method name="updateDisplayName" args="e=null">
			<![CDATA[
			if (this.o.objectDisplayName != null) {
				this.setAttribute("text", this.o.objectDisplayName);
			}
			]]>
		</method>
		
		<!---
			Update the tree node display name style.
		-->
		<method name="updateDisplayNameStyle" args="e=null">
			<![CDATA[
			var newTextColor = this.style.textcolor;
			var newTextStyle = "plain";
			var style = this.o.displayNameStyle;
			if (style != null) {
				newTextColor = style.color;
				if (style.bold && style.italic) {
					newTextStyle = "bolditalic";
				}
				else if (style.bold) {
					newTextStyle = "bold";
				}
				else if (style.italic) {
					newTextStyle = "italic";
				}
			}
			if (this.textColor != newTextColor) {
				this.setAttribute("textColor", newTextColor);
			}
			if (this.textStyle != newTextStyle) {
				this.setAttribute("textStyle", newTextStyle);
			}
			]]>
		</method>
		
		

		<!---
			Update the status message.
		-->
		<method name="checkStatusMessage" args="e=null">
			<![CDATA[
			this.checkStatusMessageDel.unregisterAll();
			var newMessage = "";
			if (this.open && this["oList"] && this.navigationEnabled) {
				this.checkStatusMessageDel.register(this.oList, "onstatusObject");
				this.checkStatusMessageDel.register(this, "onopen");
				if (this.oList.statusObject != null) {
					if (this.oList.statusObject['messageForTree']) { 
						newMessage = this.oList.statusObject.messageForTree;
					} else {
						newMessage = this.oList.statusObject.message;
					}
				}
			}
			if (this.statusMessage != newMessage) {
				this.setAttribute("statusMessage", newMessage);
			}
			]]>
		</method>

		<!--- @keywords private -->		
		<handler name="onactivate">
			<![CDATA[
			this.referencedObject.doOpen();
			]]>
		</handler>
		<wcfDragSource targetKeys="${['browseElement','element']}" dragAndDropManager="${wcfDndManager}" placement="dragtreeitem"/>
	</class>
	
	<!---
		@keywords private
		Root node of a property browse object tree.
	-->
	<class name="wcfPropertyRootBrowseTree" extends="wcfPropertyBrowseObjectTree" showroot="false" visible="true" maxObjectViews="${null}">
		
		<!---
			The current filter.
		-->
		<attribute name="filter" value="null"/>
		
		<!--- @keywords private -->
		<method name="init">
			<![CDATA[
			super.init();
			this.filter = this.parent.filterSelector.selectedValue;
			this.updateFilterDel.register(this.parent.filterSelector, "onselectedValue");
			this.checkVisibilityDel = new lz.Delegate(this, "checkVisibility");
			this.checkVisibility();
			]]>
		</method>
		
		<!---
			Returns an array of the currently selected objects.
		-->
		<method name="getSelectedObjects">
			<![CDATA[
			var s = this.getSelection();
			var selectedObjects = [];
			if (s && s["o"]) {
				selectedObjects.push(s.o);
			}
			return selectedObjects;
			]]>
		</method>
		
		<!---
			Update the filter to match the currently selected filter.
		-->
		<method name="updateFilter" args="e=null">
			<![CDATA[
			var newFilter = this.parent.filterSelector.selectedValue;
			if (newFilter != this.filter) {
				if (this["oList"]) {
					this.oList.setAttribute("baseFilter", newFilter);
				}
				this.setAttribute("filter", newFilter);
			}
			]]>
		</method>

		<!--- @keywords private -->
		<handler name="onfocus" args="f">
			<![CDATA[
			if (f != null && f != this) {
				this.oEditor.model.setAttribute("activeSelectionView", this);
			}
			]]>
		</handler>

		<!--- @keywords private -->
		<handler name="onselect">
			<![CDATA[
				if (this.isinited && this.parent.propertyTree.selectionHandler != null && this.parent.o != null) {
					var selectedObject = null;
					var s = this.getSelection();
					if (s && s["o"]) {
						selectedObject = s.o;
					}
					this.parent.propertyTree.selectionHandler.handleSelection(this.parent.o, selectedObject);
				}
			]]>
		</handler>

		<!---
			@keywords private
			This method is called when the visibility of the tree changes. When the tree is made visible, the list of filtered objects is refreshed.
			When the tree is made invisible the selectedObject of the tree is set to null.
		-->
		<method name="checkVisibility" args="e=null">
			<![CDATA[
			if (this.parent.propertyTree.selectionHandler != null) {
				this.checkVisibilityDel.unregisterAll();
				var visibilityView = wcfViewUtil.getInvisibleAncestor(this);
				if (visibilityView != null) {
					this.checkVisibilityDel.register(visibilityView, "onvisible");
				} else if (!this.visible) {
					this.checkVisibilityDel.register(this, "onvisible");
				} else {
					wcfViewUtil.registerVisibilityDelegate(this, this.checkVisibilityDel);
					if (this.parent.o != null) {
						var selectedObject = null;
						var s = this.getSelection();
						if (s && s["o"]) {
							selectedObject = s.o;
						}
						this.parent.propertyTree.selectionHandler.handleSelection(this.parent.o, selectedObject);
					}
				}
			}
			]]>
		</method>
		
		<!--- @keywords private -->
		<handler name="onactiveSelectionView" reference="this.oEditor.model">
			<![CDATA[
			this.setAttribute("activated", this.oEditor.model.activeSelectionView == this);
			]]>
		</handler>
		
		<!--- @keywords private -->
		<method name="restoreFocus">
			<![CDATA[
			lz.Focus.setFocus(this.parent, false);
			]]>
		</method>
	</class>
	
	<!---
		@keywords private
		
		This class defines the tree widget to use for {@link wcfPropertyTree}.
	-->
	<class name="wcfTreeWidget" clip="true">
		<!---
			This attribute holds a reference to the instance of {@link wcfModelObject} that is being modified by the
			properties view that contains this tree widget.
		-->
		<attribute name="o" value="null"/>
		<!---
			This attribute holds a reference to the instance of {@link wcfPropertyTree} created this widget.
		-->
		<attribute name="propertyTree" value="null"/>

		<!--- @keywords private -->
		<method name="init">
			<![CDATA[
			var filter= new lz.wcfBaseComboBox(this, {
				name: "filterSelector",
				width: 180});
			var filters = this.parent.filters;
			if (filters.length == 0) {
				this.filterSelector.setAttribute("selectedValue", null);
				this.filterSelector.setValues(null);		
				this.filterSelector.setAttribute("visible", false);
			}
			else if (filters.length == 1) {
				this.filterSelector.setAttribute("selectedValue", filters[0]);
				this.filterSelector.setValues(filters);
				this.filterSelector.setAttribute("visible", false);	
			}
			else {
				var selectedValue = null;
				for (var i = 0; i < filters.length; i++) {
					if (filters[i].isDefault) {
						selectedValue = filters[i];
						break;
					}
				}				
				if (selectedValue == null) {
					selectedValue = filters[0];
				}
				this.filterSelector.setAttribute("selectedValue", selectedValue);
				this.filterSelector.setValues(filters);
				this.filterSelector.setAttribute("visible", true);
			}
			new lz.wcfPropertyRootBrowseTree(this, {
				name: "propertyBrowseTree",
				oEditor: this.o.model.oEditor,
				propertyObject: this.o
			});
			this.propertyBrowseTree.setAttribute("y", this.filterSelector.visible ? this.filterSelector.height + 10 : 0);
			this.propertyBrowseTree.setAttribute("o", this.o.model.oEditor.navigationTree.o);
			super.init();
			]]>
		</method>
	</class>
	
	<!---
		@keywords final
		Use this class to declare a tree widget as a component of a properties view. The root
		node in the tree is the {@link wcfTopObjectDefinition Top object} declared in the
		{@link wcfBusinessObjectEditor} that contains the properties view. Declare one or more
		{@link wcfFilter filters} as children of the wcfPropertyTree instance to control the
		objects that will be displayed in the tree.
		<p>A single instance of {@link wcfPropertyTreeNodeCustomizer} can be declared as a child
		of the property tree instance. The tree node customizer controls the icons that are displayed
		next to the objects in the tree.</p>
		<p>Multiple instances of {@link wcfPropertyTreeAction} can be declared as children of the
		property instance. The declared actions will be available in the context menu and edit menu
		when a tree node is selected.</p>
	-->
	<class name="wcfPropertyTree" extends="wcfPropertiesComponent">
		<!---
			@keywords private
			Array of available filters.
		-->
		<attribute name="filters" value="${[]}"/>
		<!---
			@keywords private
			Tree node customizer.
		-->
		<attribute name="customizer" value="null"/>
		<!---
			@keywords private
			Array of tree node actions.
		-->
		<attribute name="actions" value="${[]}"/>
		<!---
			@keywords private
			Selection handler.
		-->
		<attribute name="selectionHandler" value="null"/>
				
		<!--- @keywords private -->
		<method name="createEditor" args="parentComponent">
			<![CDATA[
			new lz.wcfTreeWidget(parentComponent, {
				name: "editor",
				x: parentComponent.promptWidth + parentComponent.xspacing,
				o: parentComponent.o,
				enabled: parentComponent.enabled,
				propertyTree: this
			});
			]]>
		</method>
	</class>
	
	<!---
		Use this class to control the icon that will be displayed next to the nodes in a tree declared using
		{@link wcfPropertyTree}. Create a new class that subclasses this class and overrides the
		<code>getIcon</code> method. Instantiate the new class as a child of the instance of wcfPropertyTree.
		The <code>getIcon</code> method will be called by the framework when the tree node is displayed.
	-->
	<class name="wcfPropertyTreeNodeCustomizer" extends="node">
		<!--- @keywords private -->
		<method name="init">
			<![CDATA[
				super.init();
				parent.customizer = this;
			]]>
		</method>
		<!---
			@keywords abstract
			Override this method and return the name of the resource to be used as the icon for the
			specified tree node object.
			@param wcfModelObject o: the model object associated with the properties view that contains the wcfPropertyTree instance
			@param wcfModelObject treeNodeObject: the model object associated with the tree node
			@param lz.Delegate del: a delegate. Register this delegate to events that will change the icon.
			@return string: the resource name
		-->
		<method name="getIcon" args="o, treeNodeObject, del"/>
	</class>
	
	<!---
		Use this class to handle the selection of nodes in a tree declared using
		{@link wcfPropertyTree}. Create a new class that subclasses this class and overrides the
		<code>handleSelection</code> method. Instantiate the new class as a child of the instance of wcfPropertyTree.
		The <code>handleSelection</code> method will be called by the framework when the selected node changes.
	--> 
	<class name="wcfPropertyTreeSelectionHandler" extends="node">
		<!--- @keywords private -->
		<method name="init">
			<![CDATA[
			super.init();
			parent.selectionHandler = this;
			]]>
		</method>
		<!---
			@keywords abstract
			Override this method to handle tree node selection.
			@param wcfModelObject o: the model object associated with the properties view that contains the wcfPropertyTree instance
			@param wcfModelObject selectedObject: the model object associated with the tree node
			@return string: the resource name
		-->
		<method name="handleSelection" args="o, selectedObject"/>
	</class>
	
	<!---
		Use this class to control the actions that can be performed on the tree nodes displayed in
		an instance of {@link wcfPropertyTree}. The actions will appear in the context menu and
		in the Edit menu. Create new classes that subclass this class and override the
		<code>performAction</code> method. Instantiate the new class as children of the instance of wcfPropertyTree.
		The <code>performAction</code> method will be called by the framework when the action is selected.
	-->
	<class name="wcfPropertyTreeAction" extends="node">
		<!---
			The display name for this action. This is a required attribute.
		-->
		<attribute name="displayName" type="string"/>
		<!---
			The menu display name for this action. This name will appear in both the Edit menu and the context menu. If this attribute is not set, it will default to the displayName attribute.
		-->
		<attribute name="menuDisplayName" type="string" value="${null}"/>
		<!---
			@keywords private
			Returns the menu display name. If the menuDisplayName attribute has not been set
			then this method will return the value of the displayName attribute.

			@return boolean: the menu display name
		-->
		<method name="getMenuDisplayName">
			<![CDATA[
			return this.menuDisplayName == null ? this.displayName : this.menuDisplayName;
			]]>
		</method>
		
		<!---
			@keywords private
			Initialize the action add this to parent.actions
		-->
		<method name="init">
			<![CDATA[
			super.init();
			var actions = parent["actions"];
			if (!actions) {
				actions = [];
				parent.actions = actions;
			}
			actions.push(this);
			
			]]>
		</method>
		
		<!---
			@keywords abstract
	
			This method is invoked by the framework when the tree action is executed from the "Edit" menu or
			the context menu. Override this method to implement the action that needs to be performed on the selected
			business object whenever the client action is executed.
			
			@param wcfModelObject o The model object associated with the properties view that contains the wcfPropertyTree instance.
			@param wcfModelObject treeNodeObject The model object associated with the selected tree node
		-->			
		<method name="performAction" args="o, treeNodeObject"/>
		
		<!---
			This method is invoked by the framework to determine if this action is currently
			enabled. By default the action is always enabled. Override this method to implement
			the enablement behaviour required by the action.
			@param wcfModelObject o The model object associated with the properties view that contains the wcfPropertyTree instance.
			@param wcfModelObject treeNodeObject The model object associated with the selected tree node.
			@param lz.Delegate del a delegate. Register this delegate to events that will change the enablement of the action.
			@return boolean <code>true</code> if the action is enabled, <code>false</code> otherwise
		-->
		<method name="isEnabled" args="o, treeNodeObject, del=null">
			<![CDATA[
			return true;
			]]>
		</method>
	</class>
	
</library>