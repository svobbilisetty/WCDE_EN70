<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2009, 2011 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->
<library>
	<!---
		@keywords private
		This class is used to create a focus indicator view for focusable widgets.  To use the wcfFocusIndicator, create
		an instance of this class on the widgets first onfocus call as shown in the sample below.
		
		Sample usage of usage in {@link wcfInputText}:
		@START_CODE
			<handler name="onfocus" reference="inputText">
			    <![CDATA[				
			    if(!this["indicator"]){
				    new lz.wcfFocusIndicator(this, {
				    	name: "indicator",
				    	focusableView: this.inputText,
				    	indicatorView: this,
				    	offset: 1
				    });
			    }
				]]>
			</handler>
		@END_CODE
	-->
	<class name="wcfFocusIndicator" options="ignorelayout">
		
		<!--- The view that will fire the onfocus and onblur events. This is a required attribute. -->
		<attribute name="focusableView" value="${null}"/>
		<!--- The view that the indicator will be displayed on. This is a required attribute. -->
		<attribute name="indicatorView" value="${null}"/>
		<!--- 
			Used to create the indicator inside of the indicatorView by this amount of pixels. 
			The default value is 0 and will create the indicator on top of the indicatorView boundaries
		-->
		<attribute name="offset" type="number" value="0" />
		<!--- The view that the indicator will be displayed on -->
		<attribute name="style" value="${lz._componentmanager.service.getDefaultStyle()}" />
		
		<drawview name="top" />
		<drawview name="bottom" />
		<drawview name="left" />
		<drawview name="right" />
				
		<!--- @keywords private -->
		<method name="init">
			<![CDATA[			
			super.init();
			if(lz.Focus.getFocus() == this.focusableView){
				this.renderLines();
			}else{
				this.setAttribute('visible', false);
			}
			]]>
		</method>
		
		<!---
			@keywords private
			Destroy delegates.
		-->
		<method name="destroy">
			<![CDATA[
			if (this["renderLinesDel"]) {
				this.renderLinesDel.unregisterAll();
				delete this.renderLinesDel;
			}
			super.destroy();
			]]>
		</method>
				
		<!--- @keywords private -->	
		<method name="renderLines" args="e=null"> 
			<![CDATA[
			if (this["renderLinesDel"]) {
				this.renderLinesDel.unregisterAll();
			}
			else {
				this.renderLinesDel = new lz.Delegate(this, "renderLines");
			}
			
			if (this.visible) {
				var v = this.indicatorView;
				do {
					this.renderLinesDel.register(v, "onx");
					this.renderLinesDel.register(v, "ony");
					v = v.immediateparent;
				} while (v != null && !wcfViewUtil.containsView(v, this));
				this.renderLinesDel.register(this.indicatorView, "onwidth");
				this.renderLinesDel.register(this.indicatorView, "onheight");
				
				var relativeX = this.indicatorView.getAttributeRelative("x", this);
				var relativeY = this.indicatorView.getAttributeRelative("y", this);
				var pWidth = relativeX  + this.indicatorView.width - 1 - this.offset;
				top.setAttribute("width", pWidth);
				bottom.setAttribute("width", pWidth);
				var pHeight = relativeY + this.indicatorView.height - 1 - this.offset;
				left.setAttribute("height", pHeight);
				right.setAttribute("height", pHeight);
				var strokeLength = 1;
				var strokeSpacing = 2;
				
				this.left.clear();
				this.left.beginPath();
				
				var h = relativeY + this.offset;
				while(h < pHeight){
					this.left.moveTo(relativeX + this.offset, h);
					this.left.lineTo(relativeX + this.offset, h + strokeLength);
					h = h + strokeLength + strokeSpacing;
				}
				this.left.strokeStyle = this.style.focusindicatorcolor; 
				this.left.lineWidth = 0;
				this.left.stroke();
				
				this.bottom.clear();	
				this.bottom.beginPath();  
				var w =  relativeX + this.offset;
				while(w < pWidth){
					this.bottom.moveTo(w, pHeight);
					this.bottom.lineTo(w + strokeLength, pHeight);
					w = w + strokeLength + strokeSpacing;
				} 	
				this.bottom.strokeStyle = this.style.focusindicatorcolor; 
				this.bottom.lineWidth = 0;
				this.bottom.stroke();
				
				this.right.clear();
				this.right.beginPath(); 
				h = pHeight + 1;
				while(h >  relativeY + this.offset + 1){
					this.right.moveTo(pWidth, h);
					this.right.lineTo(pWidth, h - strokeLength);
					h = h - strokeLength - strokeSpacing;
				}
				this.right.strokeStyle = this.style.focusindicatorcolor; 
				this.right.lineWidth = 0;
				this.right.stroke();
	
				this.top.clear();
				this.top.beginPath();
				w = pWidth + 1;
				while(w >  relativeX + this.offset + 1){
					this.top.moveTo(w, this.offset + relativeY);
					this.top.lineTo(w - strokeLength, this.offset + relativeY);
					w = w - strokeLength - strokeSpacing;
				}
				this.top.strokeStyle = this.style.focusindicatorcolor; 
				this.top.lineWidth = 0;
				this.top.stroke();
			}
			]]>
		</method>
		
		<!--- @keywords private -->
		<handler name="onblur" reference="this.focusableView">
			<![CDATA[
			this.setAttribute('visible', false);
			]]>
		</handler>
		
		<!--- @keywords private -->				
		<handler name="onfocus" reference="this.focusableView">
			<![CDATA[
			this.bringToFront();
			this.setAttribute('visible', true);
			this.renderLines();
			]]>
		</handler>
	</class>
</library>
