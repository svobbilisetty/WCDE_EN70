<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2007, 2011 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->
<library>
	<!---
		This class provides the template selector wizard that is used when a business user creates a new {@link wcfPrimaryObjectDefinition object} in the Management Center.
		This wizard displays a list of {@link wcfFilter filters} and a grid that contains the template objects for the store. The filters control which templates are visible in the grid.
		
		<p>The following example demonstrates a template picker for promotion templates.
		Sample usage:
			@START_CODE
			<TemplatePickerWizard definitionName="tstTestObjectTemplatePicker" title="${foundationResources.promotionTestTitle}" objectTypes="TestObjectTemplate,TestObjectTemplate2" descriptionPropertyName="templateDescription" displayTypeColumn="true">
				<GetTemplatesService url="/jsp/commerce/test/GetTestObjectsTemplate.jsp"/>
				<PropertyValuesFilter displayName="Percentage off promotion" propertyName="templateId" values="1,2,3,4,5,6,7,8,9,10,11" />
				<PropertyValuesFilter displayName="Fixed cost promotion" propertyName="templateId" values="12,13,14,15,16,17,18,19,20" />
				<PropertyValuesFilter displayName="Amount off promotion" propertyName="templateId" values="21,22,23,24,25,26,27,28,29,30" />
				<PropertyValuesFilter displayName="Free gift promotion" propertyName="templateId" values="31,32,33,34,35,36" />
				<PropertyValuesFilter displayName="User created promotion" propertyName="templateId" negate="true"
						values="1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36" />
				<PropertyValuesFilter displayName="Show all promotion" propertyName="templateId" values="" />
				<PropertyValuesFilter displayName="B2BDirect Folder" propertyName="templateId" values="1,2,3" >
					<EnablementCondition contextName="storeId" enablementValue="10051"/>
				</PropertyValuesFilter>
			</TemplatePickerWizard>
			@END_CODE
						
			<p>Specify the new definition name as the {@link wcfPrimaryObjectDefinition#createWizardDefinitionName create wizard definition name} for the object definition that describes
			the object that will be created by the wizard.
			@START_CODE
			<PrimaryObjectDefinition definitionName="TestObject"
					objectType="TestObject"
					baseType="BaseTestObject"
					creatable="true"
					icon="TestObjectIcon"
					headerIcon="TestObjectHeaderIcon"
					createWizardDefinitionName="tstTestObjectTemplatePicker" />
			@END_CODE
	-->
	<class name="wcfTemplatePickerWizard" extends="wcfBaseCreateWizard">
		<!---
			A comma separated list of  template {@link wcfObjectDefinition#objectType object types}.
		-->
		<attribute name="objectTypes" type="string" value="" />
		<!---
			The name of the template object {@link wcfModelProperty property} that will be displayed in the description area when the template object
			is selected.
		-->
		<attribute name="descriptionPropertyName" value="" type="string" />
		<!---
			A boolean that controls the visibility of the type column in the template object grid. The default is false.
		-->
		<attribute name="displayTypeColumn" value="false" type="boolean" />
		<!---
			@keywords private
		-->
		<attribute name="templateObjects" value="${[]}"/>
		<!---
			@keywords private
		-->
		<attribute name="filters" value="${[]}"/>
		<!---
			@keywords private
		-->
		<attribute name="modelObjectList" value="null"/>
		<!---
			@keywords private
		-->
		<attribute name="getTemplateService" value="null"/>
		
		<!---
			@keywords private
			The start index of the current page of search results.
		-->
		<attribute name="startIndex" type="number" value="0"/>
		<!---
			@keywords private
			The total number of records from the search result.
		-->
		<attribute name="totalRecords" type="number" value="0"/>
		<!---
			@keywords private
		-->
		<attribute name="currPageNum" type="number" value="0"/>
		<!---
			@keywords private
		-->
		<attribute name="lastPageNum" type="number" value="0"/>
		<!---
			@keywords private
			The instance implemented doLoadPage which can be called by the page control.
		-->
		<attribute name="pageController" value="$once{this}"/>
		
		<!---
			@keywords private
		-->
		<attribute name="selectedTemplate" value="null"/>
		<!---
			@keywords private
		-->
		<attribute name="selectedTemplateDescription" type="string" value=""/>
		<!---
			@keywords private
		-->
		<attribute name="searchResults" value="null"/>
		<!---
			@keywords private
		-->
		<attribute name="statusMessage" type="string" value=" "/>

		<!---
			@keywords private
			Indicates that the description text should interpreted as HTML.
		-->
		<attribute name="htmlDescription" value="false" type="boolean"/>
		
		<!--- @keywords private -->
		<method name="init">
			<![CDATA[
			super.init();
			if (!this["definitionNode"]) {
				this.postCreateDefinitionChildren();
			}
			]]>
		</method>
		
		<!--- @keywords private -->
		<method name="postCreateDefinitionChildren">
			<![CDATA[
			this.modelObjectList = new lz.wcfModelObjectList(this, {
				v: this.templateDetailView.templateGridView.templateGrid,
				modelObjects: this.templateObjects,
				statusObject: this
			});
			this.removeObjectDel = new lz.Delegate(this, "removeObject");
			this.updateResultsMessageDel = new lz.Delegate(this, "updateResultsMessage");
			var objectTypeArray = this.objectTypes ? wcfStringUtil.splitAndTrim(this.objectTypes, ",") : null;
			var searchDefs = [];
			for (var i = 0; i < objectTypeArray.length; i++) {
				var def = this.model.getObjectDefinition(null, objectTypeArray[i]);
				if(def.searchDefinition){
					var found = false;
					for (var t = 0; t < searchDefs.length; t++) {
						if(searchDefs[t] == def.searchDefinition){
							found = true;
							break;
						}
					}
					if(!found) searchDefs.push(def.searchDefinition);
				}
			}
			if (searchDefs.length > 0) {
				this.templateNavigationView.searchWidget.searchButton.setAttribute("actionDefinitions", searchDefs);
				this.templateNavigationView.searchWidget.setAttribute("currentDefinition", searchDefs[0]);
			}
			
			]]>
		</method>
		
		<!--- @keywords private	-->
		<method name="destroy">
			<![CDATA[
			this.removeObjectDel.unregisterAll();
			delete this.removeObjectDel;
			this.updateResultsMessageDel.unregisterAll();
			delete this.updateResultsMessageDel;
			super.destroy();
			]]>
		</method>
		
		<!---
			@keywords private
			Update the selected template.
		-->
		<method name="updateSelectedTemplate" args="o">
			<![CDATA[
			this.setAttribute("selectedTemplate", o);
			var newDescription = this.selectedTemplate == null ? "" : this.selectedTemplate.getPropertyValue(this.descriptionPropertyName);
			if (!this.htmlDescription) {
				newDescription = wcfStringUtil.escapeText(newDescription);
			}
			this.setAttribute("selectedTemplateDescription", newDescription);
			]]>
		</method>
		
		<!--- @keywords private	-->
		<method name="setInitialFocus" args="e=null">
			<![CDATA[
			lz.Focus.setFocus(this.templateNavigationView.templateWizardList.templateContainerList, false);
			]]>
		</method>
					
		<!--- @keywords private -->
		<method name="openWindow">
			<![CDATA[
			super.openWindow();
			this.templateObjects = [];
			this.templateNavigationView.templateWizardList.populateFilters(this.filters);
			if(this.getTemplateService != null){
				this.getTemplateService.doRequest(this);
			}
			if(this.searchResults != null){
				this.searchResults.releaseView(this.templateDetailView.templateGridView.searchGrid);
				this.templateNavigationView.searchWidget.searchTextArea.searchText.setAttribute('text', "");
			}
			this.setAttribute('statusMessage', " ");
			]]>
		</method>

		<!---
			@keywords private
			Load the page.
		-->
		<method name="doLoadPage" args="args">
			<![CDATA[
			loadByPageNum(args.pageNum);
			]]>
		</method>
		<!---
			@keywords private
			Load the page of search result by page number. The current set of search results is discarded.
		-->
		<method name="loadByPageNum" args="pageNum">
			<![CDATA[
			var maxRecordSetTotal = this.getTemplateService.getMaxRecordSetTotal();
			var startIndex;
			if (this.currPageNum < pageNum) {
				var maxItems = this.getTemplateService.getMaxItems();
				startIndex = this.startIndex + (maxRecordSetTotal * (pageNum - this.currPageNum));
			} else {
				startIndex = maxRecordSetTotal * (pageNum-1);
			}
			this.setAttribute("statusMessage", " ");
			this.setAttribute("startIndex", 0);
			this.setAttribute("currPageNum", 0);
			this.setAttribute("lastPageNum", 0);
			this.setAttribute("totalRecords", 0);
			this.templateObjects = [];
			this.updateTemplateObjects();
			this.getTemplateService.doRequest(this, null, {startIndex:startIndex});
			]]>
		</method>

		<!---
			@keywords private
			Remove the specified object from the template wizard. This method is
			registered to the "beingDestroyed" event for all the objects
			in the wizard.
		-->
		<method name="removeObject" args="o">
    		<![CDATA[
			var index = this.templateObjects.indexOf(o);
			if (index != -1) {
    			this.templateObjects.splice(index, 1);
			}
			this.updateTemplateObjects();
			]]>
		</method>
		
		<!---
			@keywords private
			Refresh the template grid view.
		-->
		<method name="updateTemplateObjects">
			<![CDATA[
			this.removeObjectDel.unregisterAll();
			for (var i = 0; i < this.templateObjects.length; i++) {
				this.removeObjectDel.register(this.templateObjects[i], "beingDestroyed");
			}
			this.modelObjectList.setAttribute("modelObjects", this.templateObjects);
			this.modelObjectList.setAttribute("statusObject", this);
			]]>
		</method>		
		
		<!---
			@keywords private
		-->
		<method name="bindSearchResults" args="searchType">
			<![CDATA[
			this.updateResultsMessageDel.unregisterAll();
			if (this.searchResults != null) {
				this.searchResults.releaseView(this.templateDetailView.templateGridView.searchGrid);
			}
			this.searchResults = this.model.findSearchResults(searchType);
			if (this.searchResults != null) {
				this.searchResults.bindView(this.templateDetailView.templateGridView.searchGrid);
				this.updateResultsMessageDel.register(this.searchResults, "onstatusMessage");
			}
			this.templateNavigationView.templateWizardList.selectItemAt(0);
			]]>
		</method>
		
		<!---
			@keywords private
			Update the search result message area with an informational statement about the search results.
		-->
		<method name="updateResultsMessage" args="e=null">
			<![CDATA[
			if (this.searchResults == null || this.searchResults.statusMessage == "") {
				this.setAttribute("statusMessage", " ");
			}else{
				this.setAttribute("statusMessage", this.searchResults.statusMessage);
			}
			]]>
		</method>		
		
		<simplelayout axis="x" spacing="5"/>
		<text name="msgArea" options="ignorelayout" multiline="true" text="${parent.statusMessage}" width="${parent.content.width}" />
		<view name="templateNavigationView" y="${parent.msgArea.height}">
			<simplelayout axis="y" spacing="5"/>
			<wcfTemplatePickerSearchWidget name="searchWidget" templatePicker="${classroot}" visible="${this.currentDefinition != null}"/>
			<wcfTemplateWizardList name="templateWizardList" height="${350 - (parent.searchWidget.visible ? parent.searchWidget.height + 5 : 0)}" width="${parent.searchWidget.width}" templatePicker="${classroot}" />
		</view>
		<view name="templateDetailView" y="${parent.msgArea.height}">
			<attribute name="availableHeight" type="number" value="${345 - this.templateDescriptionView.height - 1}"/>
			<attribute name="availableWidth" value="350"/>
			<simplelayout axis="y" spacing="5"/>
			<wcfBorderedView name="templateGridView" borderRightSize="1" borderBottomSize="1" borderColor="${classroot.style.forminputbordercolor}">
				<wcfTemplateWizardGrid name="searchGrid" templatePicker="${classroot}"
					rowMenuClass="wcfTemplatePickerSearchResultsMenu" menuClass="wcfTemplatePickerSearchResultsBackgroundMenu"/>
				<wcfTemplateWizardGrid name="templateGrid" visible="${!parent.searchGrid.visible}" templatePicker="${classroot}"
					rowMenuClass="wcfTemplatePickerListMenu" menuClass="wcfTemplatePickerListBackgroundMenu"/>
			</wcfBorderedView>
			<wcfBorderedView name="templateDescriptionView" width="${parent.availableWidth}" height="100" borderSize="1" borderColor="${classroot.style.bordercolumnlistcolor}" focusable="true" clickable="true">
				<attribute name="vScrollWidth" type="number" value="${(this.vScroll.visible ? this.vScroll.width : 0)}"/>
				<!--- @keywords private -->
				<handler name="onfocus">
				    <![CDATA[				
				    if(!this["indicator"]){
					    new lz.wcfFocusIndicator(this, {
					    	name: "indicator",
					    	focusableView: this,
					    	indicatorView: this,
					    	offset: 1
					    });
				    }
					]]>
				</handler>
				<!--- @keywords private	-->
				<handler name="onkeydown" args="code">
					<![CDATA[
					if(this.vScroll.visible){
						if (code == 33) { //pageup
							this.vScroll.page(-1);
						}else if (code == 34) { //pagedown
							this.vScroll.page(1);
						}else if (code == 38) { // up
							this.vScroll.page(-.25);
						}else if (code == 40) { // down
							this.vScroll.page(.25);
						}
					}
					]]>
				</handler>
				<view name="clippedContent" clip="true" x="1" y="1" width="${parent.width - parent.vScrollWidth - 2}" height="${parent.height - 2}">
					<handler name="onwidth">
						parent.vScroll.targetSizeUpdate(null);
					</handler>
					<text name="templateDescription" width="${parent.width}" multiline="true" text="${classroot.selectedTemplateDescription}"/>
				</view>
				<wcfVerticalScrollbar name="vScroll" x="${parent.clippedContent.x + parent.clippedContent.width}" height="${parent.height - 1}" yoffset="1"
					scrolltarget="${parent.clippedContent.templateDescription}" visible="${scrollable}"/>
			</wcfBorderedView>
		</view>
		<view name="buttonView" placement="footer">
			<simplelayout axis="x"/>
			<wcfButton name="okButton" text="${foundationResources.simpleDialogOK.string}" enabled="${classroot.selectedTemplate != null}">
				<handler name="onclick">
					classroot.complete(classroot.selectedTemplate);
				</handler>
			</wcfButton>
			<wcfButton text="${foundationResources.simpleDialogCancel.string}">
				<handler name="onclick">
					classroot.cancel();
				</handler>
			</wcfButton>
		</view>
	</class>
	
	<!---
		@keywords private
		Template picker grid view. The template wizard grid view only displays the object icon and display name.
	-->
	<class name="wcfTemplateWizardGrid" extends="wcfObjectGrid" listBorderSize="1" padding="0" isConfigurable="false" multiSelect="false" editable="false" dragEnabled="false">
		<!--- @keywords private -->
		<attribute name="templatePicker" value="null"/>
		<wcfGridIconTypeImage name="typeIcon" text="${foundationResources.utilitiesGrid_type.string}" width="75" propertyName="null" visible="${parent.templatePicker.displayTypeColumn}"/>
		<wcfGridDisplayName name="template" text="${foundationResources.utilitiesGrid_name.string}" width="$once{parent.templatePicker.templateDetailView.availableWidth - (parent.templatePicker.displayTypeColumn ? parent.typeIcon.width : 0) - 25}"/>
		<handler name="onselect">
			<![CDATA[
			if (this.visible && this.templatePicker) {
				this.templatePicker.updateSelectedTemplate(this.getSelectedObject());
			}
			]]>
		</handler>
		<handler name="onvisible">
			<![CDATA[
			if (this.visible && this.templatePicker) {
				this.templatePicker.updateSelectedTemplate(this.getSelectedObject());
			}
			]]>
		</handler>
		<!---
			@keywords private
			Handles ondblclick action from the row.  This method will select the object and close the template picker.
			@param modelObject o: The object to activate.
		-->
		<method name="activateObject" args="o">
			<![CDATA[
			if (this.visible && this.templatePicker) {
				this.templatePicker.complete(o);
			}
			]]>
		</method>
	</class>
	
	<!---
		@keywords private
		Template picker list view that displays the template folder icons and display names.
	-->
	<class name="wcfTemplateWizardList" extends="view" clip="true" >
		<!---
			@keywords private
			This is a required attribute.
		-->
		<attribute name="templatePicker" value="null"/>
		<!---
			@keywords private
		-->
		<attribute name="listItems" value="${[]}"/>
		<!---
			@keywords private
		-->
		<attribute name="availableItems" value="${[]}"/>
		
		<!--- @keywords private -->
		<method name="populateFilters" args="filters">
			<![CDATA[
			var item;
			while (this.listItems.length > 0) {
				item = this.listItems.pop();
				item.setAttribute("visible", false);
				item.setAttribute("value", null);
				item.setAttribute("icon", null);
				item.setAttribute("displayName", "");
				this.availableItems.unshift(item);
			}
			var listWidth = this.width;
			if(this.templatePicker.templateNavigationView.searchWidget.currentDefinition){
				if (this.availableItems.length > 0) {
					item = this.availableItems.shift();
					item.setAttribute("visible", true);
					item.setAttribute("displayName", foundationResources.searchResultsTree.string);
					item.setAttribute("icon", "searchResultsTreeIcon");
				}
				else {
					item = new lz.wcfListItem(this.templateContainerList, {
						displayName: foundationResources.searchResultsTree.string,
						icon: "searchResultsTreeIcon"
					});
				}
				this.listItems.push(item);
				if (listWidth < item.title.width) {
					listWidth = item.title.width;
				}
			}
			for (var i = 0; i < filters.length; i++) {
				var filter = filters[i];
				if (filter.isEnabled(this.templatePicker.model.oEditor)) {
					if (this.availableItems.length > 0) {
						item = this.availableItems.shift();
						item.setAttribute("visible", true);
						item.setAttribute("value", filter);
						item.setAttribute("displayName", filter.displayName);
						item.setAttribute("icon", filter["icon"] ? filter.icon : "treeFolderResource");
					}
					else {
						item = new lz.wcfListItem(this.templateContainerList, {
							value: filter,
							displayName: filter.displayName,
							icon: filter["icon"] ? filter.icon : "treeFolderResource"
						});
					}
					this.listItems.push(item);
					if (listWidth < item.title.width) {
						listWidth = item.title.width;
					}
				}
			}
			this.templateContainerList.setAttribute("width", listWidth);
			if(this.listItems.length > 1 && this.templatePicker.templateNavigationView.searchWidget.currentDefinition){
				this.selectItemAt(1);
			}else{
				this.selectItemAt(0);
			}
			]]>
		</method>
				
		<!--- @keywords private -->
		<method name="selectItemAt" args="position">
			<![CDATA[
			this.templateContainerList.selectItemAt(position);
			]]>
		</method>
		
		<list name="templateContainerList" toggleselected="false" width="${parent.width}" bordersize="0" autoscrollbar="false" x="1" y="1">
			
			<handler name="onselect" args="listItem">
				<![CDATA[
				if (listItem != null) {
					this.currentListItem = listItem;
					var searchVisible = listItem.value == null;
					if(!searchVisible){
						parent.templatePicker.templateDetailView.templateGridView.templateGrid.deselectAll();
						parent.templatePicker.templateDetailView.templateGridView.templateGrid.top();
						parent.templatePicker.modelObjectList.setAttribute("baseFilter", listItem.value);
					}
					parent.templatePicker.templateDetailView.templateGridView.searchGrid.setAttribute("visible", searchVisible);
				}
				]]>
			</handler>
			
			<!--- @keywords private -->
			<method name="_dokeydown" args="kc">
				<![CDATA[
				if (kc == 39) {
					parent.objectsHScrollbar.page(5);
				}else if (kc == 37){
					parent.objectsHScrollbar.page(-5);
				}else{
					super._dokeydown(kc);
				}
				]]>
			</method>
		</list>
		
		<!--- @keywords private -->
		<handler name="onfocus" reference="templateContainerList">
			<![CDATA[
			if(!this["indicator"]){
			    new lz.wcfFocusIndicator(this, {
			    	name: "indicator",
			    	focusableView: this.templateContainerList,
			    	indicatorView: this,
			    	offset: 1
			    });
		    }
			]]>
		</handler>	
		
		<wcfHorizontalScrollbar name="objectsHScrollbar"
			height="18"
			visible="${this.scrollable}"/>
		<view name="objectsVScrollbarBottom"
			bgcolor="0xE0EAEF"
			x="${parent.objectsVScrollbar.x}"
			y="${parent.objectsVScrollbar.y + parent.objectsVScrollbar.height}"
			height="${parent.objectsHScrollbar.height}"
			width="${parent.objectsVScrollbar.width}"
			visible="${parent.objectsVScrollbar.visible &amp;&amp; parent.objectsHScrollbar.visible}"/>
		<wcfVerticalScrollbar name="objectsVScrollbar"
			width="18"
			visible="${this.scrollable}" />
		<view width="${parent.width}" y="0" height="1" bgcolor="${parent.templatePicker.style.forminputbordercolor}" />
		<view width="${parent.width}" y="${parent.height - 1}" height="1" bgcolor="${parent.templatePicker.style.forminputbordercolor}" />
		<view height="${parent.height}" x="0" width="1" bgcolor="${parent.templatePicker.style.forminputbordercolor}" />
		<view height="${parent.height}" x="${parent.width - 1}" width="1" bgcolor="${parent.templatePicker.style.forminputbordercolor}" />
	</class>
	
	<!---
		A service that will return a list of {@link wcfPrimaryObjectDefinition template objects}. The service must appear as a child of
		a {@link wcfTemplatePickerWizard}.
		This service returns a list of {@link wcfPrimaryObjectDefinition template objects}.  Template objects are used to create new objects with predefined properties.
		A wcfGetTemplatesService must be declared as a child of a {@link wcfTemplatePickerWizard}.
		
		<p>The wcfGetTemplatesService must be prepared to accept the following implicit parameters:
		<ul>
			<li>maxItems: This is an integer value that indicates the desired page size for the result set.</li>
			<li>recordSetStartNumber: This is an integer value that is sent if the result set is broken up
			into multiple pages. The second and subsequent page requests will include this parameter.</li>
			<li>dataLanguageIds: This is the default language ID. If the wcfGetTemplatesService returns translated data,
			it must respect this parameter and only return the translated data that matches the specified language ID.</li>
		</ul>
						
		<p>Additional service parameters can be defined by declaring instances of
		{@link wcfServiceParam} as children of the wcfGetTemplatesService instance.
		
		<p>The following example demonstrates the declaration of a wcfGetTemplatesService that returns the template objects.
		It declares two additional service parameters (storeId and masterCatalogId) that are resolved from context values.
		
		@START_CODE
		<GetTemplatesService url="/cmc/GetTestObjectTemplates">
			<ServiceParam name="storeId"/>
			<ServiceParam name="masterCatalogId"/>
		</GetTemplatesService>
		@END_CODE
		
		<p>The successful response from a wcfGetTemplatesService must be an XML document that has a root element named
		"objects". Each of the child elements of the "objects" element must be named "object" and identify their object
		type by specifying the "objectType" attribute. The "objects" element must include the following attributes:
		<ul>
			<li>recordSetCompleteIndicator - this value is true if the response is the last page of the result set</li>
			<li>recordSetStartNumber - the starting index into the result set for the current page</li>
			<li>recordSetCount - the number of objects returned by this page</li>
			<li>recordSetTotal - the total number of objects in the complete result set</li>
		</ul>
		The "objects" element can optionally include an attribute called "recordSetReferenceId" that will be sent back
		as a parameter on the request for the next page of the results. This can be used to optimize the get service.
		
		<p>The following sample demonstrates a response that returns three template objects. Notice that template objects have
		a unique template Id, an Identifier that is used as a display name, and a description.
		
		@START_CODE
		<objects recordSetCompleteIndicator="true"
				recordSetReferenceId="ac97a350-df32-11dc-83e5-829b47bb4a4f:3"
				recordSetStartNumber="0" recordSetCount="3" recordSetTotal="3">
			<object objectType="TestObjectTemplate">
				<templateId>1</templateId>
				<templateIdentifier>Order Level Percent Discount</templateIdentifier>
				<templateDescription>Price break modifier to apply percent discount based on the order</templateDescription>
			</object>
			<object objectType="TestObjectTemplate">
				<templateId>2</templateId>
				<templateIdentifier>Order Level Percent Off Shipping Discount</templateIdentifier>
				<templateDescription>Price break modifier to apply percent discount off shipping based on the order</templateDescription>
			</object>
			<object objectType="TestObjectTemplate">
				<templateId>3</templateId>
				<templateIdentifier>Category Level Percent Off Discount</templateIdentifier>
				<templateDescription>Price break modifier to apply percent discount based on the category</templateDescription>
			</object>
		</objects>
		@END_CODE
		
		<p>
		If an exception occurs while processing this wcfGetTemplatesService, the response must be an XML document that has a
		root element named "errors". The "errors" element must include one child element named "exception".
		The "exception" element includes a message suitable for display to the user. The following example demonstrates a valid error
		response for the wcfGetTemplatesService.
		
		@START_CODE
		<errors>
			<exception>You do not have the required access rights to perform this get template service.</exception>
		</errors>
		@END_CODE
	-->
	<class name="wcfGetTemplatesService" extends="wcfService" sendMaxItems="true" stoppable="true" sendDefaultLanguageId="true" abortResultsOverLimit="false" retryOnError="true">
		<!---
			@keywords private
			Initialize the service
		-->
		<method name="init">
			<![CDATA[
			super.init();
			parent.getTemplateService = this;
			this.doParseCompleteDel = new lz.Delegate(this, "doParseComplete");
			]]>
		</method>
		
		<!--- @keywords private -->		
		<method name="destroy">
			<![CDATA[
			super.destroy();
			delete this.doParseCompleteDel;
			]]>
		</method>
		
		<!---
			@keywords private
			Parse the "objects" element returned from a successful request.
			@param wcfTemplatePickerWizard t: template picker dialog
			@param XML e: the objects data element
			@param boolean hasMoreRecordsFlag: true when more records exist that have not been loaded
			@param string reqIdentifier: the request identifier associated with the dataset that returned this data
			@param number startIndex: the start index for this request
		-->
		<method name="parseObjects" args="t,e,hasMoreRecordsFlag,reqIdentifier,startIndex">
			<![CDATA[
			t.model.doDeferredParseObjects(e, null, this.doParseCompleteDel, {e: e, t: t, reqIdentifier: reqIdentifier, hasMoreRecordsFlag: hasMoreRecordsFlag, startIndex: startIndex}, this.stoppable);
			]]>
		</method>
	
		<!--- @keywords private -->
		<method name="doParseComplete" args="args">
			<![CDATA[
			if (wcfLogger.perfTraceEnabled) {
				wcfLogger.perfTrace("wcfGetTemplateService", "doParseComplete", "Start update UI for " + args.objects.length + " Objects returned");
			}
			var objects = args.objects;
			var t = args.t;
			var e = args.e;
			var reqIdentifier = args.reqIdentifier;
			if (!args.hasMoreRecordsFlag) {
				var maxRecordSetTotal = this.getMaxRecordSetTotal();	
				var startIndex = args.startIndex;
				var totalRecords = Number(e.attributes["recordSetTotal"]);
				if (isNaN(totalRecords)) {
					totalRecords = 0;
				}
				var currPageNum = Math.ceil((startIndex+maxRecordSetTotal) / maxRecordSetTotal);
				var lastPageNum = currPageNum;
				if (startIndex + maxRecordSetTotal < totalRecords) {
					lastPageNum += Math.ceil((totalRecords-startIndex-maxRecordSetTotal)/maxRecordSetTotal);
				}
				t.setAttribute("startIndex", args.startIndex);
				t.setAttribute("totalRecords", totalRecords);
				t.setAttribute("currPageNum", currPageNum);
				t.setAttribute("lastPageNum", lastPageNum);
				
				var recordSetComplete = e.attributes["recordSetCompleteIndicator"] != "false";
				if (!recordSetComplete || t.currPageNum > 1) {
					t.setAttribute("statusMessage", foundationResources.replaceValues("serviceOverLimitMsg", [t.currPageNum, t.totalRecords]));
				}
			}
			for (var i = 0; i < objects.length; i++) {
				t.templateObjects.push(objects[i]);
			}
			t.updateTemplateObjects();
			if (wcfLogger.enabled) {
	        	wcfLogger.log("com.ibm.commerce.lobtools.foundation.service", "CONFIG", "wcfGetTemplateService", "doParseComplete", "requestIdentifier=" + reqIdentifier + " " + this.url);
			}
			if (wcfLogger.perfTraceEnabled) {
				wcfLogger.perfTrace("wcfGetTemplateService", "doParseComplete", "End update UI for for " + args.objects.length + " Objects returned");
			}
			]]>
		</method>

		<!---
			@keywords private
			Parse the specified data element and apply the properties to the
			specified object. This method is called when an element named "object"
			is found in the service response XML.
			@param wcfModelObject o: the model object
			@param XML e: "object" data element
			@param number reqIdentifier: the request identifier associated with the dataset that returned this data
		-->
		<method name="parseObject" args="o,e,reqIdentifier">
			<![CDATA[
			wcfLogger.log("com.ibm.commerce.lobtools.foundation.service", "SEVERE", "wcfGetTemplatesService", "onerror", "Unexpected <object> tag returned by get template service: " + this.url + ". Get template services must return <objects> tag.");
			]]>
		</method>
	</class>
	
	<!---
		@keywords private
		Template pickers search widget.
	-->
	<class name="wcfTemplatePickerSearchWidget">
		<!---
			@keywords private
		-->
		<attribute name="currentDefinition" value="null"/>
		<!---
			@keywords private
			This is a required attribute.
		-->
		<attribute name="templatePicker" value="null"/>
		<!---
			@keywords private
			Current search options for this search widget.
		-->
		<attribute name="searchOptions" value="${{}}"/>
		
		<!---
			@keywords private
			
			Invoke search.
			@param wcfSearchDefinition definition: search definition
			@param object options: search options
		-->
		<method name="doSearch" args="definition=null, options=null">
			<![CDATA[
			if (options == null) {
				var searchText = this.searchTextArea.searchText.getText();
				this.searchOptions = {};
				this.searchOptions.searchText = searchText;
			}
			else {
				this.searchOptions = options;
			}
			if (definition == null) {
				definition = this.currentDefinition;
			}

			messageLogger.clearStatusMessage();
			this.templatePicker.bindSearchResults(definition.searchType);
			this.templatePicker.model.doSearch(definition.searchType, this.searchOptions);
			]]>
		</method>
		
		<simplelayout axis="x" />
		<view name="searchTextArea">
			<view resource="searchTextBackground"/>
			<inputtext name="searchText" y="1" x="1" width="133">
				<!--- @keywords private -->
				<handler name="onfocus">
					<![CDATA[
					if(!this["indicator"]){
				    	new lz.wcfFocusIndicator(this, {
					    	name: "indicator",
					    	focusableView: this,
					    	indicatorView: this
					    });
				    	}
					]]>
				</handler>
				<!---
					Handle keys.
					@param number kc: key code
				-->
				<handler name="onkeydown" args="kc">
					<![CDATA[
					if (kc == 13) {
						classroot.doSearch();
					}
					]]>
				</handler>
			</inputtext>
		</view>
		<wcfActionListButton name="searchButton">
			<attribute name="buttonResource" value="searchButtonResource"/>
			<attribute name="dropdownResource" value="searchDropdownResource"/>
			<attribute name="dropdownOffset" value="0"/>
			<attribute name="displaySelectedIndicator" value="true"/>
			<attribute name="defaultActionDefinition" value="${classroot.currentDefinition}"/>
			<wcfTooltip text="${foundationResources.searchButtonTip.string}"/>
			<method name="doAction" args="definition">
				<![CDATA[
				if (typeof(definition) == "undefined" || !definition) {
					definition = classroot.currentDefinition;
				}else{
					classroot.setAttribute('currentDefinition', definition);
				}
				classroot.doSearch(definition);
				]]>
			</method>
		</wcfActionListButton>
	</class>
</library>
