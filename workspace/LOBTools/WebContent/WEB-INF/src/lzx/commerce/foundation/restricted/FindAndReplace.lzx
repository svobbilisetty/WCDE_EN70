<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2007, 2010 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->
<library>	
	<!---
		@keyword private
		This class defines the dialog used for Find and Replace. It contains the views for the dialog, 
		as well as the logic to search and replace the content of {@link wcfGridColumn#findable findable} grid columns. 
	-->
	<wcfDialog id="wcfFindAndReplaceDialog" title="${foundationResources.findAndReplaceDialogTitle.string}"
		x="25" 
		y="2"		
		modal="false"
		hideCloseButton="false">
		
		<!---
			@keywords private
			The {@link wcfObjectGrid} that is currently in the list view.
		-->
		<attribute name="objectGrid"/>
		<!---
			@keywords private
			The current {@link wcfModel}.
		-->
		<attribute name="model"/>
		
		<!---
			@keywords private
			The last {@link wcfModelObject object} in which a match was found.
		-->
		<attribute name="lastObjectFound" value="${null}"/>
		<!---
			@keywords private
			The last {@link wcfGridColumn column} in which a match was found.
		-->
		<attribute name="lastColFound" value="${null}"/>
		<!---
			@keywords private
			The index into the property text at which the match was found.
		-->
		<attribute name="lastTextIndexFound" type="number" value="0"/>
		<!---
			@keywords private
			The start index into the formatted property text at which the match was found. This is only used by cells in a column
			where {@link wcfGridColumn#tagsRemoved tagsRemoved} is true.
		-->
		<attribute name="lastFormattedTextStartIndexFound" type="number" value="0"/>
		<!---
			@keywords private
			The end index into the formatted property text at which the match was found.  This is only used by cells in a column
			where {@link wcfGridColumn#tagsRemoved tagsRemoved} is true.
		-->
		<attribute name="lastFormattedTextEndIndexFound" type="number" value="0"/>
		<!---
			@keywords private
			A boolean flag indicating whether the Find button should be enabled in the dialog. This flag will be updated
			automatically by {@link wcfFindAndReplaceDialog#updateFindEnabled}.
		-->
		<attribute name="findEnabled" value="false" type="boolean"/>
		<!---
			@keywords private
			A boolean flag indicating whether there is text in the Find input box. This flag will be updated
			automatically by {@link wcfFindAndReplaceDialog#updateSearchTextExists}.
		-->
		<attribute name="searchTextExists" value="false" type="boolean"/>
		<!---			
			A boolean flag that indicates whether the search should wrap when it hits the bottom of the Grid. The
			default value is true. 
		-->
		<attribute name="wrapSearch" value="${this.contentArea.inputArea.findOptions.wrap.value}" type="boolean"/>
		<!---			
			A boolean flag that indicates whether the search should match the case of the text being searched for. The
			default value is false. 
		-->
		<attribute name="matchCase" value="${this.contentArea.inputArea.findOptions.matchCase.value}" type="boolean"/>				
		<!--- 
			@keywords private 
			This method will open the find and replace dialog. 
			@param wcfModel model The current model. 
			@param wcfBusinessObjectEditor editor The editor that is currently in focus. 
		-->
		<method name="openFindDialog" args="model, editor">
			<![CDATA[
			this.openWindow();
			this.setAttribute("model", model);
			this.setAttribute("objectGrid", this.model.activeSelectionView);			

			if (this["updateFindEnabledDel"] == null) {
				this.updateFindEnabledDel = new lz.Delegate(this, "updateFindEnabled");
			}
			this.updateFindEnabledDel.register(editor, "onfindEnabled");			
			this.updateFindEnabled(editor.findEnabled);
			
			if (this["updateSearchTextExistsDel"] == null) {
				this.updateSearchTextExistsDel = new lz.Delegate(this, "updateSearchTextExists");
				this.updateSearchTextExistsDel.register(this.contentArea.inputArea.searchText, "ontext");
			}
			this.updateSearchTextExists("");
			
			if (this["resetSearchDel"] == null) {
				this.resetSearchDel = new lz.Delegate(this, "resetSearch");
			}			
			this.resetSearchDel.register(this.model, "onactiveSelectionView");
			
			if (this["updateFocusDel"] == null) {
				this.updateFocusDel = new lz.Delegate(this, "updateFocus");
			}			
			this.updateFocusDel.register(lz.Focus, "onfocus");
			
			//Need to detect when the current tool is closed.
			if (this["changeToolDel"] == null) {
				this.changeToolDel = new lz.Delegate(this, "changeTool");
			}
			this.changeToolDel.register(this.model.oEditor, "onactive");
			
			//Need to detect when the window is resized.
			if (this["resetWindowPositionDel"] == null) {
				this.resetWindowPositionDel = new lz.Delegate(this, "resetWindowPosition");
				this.resetWindowPositionDel.register(this.immediateparent, "onwidth");
				this.resetWindowPositionDel.register(this.immediateparent, "onheight");
			}
			]]>
		</method>
		<!---
			@keywords private
		-->
		<method name="setInitialFocus" args="e=null">
			<![CDATA[
			lz.Focus.setFocus(this.contentArea.inputArea.searchText);
			]]>
		</method>
		<!---
			@keywords private
			This method will reset the position of the window to its starting position. 
		 -->
		<method name="resetWindowPosition" args="e=null">
			<![CDATA[
			this.setAttribute("x", 25);
			this.setAttribute("y", 2);
			]]>
		</method>
		<!---
			@keywords private
			This method will update the {@link wcfFindAndReplaceDialog#findEnabled findEnabled} flag based on the 
			value of the {@link wcfBusinessObjectEditor editor's} {@link wcfBusinessObjectEditor#findEnabled findEnabled} flag.
			@param boolean fe The value of the {@link wcfBusinessObjectEditor editor's} {@link wcfBusinessObjectEditor#findEnabled findEnabled} flag.
		 -->
		<method name="updateFindEnabled" args="fe">
			<![CDATA[		
			if (fe != this.findEnabled) {
				this.setAttribute("findEnabled", fe);
			}
			]]>
		</method>
		
		<!---
			@keywords private
			This method is called when the current tool is closed or taken out of focus. It will close the find
			and replace dialog. 
			@param boolean active This parameter will be true if this tool was put into focus, and false otherwise. 
		 -->
		<method name="changeTool" args="active">
			<![CDATA[		
			if (this.isOpen && active == false) {
				this.closeWindow();
			}
			]]>
		</method>
		
		<!---
			@keywords private
			This method will update the {@link wcfFindAndReplaceDialog#searchTextExists searchTextExists} flag as the 
			text in the Find input box changes. 
			@param string txt The text in the Find input field.
		 -->
		<method name="updateSearchTextExists" args="txt">
			<![CDATA[	
			var doesSearchTextExist = (this.contentArea.inputArea.searchText.getText().length>0);		
			if (doesSearchTextExist != this.searchTextExists) {
				this.setAttribute("searchTextExists", doesSearchTextExist);
			}
			]]>
		</method>
		
		<!---
			@keywords private
			This method performs the "find" and the "replace" in the grid.
			
			The search starts from the cell which is currently in focus, or from the top of the grid if no cell is in focus. When a match is found, 
			the method calls {@link wcfFindAndReplace#highlightWord} to	highlight the found word (first unhighlighting the last "found" instance if one exists), 
			and will update the values of {@link wcfFindAndReplace#lastColFound lastColFound} and {@link wcfFindAndReplace#lastObjectFound lastObjectFound}.
			The method is also responsible for displaying the appropriate status messages to the user in the {@link wcfMessageLogger}. 
			
			When the the replace argument is passed in with a value of true, then the method will first replace the previously found text, if it exists, with the 
			new string before it performs the next search.
			
			@params boolean replace A flag indicating whether the method should replace the previously found text (if it exists) before performing a search. The value is false by default.
		-->
		<method name="findAndReplace" args="replace=false">
			<![CDATA[			
			//Clear message that is currently being displayed.
			messageLogger.clearStatusMessage();			
							
			var searchString = this.contentArea.inputArea.searchText.getText();			
			if (searchString == null || searchString == ""){				
				return;
			}
			var replaceText = this.contentArea.inputArea.replaceText.getText();
			var replaceFailed = false;
			
			if (this["lastFoundObjectDestroyedDel"] == null) {
				this.lastFoundObjectDestroyedDel = new lz.Delegate(this, "lastFoundObjectDestroyed");				
			}
			if (!this.matchCase) {
				searchString = searchString.toLowerCase();				
			}			
			var escapedSearchString = wcfRichTextEditorUtil.escapeString(searchString);
			
			var filteredObjects = this.objectGrid.oList.filteredObjects;
			
			var startRowObjIndex = 0;
			var startColIndex = 0;
			var startTextIndex = 0;
			var startFormattedTextIndex = 0;
			
			if (this.lastObjectFound != null) {
				//There's a search already in progress - continue from where the last match was found. 				
				//Find the object in the row the search is starting from	
				var found = false;
				var foundInEscaped = false;
				var o = null;
				var propertyName = null;
				var value = null;
				if (this.lastColFound.visible) {
					for (var i = 0; i < filteredObjects.length; i++) {
						if (this.lastObjectFound == filteredObjects[i]) {							
							o = this.lastColFound.getObject(this.lastObjectFound);				
							propertyName = this.lastColFound.getPropertyName(o);						
							value = o.getPropertyValue(propertyName);												
							if (!this.matchCase) {
								value = value.toLowerCase();
							}
							
							if (this.lastColFound.tagsRemoved) {
								value = wcfRichTextEditorUtil.removeTags(value);
								if (wcfRichTextEditorUtil.containsEscapedChar(value)) {
									foundInEscaped = true;
								}
							}
							var index = -1;	
							if (foundInEscaped) {
								index = value.indexOf(escapedSearchString, this.lastTextIndexFound);
							} else {
								index = value.indexOf(searchString, this.lastTextIndexFound);
							}
							
							if (index == this.lastTextIndexFound) {
								found = true;							
								startRowObjIndex = i;
								startColIndex = this.objectGrid.getColumnPosition(this.lastColFound);
								if (foundInEscaped) {
									startTextIndex = this.lastTextIndexFound + escapedSearchString.length;
								} else {
									startTextIndex = this.lastTextIndexFound + searchString.length;
								}
								if (this.lastColFound.tagsRemoved) {
									startFormattedTextIndex = this.lastFormattedTextEndIndexFound + 1;
									value = o.getPropertyValue(propertyName);
									if (!this.matchCase) {
										value = value.toLowerCase();
									}
									var indexes = null;
									if (foundInEscaped) {
										indexes = this.findInFormattedString(value, escapedSearchString, this.lastFormattedTextStartIndexFound);										
									} else {
										indexes = this.findInFormattedString(value, searchString, this.lastFormattedTextStartIndexFound);
									}
									 
									if (this.lastFormattedTextStartIndexFound != indexes[0] || this.lastFormattedTextEndIndexFound != indexes[1]) {
										found = false;
									}
								}								
							}
							break;
						}
					}
				}		
				if (!found) {					
					this.unhighlightCell(this.lastObjectFound, this.lastColFound);					
					this.lastFoundObjectDestroyedDel.unregisterAll();
					this.lastObjectFound = null;
					this.lastColFound = null;
					this.lastTextIndex = 0;
					this.lastFormattedTextStartIndexFound = 0;
					this.lastFormattedTextEndIndexFound = 0;					
					
				} else if (replace && replaceText != null && o != null) {
					var readOnly = o.getPropertyReadOnly(propertyName);
					//Check if the cell is editable
					if (!readOnly) {
						value = o.getPropertyValue(propertyName);
						var searchStringLength = searchString.length;
						if (this.lastColFound.tagsRemoved) {
							searchStringLength = escapedSearchString.length;
							replaceText = wcfRichTextEditorUtil.escapeString(replaceText);
						}
						
						//need to know if it was an escaped string
						if (this.lastColFound.tagsRemoved && !foundInEscaped) {
							value = wcfRichTextEditorUtil.escapeString(value);
							//The indexes are different now that the value is escaped.
							var compareVal = value;
							if (!this.matchCase) {
								compareVal = value.toLowerCase();
							}
							indexes = this.findInFormattedString(compareVal, escapedSearchString, this.lastFormattedTextStartIndexFound);
							this.lastFormattedTextStartIndexFound = indexes[0];
							this.lastFormattedTextEndIndexFound = indexes[1];
						}

						if (this.lastColFound.tagsRemoved && this.lastFormattedTextEndIndexFound - this.lastFormattedTextStartIndexFound + 1 != searchStringLength) {						
							messageLogger.updateMessageLinkDisplayText("STATUS", foundationResources.findAndReplaceMessageReplaceFormatted.string);
							replaceFailed = true;
							
						} else {
							var replaceIndex = this.lastTextIndexFound;							
								
							if (this.lastColFound.tagsRemoved) {
								replaceIndex = this.lastFormattedTextStartIndexFound;								
							}
							var newValue = value.substring(0, replaceIndex) + replaceText + value.substring(replaceIndex + searchStringLength);
							o.setPropertyValue(propertyName, null, newValue);
							startFormattedTextIndex = this.lastFormattedTextStartIndexFound + replaceText.length;
							startTextIndex = this.lastTextIndexFound + replaceText.length;
						}
					} else {
						messageLogger.updateMessageLinkDisplayText("STATUS", foundationResources.findAndReplaceMessageReplaceReadOnly.string);
						replaceFailed = true;
					}
				}
			
			}
			if (replaceFailed) {
				return;
			}
						
			if (this.lastObjectFound == null && this.objectGrid["currentCell"] != null) {
				startRowObjIndex = this.objectGrid.currentCell.row._objectIndex;				
				startColIndex = this.objectGrid.getColumnPosition(this.objectGrid.currentCell.column);	
			} else if (this.lastObjectFound != null) {
				this.unhighlightCell(this.lastObjectFound, this.lastColFound);
			}
			
						
			//Look through the row for a match - stop when we reach the row, column and text index that we started at
			var found = false;
			var curObjIndex = startRowObjIndex;
			var curColIndex = startColIndex;
			var curTextIndex = startTextIndex;
			var curFormattedTextIndex = startFormattedTextIndex;			
			var done = false;
			var first = true;
			while (true) {
				var curRowObj = this.objectGrid.oList.filteredObjects[curObjIndex];
				
				//Check each column of the row for a match
				while (curColIndex < this.objectGrid.columns.length) {
					//Check the value at the current row/column
					var column = this.objectGrid.columns[curColIndex];
					if (column.visible && column.editable && column.findable) {
						var o = column.getObject(curRowObj);
						var propertyName = column.getPropertyName(o);						
						var value = o.getPropertyValue(propertyName);

						if (!this.matchCase) {
							value = value.toLowerCase();
						}
						var index = -1;
						var foundInEscaped = false;
						
						if (column.tagsRemoved) {
							value = wcfRichTextEditorUtil.removeTags(value);							
							if (wcfRichTextEditorUtil.containsEscapedChar(value)) {
								foundInEscaped = true;
							}							
						} 						
						//Check if there is a match	
						var index = value.indexOf(searchString, curTextIndex);					
						if (foundInEscaped) {
							index = value.indexOf(escapedSearchString, curTextIndex);
						}
											
						if (index != -1) {							
							found = this.lastObjectFound != curRowObj || this.lastColFound != column || this.lastTextIndexFound != index;
							this.lastFoundObjectDestroyedDel.register(curRowObj, "beingDestroyed");
							this.lastObjectFound = curRowObj;
							this.lastColFound = column;
							this.lastTextIndexFound = index;
							if (column.tagsRemoved) {
								value = o.getPropertyValue(propertyName);
								if (!this.matchCase) {
									value = value.toLowerCase();
								}
								var indexes = null;
								if (foundInEscaped) {
									indexes = this.findInFormattedString(value, escapedSearchString, curFormattedTextIndex);
								} else {
									indexes = this.findInFormattedString(value, searchString, curFormattedTextIndex);
								}
								this.lastFormattedTextStartIndexFound = indexes[0];
								this.lastFormattedTextEndIndexFound = indexes[1];								
							} else {
								this.lastFormattedTextStartIndexFound = 0;
								this.lastFormattedTextEndIndexFound = 0;
							}	
							if (foundInEscaped) {
								this.highlightWord(curRowObj, column, index, escapedSearchString.length);
							} else {			
								this.highlightWord(curRowObj, column, index, searchString.length);
							}
							done = true;													
							break;
						}
					}
					if (!first && curObjIndex == startRowObjIndex && curColIndex == startColIndex) {
						done = true;
						break;
					}
					curColIndex++;
					curTextIndex = 0;
					curFormattedTextIndex = 0; 
					
				}

				if (done) {
					break;
				}
				curObjIndex++;
				curColIndex = 0;
				//Logic for wrapping
				if (curObjIndex >= filteredObjects.length) {
					if (this.wrapSearch) {
						curObjIndex = 0;
					} else {
						break;
					}
				}
				first = false;
			}

			if (!found) {
				if (this.wrapSearch && this["lastColFound"] != null && this["lastObjectFound"] != null) {		
					//Searched the whole grid, and only found one match
					messageLogger.updateMessageLinkDisplayText("STATUS", foundationResources.findAndReplaceMessageOneMatch.string);
				} else {
					//Searched the whole grid, and didn't find any matches.					
					messageLogger.updateMessageLinkDisplayText("STATUS", foundationResources.replaceValues("findAndReplaceMessageNoMatch", [this.contentArea.inputArea.searchText.getText()]));
					this.objectGrid.currentCell = null;

					this.lastFoundObjectDestroyedDel.unregisterAll();
					this.lastObjectFound = null;
					this.lastColFound = null;
					this.lastTextIndex = 0;	
					this.lastFormattedTextStartIndexFound = 0;
					this.lastFormattedTextEndIndexFound = 0;									
				}

			}
			]]>
		</method>
		
		<!---
			This method will look for a string in an HTML formatted string. It will return the start and end indexes of the match in the 
			formatted string. If no match is found, this method will return null. 
			
			@param string value The property value including any HTML tags. 
			@param string searchString The value that is being searched for in the property. 
			@param number startOfSearchIndex The index from where to being the search. 
			@return Array 	An array containing two numbers. The first is the starting index of the found string in the formatted property value. The second is the 
							ending index of the found string in the formatted property value. If no match is found, this method will return null.
		-->
		<method name="findInFormattedString" args="value, searchString, startOfSearchIndex">
			<![CDATA[
			var indexIntoSearchString = 0;
			var startIndex = 0;
			var endIndex = 0;
			
			for (var curIndex = startOfSearchIndex; curIndex < value.length; curIndex++) {
				var c = value.charAt(curIndex);
				if (c == "<") {
					curIndex = value.indexOf(">",curIndex);
				} else if (c == searchString.charAt(indexIntoSearchString)) {
					if (indexIntoSearchString == 0) {						
						startIndex = curIndex;						
					} 					
					indexIntoSearchString++;
					if (indexIntoSearchString == searchString.length) {
						endIndex = curIndex;						
						return [startIndex, endIndex];	
					}
				} else if (indexIntoSearchString > 0) {					
					indexIntoSearchString = 0;					
					curIndex = startIndex;
				}
			}
			return null;	
			]]>
		</method>
		
		<!---
			This method find all occurances of a specified string in the grid and replaces it with another
			string specified by the user.
		-->
		<method name="replaceAll">
			<![CDATA[
			//Clear message that is currently being displayed.
			messageLogger.clearStatusMessage();					
			if (this.lastObjectFound != null) {
				this.unhighlightCell(this.lastObjectFound, this.lastColFound);
			}	
			
			var searchString = this.contentArea.inputArea.searchText.getText();
			
			if (searchString == null || searchString == ""){				
				return;
			}
			
			if (!this.matchCase) {
				searchString = searchString.toLowerCase();			
			}
			var escapedSearchString = wcfRichTextEditorUtil.escapeString(searchString);
			
			var replaceText = this.contentArea.inputArea.replaceText.getText();
			var escapedReplaceText = wcfRichTextEditorUtil.escapeString(replaceText);
				
			var filteredObjects = this.objectGrid.oList.filteredObjects;
			
			//Count the matches made
			var numReplaced = 0;
			
			for (var curObjIndex = 0; curObjIndex < filteredObjects.length; curObjIndex++) {
				var curRowObj = filteredObjects[curObjIndex];
				
				//Check each column of the row for a match
				for (var curColIndex = 0; curColIndex < this.objectGrid.columns.length; curColIndex++) {		
					//Check the value at the current row/column
					var column = this.objectGrid.columns[curColIndex];

					if (column.visible && column.editable && column.findable) {
						var o = column.getObject(curRowObj);
						var propertyName = column.getPropertyName(o);
						var readOnly = o.getPropertyReadOnly(propertyName);
												
						if (!readOnly) {
							//Check if there is a match and do all the replacements in that cell
							var value = o.getPropertyValue(propertyName);
														
							if (!this.matchCase) {
								value = value.toLowerCase();
							}
							if (column.tagsRemoved) {
								var curTextIndex = 0;
								var isEscaped = wcfRichTextEditorUtil.containsEscapedChar(value);
								var indexes = null;									
								if (!isEscaped) {
									value = wcfRichTextEditorUtil.escapeString(value);									
								}
								indexes = this.findInFormattedString(value, escapedSearchString, curTextIndex);								
								while (indexes != null) {
									var startIndex = indexes[0];
									var endIndex = indexes[1];								
									if (endIndex - startIndex + 1 == escapedSearchString.length) {
										value = o.getPropertyValue(propertyName); //need to reset the capitalization
										var newValue = null;
										if (!isEscaped) {
											value = wcfRichTextEditorUtil.escapeString(value);	
											isEscaped = true;								
										}
										newValue = value.substring(0, startIndex) + escapedReplaceText + value.substring(startIndex+escapedSearchString.length);										
										o.setPropertyValue(propertyName, null, newValue);
										curTextIndex = startIndex + escapedReplaceText.length;
										
										value = newValue;		
										if (!this.matchCase) {
											value = value.toLowerCase();
										}	
										numReplaced++;						
									} else {
										curTextIndex = endIndex + 1;
									}
									indexes = this.findInFormattedString(value, escapedSearchString, curTextIndex);
								}
								
							
							} else { 
							
								var curTextIndex = 0;
								var index = value.indexOf(searchString, curTextIndex);
	
								while (index != -1) {
									value = o.getPropertyValue(propertyName); //need to reset the capitalization
									var newValue = value.substring(0, index) + replaceText + value.substring(index+searchString.length);
									o.setPropertyValue(propertyName, null, newValue);
	
									curTextIndex = index + replaceText.length;
	
									value = newValue;
									if (!this.matchCase) {
										value = value.toLowerCase();
									}
	
									index = value.indexOf(searchString, curTextIndex);					
									numReplaced++;
	
								}//while
							}
						}//if !readOnly
					}
				}//columns	
			}//rows

			messageLogger.updateMessageLinkDisplayText("STATUS", foundationResources.replaceValues("findAndReplaceMessageReplaceAll", [numReplaced]));			
			
			]]>
		</method>
		
		<!---
			@keywords private
			This method is called when the last object found is released. It will reset the find and
			replace dialog.
		-->
		<method name="lastFoundObjectDestroyed" args="e">
			<![CDATA[
			this.lastObjectFound = null;
			this.resetSearch();
			]]>
		</method>
		
		
		<!---
			@keywords private
			This method is called when the find and replace dialog is closed. If there is currently a match highlighted in the cell then focus will go 
			to that cell. 
		-->
		<method name="closeWindow">
			<![CDATA[
				this.updateFocusDel.unregisterAll();	
				super.closeWindow();
				if (this.lastObjectFound != null) {
					var o = this.lastColFound.getObject(this.lastObjectFound);
					var cells = this.objectGrid.locateRow(this.lastObjectFound).cells;
					for (var i = 0; i < cells.length; ++i) {
						var cell = cells[i];
						if (cell.column == this.lastColFound && cell["editor"]) {					
							lz.Focus.setFocus(cell.editor);							
							break;
						}
					}
				}
				this.resetSearch();
				this.setAttribute("objectGrid", null);
				this.setAttribute("model", null);
				this.contentArea.inputArea.searchText.setText("");
				this.contentArea.inputArea.replaceText.setText("");
				this.changeToolDel.unregisterAll();
				this.resetSearchDel.unregisterAll();
				this.updateFindEnabledDel.unregisterAll();							
			]]>
		</method>
		
		<!---
			@keywords private
			This method resets the search when focus has been taken from the dialog.  
		-->
		<method name="updateFocus" args="e=null">
			<![CDATA[	
			if (!wcfViewUtil.containsView(this, lz.Focus.getFocus())) {
				this.resetSearch();
			}
			]]>
		</method>
		
		<!---
			@keywords private
			This method will reset the search so that next time the find begins it starts from the current location and does not 
			have recollection of previous searches. 
		-->
		<method name="resetSearch" args="e=null">
			<![CDATA[		
			if (this.lastObjectFound != null) {
				this.unhighlightCell(this.lastObjectFound, this.lastColFound);
			}
			if (this["model"] != null && this.model["activeSelectionView"] != null && this.model.activeSelectionView["isFindEnabled"] != null && this.model.activeSelectionView.isFindEnabled(null)) {
				this.setAttribute("objectGrid", this.model.activeSelectionView);
			}
			else {
				this.setAttribute("objectGrid", null);
			}	
			this.setAttribute("lastColFound", null);
			this.setAttribute("lastObjectFound", null);
			this.setAttribute("lastTextIndexFound", 0);
			this.setAttribute("lastFormattedTextStartIndexFound", 0);
			this.setAttribute("lastFormattedTextEndIndexFound", 0);
			
			if (this["lastFoundObjectDestroyedDel"]) {
				this.lastFoundObjectDestroyedDel.unregisterAll();
			}
			messageLogger.clearStatusMessage();
			]]>
		</method>
		
		<!--- 
			@keywords private
			Highlight the matched text in the grid cell. This method delegates the job of formatting the text to the
			{@link wcfGridColumn#highlightWordInCell} method. 
			@param wcfModelObject rowObject The object of the {@link wcfGridRow row} that contains the next match. 
			@param wcfGridColumn column The column that contains the match.  
			@param number index The position of the match to highlight. 
			@param number wordSize The length of the match to highlight.
		-->
		<method name="highlightWord" args="rowObject, column, index, wordSize">
			<![CDATA[
			this.objectGrid.showObjectInView(rowObject);
			column.show();
			var cell = this.objectGrid.locateRow(rowObject).getCell(column);
			this.objectGrid.currentCell = cell;
			column.highlightWordInCell(cell, index, wordSize);						
			
			]]>
		</method>	
			
		<!--- 
			@keywords private
			Removes the formatting from a cell. 
			@param wcfModelObject rowObject The object of the {@link wcfGridRow row} that needs to be unformatted. 
			@param wcfGridColumn column The column that needs to be unformatted. 
		-->
		<method name="unhighlightCell" args="rowObject, column">
			<![CDATA[
			var row = this.objectGrid.locateRow(rowObject);
			if (row) {
				var cell = row.getCell(column);
				column.unhighlightCell(cell);
			}
			]]>
		</method>
		
		<!--- @keyword private -->
		<method name="destroy">
			<![CDATA[
			if (this["updateFindEnabledDel"] != null) {
				this.updateFindEnabledDel.unregisterAll();
				delete this.updateFindEnabledDel;
			}
			if (this["updateSearchTextExistsDel"] != null) {
				this.updateSearchTextExistsDel.unregisterAll();
				delete this.updateSearchTextExistsDel;
			}			
			if (this["resetSearchDel"] != null) {
				this.resetSearchDel.unregisterAll();
				delete this.resetSearchDel;
			}
			if (this["changeToolDel"] != null) {
				this.changeToolDel.unregisterAll();
				delete this.changeToolDel;
			}
			if (this["resetWindowPositionDel"] != null) {
				this.resetWindowPositionDel.unregisterAll();
				delete this.resetWindowPositionDel;
			}
			if (this["lastFoundObjectDestroyedDel"] != null) {
				this.lastFoundObjectDestroyedDel.unregisterAll();
				delete this.lastFoundObjectDestroyedDel;
			}
			if (this["updateFocusDel"] != null) {
				this.updateFocusDel.unregisterAll();
				delete this.updateFocusDel;
			} 
			
			super.destroy();
			]]>
		</method>
	
		<view name="contentArea" placement="content">
			<view name="labels">				
				<text text="${foundationResources.findAndReplaceFindLabel.string}" align="right"/>				
				<text text="${foundationResources.findAndReplaceReplaceLabel.string}" align="right"/>				
				<!-- The height of the text is 3 pixels less than the text field so need a bigger gap -->
				<simplelayout axis="y" spacing="13" />
			</view>
			<view name="inputArea">
				<wcfInputText name="searchText">				
					<handler name="ontext">			
						parent.parent.parent.resetSearch();
					</handler>
				</wcfInputText>
				<wcfInputText name="replaceText" />	
				<view name="findOptions">
					<simplelayout axis="x" spacing="10" />
					<wcfBaseCheckbox name="matchCase" text="${foundationResources.findAndReplaceMatchCaseLabel.string}" value="false"></wcfBaseCheckbox>
					<wcfBaseCheckbox name="wrap" text="${foundationResources.findAndReplaceWrapLabel.string}" value="true"></wcfBaseCheckbox>
				</view>
				<simplelayout axis="y" spacing="10" />
			</view>
			<simplelayout axis="x" spacing="5" />
		</view>
		
		<view placement="footer" name="viewButtons">
			<simplelayout axis="x" />
			<wcfButton name="frFindButton" text="${foundationResources.findAndReplaceFindButton.string}" onclick="parent.parent.findAndReplace(false);" isdefault="true" enabled='${parent.parent.findEnabled &amp;&amp; parent.parent.searchTextExists}'/>
			<wcfButton name="frReplaceButton" text="${foundationResources.findAndReplaceReplaceButton.string}" onclick="parent.parent.findAndReplace(true)" enabled='${parent.parent.findEnabled &amp;&amp; parent.parent.searchTextExists}'/>
			<wcfButton name="frReplaceAllButton" text="${foundationResources.findAndReplaceReplaceAllButton.string}" onclick="parent.parent.replaceAll()" enabled='${parent.parent.findEnabled &amp;&amp; parent.parent.searchTextExists}'/>
			<wcfButton name="frClose" text="${foundationResources.closeButtonText.string}" onclick="parent.parent.closeWindow();" />
		</view>
	
	</wcfDialog>
</library>	