<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2007, 2012 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->
<library>

	<!--- 
		This class provides a basic view for a flow diagram in flow builder.
		@keywords private 
	-->
	<class name="wcfFlow">
		<!--- @keywords private -->
		<attribute name="flowBuilder" value="null" />

		<!--- @keywords private -->
		<attribute name="selectedElements" value="${[]}"/>
		<!--- @keywords private -->
		<attribute name="selectBox" value="null"/>

		<!--- @keywords private -->
		<attribute name="editableFlow" value="true" type="boolean"/>

		<!--- @keywords private -->
		<attribute name="o" value="null" setter="this.setModelObject(o)"/>
		<!--- @keywords private -->
		<attribute name="flowPath" value="null"/>

		<attribute name="flowPathClass" type="string" value="wcfFlowPath" />
 
		<handler name="oninit">
			<![CDATA[
			this.selectBox = new lz.wcfMultiSelectBox(canvas, {selectArea: parent, callback: this});

			if (lz[flowPathClass]) {
				this.flowPath = new lz[this.flowPathClass](this.mainflow.flowPathParent);
			} else {
				this.flowPath = wcfDefinitionLoader.getDefinition(this.flowPathClass, this.mainflow.flowPathParent);
			}
			
			this.updateFlow();
			wcfCanvasMenu.addView(this);
			]]>
		</handler>
		
		<!--- @keywords private -->
		<method name="destroy">
			<![CDATA[
			this.releaseModelObjectDel.unregisterAll();
			delete this.releaseModelObjectDel;
			super.destroy();
			]]>
		</method>
		
		<!---
			@keywords private
			Set the model object for this tree node to the specified object.
			@param wcfModelObject newObject: the new object
		-->
		<method name="setModelObject" args="newObject">
			<![CDATA[
			if (newObject != this["o"]) {
			
				if (this["o"] && this.flowBuilder && this.flowBuilder.propertiesPane["o"] && this.flowBuilder.propertiesPane["o"] != this["o"]) {
					this.o["viewState"] = this.flowBuilder.propertiesPane.o.objectId;
				}
			
				if (this["releaseModelObjectDel"]) {
					this.releaseModelObjectDel.unregisterAll();
				}
				else {
					this.releaseModelObjectDel = new lz.Delegate(this, "releaseModelObject");
				}

				this.o = newObject;
				
				if (this["o"]) {
					this.releaseModelObjectDel.register(this.o, "beingDestroyed");
					
					if(this["mainflow"]) {
						this.mainflow.startElement.setModelObject(this.o);
						if (this.o["viewState"] && "startElement" != this.o["viewState"]) {
							if (wcfFlowUtils.getElementObject(this.o, this.o.viewState) == null) {
								this.o["viewState"] = "";
							}
						}
						if (!this.o["viewState"] || "startElement" == this.o["viewState"]) {
							var setFocusToFirstInput = !this.o["viewState"];
							this.mainflow.startElement.loadProperties();
							
							if(setFocusToFirstInput && this.flowBuilder) {
								this.flowBuilder.resetPropertiesView();
							}
						}
					}
				}

				this.updateFlow();
			}
			]]>
		</method>
		
		<!---
			@keywords private
			This method releases the model object from this properties view by setting {@link wcfObjectProperties#o} to null.
		-->
		<method name="releaseModelObject" args="e=null">
			<![CDATA[
			this.setAttribute("o", null);
			]]>
		</method>

		<!--- @keywords private -->
		<method name="updateFlow" args="e=null">
			<![CDATA[
			if (this["updateFlowDel"]) {
				this.updateFlowDel.unregisterAll();
			}
			else {
				this.updateFlowDel = new lz.Delegate(this, "updateFlow");
			}
			
			if(this["flowPath"]) {
				if (this["o"]) {
					if (this.o.newObject) {
						this.updateFlowDel.register(this.o, "onchildObjects");
					}
					else {
						this.updateFlowDel.register(this.o, "onGetChildrenServiceCompleted");
					}

					var flowPathObj = this.o.getObject("FlowElement");
					this.flowPath.setAttribute("o", flowPathObj);
				}
				else {
					this.flowPath.setAttribute("o", null);
				}
			}
			]]>
		</method>

		<!--- @keywords private -->
		<method name="loadProperties" args="element">
			<![CDATA[
				if (element instanceof lz.wcfStartElement) {
					this.flowBuilder.propertiesPane.loadProperties(element.o, this.flowBuilder.generalPropertiesClass);
					this.o["viewState"] = "startElement";
				}
				else {
					this.flowBuilder.propertiesPane.loadProperties(element.o, null);
					this.o["viewState"] = element.o.objectId;
				}
			]]>
		</method>

		<!--- @keywords private -->
		<method name="hideProperties">
			<![CDATA[
				this.flowBuilder.propertiesPane.hideProperties();
			]]>
		</method>

		<!--- @keywords private -->
		<method name="selectAreaCreated">
			<![CDATA[
			var selectBoxX = this.selectBox.getAttributeRelative("x", canvas);
			var selectBoxY = this.selectBox.getAttributeRelative("y", canvas);
			var selectBoxWidth = this.selectBox.width;
			var selectBoxHeight = this.selectBox.height;
			
			this.unselectAll();
			this.selectSubviews(this, selectBoxX, selectBoxY, selectBoxX+selectBoxWidth, selectBoxY+selectBoxHeight);
			]]>
		</method>

		<!--- @keywords private -->
		<method name="selectSubviews" args="v, selectBoxX, selectBoxY, selectBoxToX, selectBoxToY">
			<![CDATA[
				for (var i = 0; i < v.subviews.length; i++) {
					var e = v.subviews[i];
					if (e instanceof lz.wcfFlowElement) {
						var eX = e.MainView.iconcontentview.iconcontent.getAttributeRelative("x", canvas);
						var eY = e.MainView.iconcontentview.iconcontent.getAttributeRelative("y", canvas);
						
						var eWidth = e.MainView.iconcontentview.iconcontent.width;
						var eHeight = e.MainView.iconcontentview.iconcontent.height;
						
						if (eX > selectBoxX && eY > selectBoxY && eX < selectBoxToX && eY < selectBoxToY) {
							if(e.visible) {
								e.select();
							}
						}
						else if ((eX+eWidth) > selectBoxX && eY > selectBoxY && (eX+eWidth) < selectBoxToX && eY < selectBoxToY) {
							if(e.visible) {
								e.select();
							}
						}
						else if (eX > selectBoxX && (eY+eHeight) > selectBoxY && eX < selectBoxToX && (eY+eHeight) < selectBoxToY) {
							if(e.visible) {
								e.select();
							}
						}
						else if ((eX+eWidth) > selectBoxX && (eY+eHeight) > selectBoxY && (eX+eWidth) < selectBoxToX && (eY+eHeight) < selectBoxToY) {
							if(e.visible) {
								e.select();
							}
						}
					}
					
					selectSubviews(e, selectBoxX, selectBoxY, selectBoxToX, selectBoxToY);
				}
			]]>
		</method>

		<!--- @keywords private -->
		<method name="isParentElement" args="parentElement, element">
			<![CDATA[
				var ancestor = element.parentFlowPath.parentFlowElement;
				while (ancestor) {
					if (ancestor == parentElement) {
						return true;
					}
					ancestor = ancestor.parentFlowPath.parentFlowElement;
				}
				return false;
			]]>
		</method>

		<!--- @keywords private -->
		<method name="getCommonParentElement" args="element1, element2">
			<![CDATA[
				var ancestor = element1;
				while (ancestor) {
					if (this.isParentElement(ancestor, element2)) {
						return ancestor;
					}
					ancestor = ancestor.parentFlowPath.parentFlowElement;
				}
				return null;
			]]>
		</method>

		<!--- @keywords private -->
		<method name="selected" args="element">
			<![CDATA[
	            for (var i = 0; i < this.selectedElements.length; i++) {
	            	if (this.selectedElements[i].parent != element.parent) {
						var commonParentElement = this.getCommonParentElement(this.selectedElements[i], element);

					 	if (commonParentElement != null) {
							commonParentElement.unselectChildren();

							if (commonParentElement != this.selectedElements[i]) {
								commonParentElement.select();
							}
							return;
						}
	            	}
	            }

				this.selectedElements.push(element);

				var comparator = function (o1,o2) {
					if (o1.x < o2.x) {
						return -1;
					}
					else if (o1.x > o2.x) {
						return 1;
					}
					else {
						return 0;
					}
				}
				this.selectedElements.sort(comparator);
			]]>
		</method>

		<!--- @keywords private -->
		<method name="unselected" args="element">
			<![CDATA[
				if (!this._unselectAllInvoked) {
		            for (var i = 0; i < this.selectedElements.length; i++) {
		            	if (this.selectedElements[i] == element) {
		            		this.selectedElements[i] = null;
		            		this.selectedElements.splice(i, 1);
		            		return;
		            	}
		            }
	            }
			]]>
		</method>

		<!--- @keywords private -->
		<method name="unselectAll">
			<![CDATA[
				this._unselectAllInvoked = true;
				while(this.selectedElements.length > 0) {
					var e = this.selectedElements.pop();
					e.unselect();
				}
				this._unselectAllInvoked = false;
			]]>
		</method>

		<simplelayout axis="y"/>
		<view name="topPadding" height="50"/>
		<view name="mainflow">
			<view name="flowPathParent" x="42"/>
			<wcfStartElement name="startElement" parentFlow="${classroot}" x="15" y="6"/>
			<view name="exitIcon" resource="wcfFlowBuilderExit" y="6" x="${parent.flowPathParent.x + parent.flowPathParent.width - 5}"/>
			<view width="25" x="${parent.exitIcon.x + parent.exitIcon.width}"/>
		</view>
		<view name="bottomPadding" height="15"/>
	</class>

	<!--- @keywords private -->
	<node id="wcfFlowUtils">
		<!--- @keywords private -->
		<method name="getParentFlow" args="element">
			<![CDATA[
				var ancestor = element;
				while (ancestor != null && ancestor != canvas) {
					if(ancestor instanceof lz.wcfFlow) {
						return ancestor;
					}
					ancestor = ancestor.parent;
				}
				return null;
			]]>
		</method>

		<!--- @keywords private -->
		<method name="getParentFlowPath" args="element">
			<![CDATA[
				var ancestor = element;
				while (ancestor != null && ancestor != canvas) {
					if(ancestor instanceof lz.wcfFlowPath) {
						return ancestor;
					}
					ancestor = ancestor.parent;
				}
				return null;
			]]>
		</method>
		
		<!--- @keywords private -->
		<method name="getParentFlowElement" args="element">
			<![CDATA[
				var ancestor = element;
				while (ancestor != null && ancestor != canvas) {
					if(ancestor instanceof lz.wcfFlowElement) {
						return ancestor;
					}
					ancestor = ancestor.parent;
				}
				return null;
			]]>
		</method>
		
		<!--- @keywords private -->
		<method name="getElementDepth" args="element">
			<![CDATA[
				var depth = 0;
				var ancestor = element;
				while (ancestor != null && ancestor != canvas) {
					if(ancestor instanceof lz.wcfFlow) {
						break;
					}
					else if(ancestor instanceof lz.wcfFlowPath) {
						depth++;
					}
					ancestor = ancestor.parent;
				}
				return depth;
			]]>
		</method>
		
		<!---
			@keywords private

			Provides an array of child objects sorted by their sequence number as defined by their <code>sequence</code>
			property.
			
			@param wcfModelObject parentObj Required parent object from which child objects will be searched.
			@returns wcfModelObject[] An array of child objects of the <code>parentObj</code> sorted by sequence number.
		-->
		<method name="getSortedElements" args="parentObj">
			<![CDATA[
				var sequencePropertyName = "sequence";
				var elements = [];
				if(parentObj) {
					elements = parentObj.getObjects("FlowElement");

					var comparator = function (o1, o2) {
						var seq1 = o1.getPropertyValue(sequencePropertyName);
						var seq2 = o2.getPropertyValue(sequencePropertyName);
						return Number(seq1) - Number(seq2);
					}
					
					elements.sort(comparator);
				}
				return elements;
			]]>
		</method>
		
		<!---
			@keywords private

			Provides an unique sequence number for
			@param wcfModelObject parentObj Required parent object from which child objects will be searched. The returned sequence number
								  will be valid for use for a child object for this parent.
			@param wcfModelObject referenceObj Optional reference child object of the given <code>parentObj</code>. If provided, the sequence
								  number returned will be a sequence number smaller than the sequence number of this reference object.
								  If not provided, the sequence number returned will be the larger than the current child object
								  with the largest sequence.
			@returns string A new, unique sequence number for a child object of the given <code>parentObj</code>. If <code>parentObj</code>
							is missing, "-1" is returned.
		-->
		<method name="getNextSequenceNumber" args="parentObj, referenceObj=null">
			<![CDATA[
				var sequencePropertyName = "sequence";
				var increment = 1000;

				if(parentObj) {
					var childObjects = parentObj.getObjects("FlowElement");
					if(childObjects.length == 0) {
						return String(increment);
					}

					// get all sequence numbers					
					var sequences = [];
					for (var i = 0; i < childObjects.length; i++) {
						var seqProp = childObjects[i].getProperty(sequencePropertyName);
						if(seqProp) {
							sequences.push(Number(seqProp.value));
						}
					}
					// sort sequence numbers
					var comparator = function (x, y) {
						return x - y;
					}
					sequences.sort(comparator);

					// no reference object, so return the last sequence number + 1000
					if((typeof(referenceObj) == "undefined") || !referenceObj) {
						return String(sequences[sequences.length - 1] + increment);
					}
					else {
						var seqProp = referenceObj.getProperty(sequencePropertyName);
						if(seqProp) {
							var referenceSeq = Number(seqProp.value);
							for (var i = 0; i < sequences.length; i++) {
								if(sequences[i] == referenceSeq) {
									if(i == 0) {
										return String(referenceSeq / 2);
									}
									else {
										return String((sequences[i-1] + referenceSeq) / 2);
									}
								}
							}
						}
					}
				}
				return "-1";
			]]>
		</method>
		
		<!---
			@keywords private

			Locates the element object with the specified object ID.
			@param wcfModelObject parentObject Required parent object from which child objects will be searched.
			@param string objectId Object ID
			@returns wcfModelObject The element object, or null if not found.
		-->
		<method name="getElementObject" args="parentObject, objectId">
			<![CDATA[
			var elementObject = null;
			var childObjects = parentObject.getObjects("FlowElement");
			for (var i = 0; i < childObjects.length; i++) {
				var o = childObjects[i];
				if (o.objectId == objectId) {
					elementObject = o;
					break;
				}
				elementObject = this.getElementObject(o, objectId);
				if (elementObject != null) {
					break;
				}
			}
			return elementObject;
			]]>
		</method>
	</node>

</library>
