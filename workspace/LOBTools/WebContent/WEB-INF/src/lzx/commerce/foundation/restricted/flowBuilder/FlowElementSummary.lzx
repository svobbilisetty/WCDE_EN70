<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2007, 2010 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->
<library>

	<!---
		<p>This class is the base class for the summary view for all flow element objects. The summary view of a flow
		element is used to display text in the main flow diagram in Flow Builder beneath the flow element icon. Its purpose is
		to provide the business user a quick summary or overview of the options that have been selected in the flow
		element properties.</p>
		
		<p>New classes that extend from this base class must implement the <code>updateSummary</code> method. The method
		should perform the logic required to determine the appropriate summary text for the business
		user. The <code>setSummaryText<code> method must be called with the summary text before the
		<code>updateSummary</code> method completes.</p>

		<p>Any number of child instances of {@link wcfFlowSummaryParam} can be created to reference child objects
		or properties of the flow element. The <code>updateSummary</code> method can then obtain the values
		from the <code>{@link wcfFlowElementSummary#resolvedParams resolvedParams}</code> map referencing the
		<code>wcfFlowSummaryParam</code> by name.</p>
		
		<p>The following is an example of a new summary view that looks at the <code>supportLevel</code> property
		of the Level of Support campaign element. If the value is not blank, set the summary text to show the value.
		@START_CODE
			<class name="extCustomLevelOfSupportSummary" extends="wcfFlowElementSummary">
				<wcfFlowSummaryParam name="support" propertyName="supportLevel"/>
			
				<method name="updateSummary" args="e=null">
					<![CDATA[
						var summary = "";
						if((this.resolvedParams["support"] != null) && (this.resolvedParams["support"] != "")) {
							summary = "Support level is " + this.resolvedParams["support"]);
						}
						this.setSummaryText(summary);
					]]>
				</method>
			</class>
		@END_CODE
		</p>
		
		<p>Implementations should not be instantiated directly. It should be specified in the
		{@link wcfFlowElementObjectDefinition#summaryClass summaryClass} attribute of a
		{@link wcfFlowElementObjectDefinition flow element object definition}.</p>
		
		@keywords abstract
	-->
	<class name="wcfFlowElementSummary" width="${parent.width}">
		<!---
			Reference to the instance of wcfFlowElementObjectDefinition that is being shown by the summary
			@keywords private 
		-->
		<attribute name="o"/>
		<!---
			Array of {@link wcfFlowSummaryParams} for use in a summary
			@keywords private
		-->
		<attribute name="summaryParams" value="${[]}"/>
		<!---
			Map containing the resolved values of the defined child {@link wcfFlowSummaryParam summary parameters}.
			The key of the map is based on the name of the summary parameter. The value will be a string if the
			parameter resolves to one value. Otherwise, the value will be an array of strings.
		-->
		<attribute name="resolvedParams" value="${{}}"/>
		<!---
			Delegate that calls {@link wcfFlowElementSummary#updateSummary}. Implementations of this
			class may register any events to this delegate if the summary text needs to be refreshed
			when the event occurs.
		-->
		<attribute name="updateSummaryDel"/>
	
		<!--- @keywords private -->
		<method name="init">
			<![CDATA[
				super.init();
				wcfCanvasMenu.addView(this);
				if (typeof(updateSummaryDel) == 'undefined') {
					this.updateSummaryDel = new lz.Delegate(this, 'updateSummary');
				}
				this.setupParamsDel = new lz.Delegate(this, "setupParametersDelegate");
				wcfCallbackUtil.addDeferredCallback(this.setupParamsDel, null, wcfCallbackUtil.PRIORITY_FOREGROUND);
			]]>
		</method>
		
		<!--- @keywords private -->
		<method name="destroy">
			<![CDATA[
				delete this.setupParamsDel;
				if(this["registerParamsDel"]) {
					this.registerParamsDel.unregisterAll();
					delete this.registerParamsDel;
				}
				this.updateSummaryDel.unregisterAll();
				super.destroy();
			]]>
		</method>
		
		<!---
			Sets up a delegate to listen on the various object events. When events are triggered,
			the delegate will call the <code>resolveAndUpdateSummary</code> method.
			@keywords private
		-->
		<method name="setupParametersDelegate" args="e=null">
			<![CDATA[
				if (!this["registerParamsDel"]) {
					this.registerParamsDel = new lz.Delegate(this, "resolveAndUpdateSummary");
				}
				this.resolveAndUpdateSummary();
			]]>
		</method>

		<!---
			Goes through each defined wcfFlowSummaryParam and tries to resolve its value
			before calling the <code>updateSummary</code> method.
			@keywords private
		-->
		<method name="resolveAndUpdateSummary" args="e=null">
			<![CDATA[
				this.registerParamsDel.unregisterAll();
				this.registerParamsDel.register(this, "ono");
				if (this.o) {
					this.registerParamsDel.register(this.o, "propertyChanged");
					this.registerParamsDel.register(this.o, "onchildObjects");
					this.registerParamsDel.register(this.o, "onreferences");
	
					// if this object has children, listen for property changes on the children too
					var isVersionObject = this.o.getIsVersionObject();
					for (var key in this.o.childObjectMap) {
						var o = this.o.childObjectMap[key];
						if (isVersionObject || !o.getIsVersionObject()) {
							this.registerParamsDel.register(o, "propertyChanged");
						}
					}
	
					for (var i = 0; i < this.summaryParams.length; i++) {
						var param = this.summaryParams[i];
						var value = null;
						var values = param.getValues(this.o);
	
						if (values.length > 1) {
							value = values;
						}
						else if (values.length == 1) {
							value = values[0];
						}
	
						if (value == null) {
							value = "";
						}
						this.resolvedParams[param.name] = value;
					}
					
					if (this["summary"]) {
						this.updateSummary();
					}
				}
				else {
					for (var i = 0; i < this.summaryParams.length; i++) {
						this.summaryParams[i].unregisterObjectViews();
					}
					this.resolvedParams = {};
				}
			]]>
		</method>
		
		<!---
			Returns a string of resolved values for the specified summary parameter. The values are obtained from
			the {@link wcfFlowElementSummary#resolvedParams resolvedParams} map.
			
			@param String param The name of the {@link wcfFlowSummaryParam summary parameter}
			@return String If the summary parameter is resolved and is a single value, the value is returned. If the summary parameter
				resolves to an array, a comma-separated list of all the values is returned. An empty string is returned if the summary
				parameter is unresolved.
		-->
		<method name="getValuesList" args="param">
			<![CDATA[
				var valueText = "";
				var value = this.resolvedParams[param];
				if(value != null) {
					if(typeof(value) == "object") {
						var names = "";
						for(var i = 0; i < value.length; i++) {
							if(value[i] != "") {
								names += value[i];
								if(i != value.length - 1) {
									names += ", ";
								}
							}
						}
						valueText = names;
					}
					else {
						valueText = value;
					}
				}
				return valueText;
			]]>
		</method>

		<!---
			<p>Updates the summary text. This method is called when the defined properties on the
			object have changed or when the object's child and reference objects are updated.
			Campaign element summary classes should override this method and call the <code>setSummaryText</code>
			method.</p>
			
			@param Object e An object passed by the OpenLaszlo event system. This value should be ignored.
		-->
		<method name="updateSummary" args="e=null"/>

		<wcfTooltip name="tooltip" text=""/>				
		<text name="summary" text="" fontsize="11" multiline="true" width="${parent.width}">
			<handler name="oninit">
				<![CDATA[
				classroot.updateSummary();
				]]>
			</handler>
		</text>
		
		<!---
			<p>This method sets the value of the summary text. 
			
			@param string t The desired summary text.
		-->
		<method name="setSummaryText" args="t">
			<![CDATA[
				this.summary.setAttribute('text', t);
			]]>
		</method>
		
		<!---
			<p>This method sets the tooltip of the summary text. 
			
			@param string t The desired summary text.
		-->
		<method name="setTooltipText" args="t">
			<![CDATA[
				this.tooltip.setAttribute('text', t);
			]]>
		</method>
	</class>

	<!---
		<p>Declares a summary parameter that will be resolved for use in the summary view. Instances
		of wcfFlowSummaryParam may only be declared as immediate children of a class extending from
		{@link wcfFlowElementSummary}.</p>
		
		<p>See {@link wcfValueResolver} for more information, including all possible options of using this class.</p>
	-->
	<class name="wcfFlowSummaryParam" extends="wcfValueResolver">
		<!--- @keywords private -->
		<attribute name="currentChildObjects" value="${[]}"/>

		<!--- @keywords private -->
		<method name="init">
			<![CDATA[
				super.init();
				var params = parent["summaryParams"];
				if (!params) {
					params = [];
					parent.summaryParams = params;
				}
				params.push(this);
			]]>
		</method>
		
		<!--- @keywords private -->
		<method name="destroy">
			<![CDATA[
			this.unregisterObjectViews();
			super.destroy();
			]]>
		</method>
		
		<!--- @keywords private -->
		<method name="getValues" args="o, trim=false">
			<![CDATA[
			this.unregisterObjectViews();
			var isVersionObject = o.getIsVersionObject();
			var objectMap = o.childObjectMap;
			for (var key in objectMap) {
				if (isVersionObject || !objectMap[key].getIsVersionObject()) {
					this.registerObjectView(objectMap[key]);
				}
			}
			
			return super.getValues(o, trim);
			]]>
		</method>

		<!--- @keywords private -->
		<method name="unregisterObjectViews">
			<![CDATA[
			while (this.currentChildObjects.length > 0) {
				var childObject = this.currentChildObjects.pop();
				childObject.unregisterObjectView(this);
			}
			]]>
		</method>

		<!--- @keywords private -->
		<method name="registerObjectView" args="childObject">
			<![CDATA[
			childObject.registerObjectView(this);
			this.currentChildObjects.push(childObject);
			]]>
		</method>
	</class>

</library>
