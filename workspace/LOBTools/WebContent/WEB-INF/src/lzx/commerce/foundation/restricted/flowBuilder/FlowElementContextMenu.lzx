<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2007, 2010 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->
<library>
	
	<!---
		Context menu for the flow elements in the flow builder.
		@keywords private
	-->
	<class name="wcfFlowElementContextMenu" extends="wcfContextMenu">
		<!--- @keywords private -->
		<attribute name="flowElement" value="${null}"/>
		<!--- @keywords private -->
		<attribute name="multiselected" value="false" type="boolean"/>
		
		<!---
			Populate and open the menu.
			@keywords private
		-->
		<method name="openMenu" args="e=null">
			<![CDATA[
			this.multiselected = (this.flowElement.parentFlow.selectedElements.length > 1);

			super.openMenu();
			this.createMenuItems();
			]]>
		</method>
		
		
		<!---
			Invoke the details action
			@keywords private
		-->
		<method name="doDetails">
			<![CDATA[
				this.flowElement.loadProperties();
			]]>
		</method>
		
		<!---
			Invoke the remove action of flow elements
			@keywords private
		-->
		<method name="doRemove">
			<![CDATA[
		   		this.flowElement.deleteFlowElements();
		   		this.flowElement.parentFlow.unselectAll();
			]]>
		</method>
		
		<!---
			Invoke the remove action of flow paths
			@keywords private
		-->
		<method name="doDeletePath">
			<![CDATA[
				if(this.flowElement.o) {
					this.flowElement.o.deleteObject();
				}
			]]>
		</method>
		
		
		<!---
			Invoke the 'add a new path to branch' action
			@keywords private
		-->
		<method name="doAddPath">
			<![CDATA[
		   		this.flowElement.addPath();
			]]>
		</method>
		
				<!---
			Populate the context menu.
			@keywords private
	 	-->
		<method name="createMenuItems">
			<![CDATA[
			if (this.flowElement instanceof lz.wcfStartElement) {
				// details
				this.addMenuItem(foundationResources.contextMenuDetails.string, this, "doDetails");				
			}
			else if (this.flowElement instanceof lz.wcfFlowPath) {
				if (this.flowElement.parentFlow.editableFlow && !this.multiselected) {
					
					// delete
					var siblings = this.flowElement.parentFlowElement.o.getObjects("FlowElement");
					if (siblings.length > 2) {
						this.addMenuItem(foundationResources.contextMenuDelete.string, this, "doDeletePath");
					}
				}			
			}
			else {
				// details
				if (!this.multiselected) {
					this.addMenuItem(foundationResources.contextMenuDetails.string, this, "doDetails");
				}
				
				// delete
				var doRemoveEnabled = this.flowElement.parentFlow.editableFlow;
				if(doRemoveEnabled) {
					if(this.multiselected) {
						for (var i = 0; i < this.flowElement.parentFlow.selectedElements.length; i++) {
							var e = this.flowElement.parentFlow.selectedElements[i];
							if (e instanceof lz.wcfFlowElement) {
								if(e.o && e.o["objectDefinition"] && e.isBranch()) {
									continue;
								}
								if(e.fixedElement) {
									doRemoveEnabled = false;
									break;
								}
							}
						}
					}
					else {
						// if this is not a branch type, show delete unless it is a fixed element
						if(!this.flowElement.isBranch()) {
							doRemoveEnabled = !this.flowElement.fixedElement;
						}
					}
					
					if(doRemoveEnabled) {
						this.addMenuItem(foundationResources.contextMenuDelete.string, this, "doRemove");
					}
				}
				
				// only branch is selected
				if(this.flowElement.parentFlow.editableFlow && !this.multiselected && (this.flowElement.isBranch())) {
					this.addMenuItem(foundationResources.contextMenuAddPath.string, this, "doAddPath");
				}
				
			}
			]]>
		</method>
		
	</class>
		
</library>
