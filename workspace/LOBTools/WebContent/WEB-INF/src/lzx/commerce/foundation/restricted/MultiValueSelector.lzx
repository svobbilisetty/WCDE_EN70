<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2007, 2010 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->
<library>
	<!---
		@keywords private
		
		The Base class for a multi-value selector. A multi-value selector allows a user to select more than one property
		value at a time. The selected property values will be set to the bound {@link wcfModelObject} instance. 
	-->
	<class name="wcfBaseMultiValueSelector">
		<!---
			Reference to the instance of wcfModelObject that is being modified by the
			properties view that contains this multi-value selector.
		-->
		<attribute name="o" setter="this.setModelObject(o)"/>
		<!--- the list of selections -->
		<attribute name="multiValueSelections"/>
		<!--- the pointer to the selector containing all selections -->
		<attribute name="selector" value="${null}"/>
		<!--- Flags whether to use radio buttons. The default value is combobox. -->
		<attribute name="useRadioButtons" type="boolean" value="false"/>
		<!--- True if the selector is enabled -->
		<attribute name="enabled" type="boolean" value="true"/>
		
		<!--- 
			@keywords private
		 -->
		<method name="init">
			<![CDATA[
			super.init();
			this.valueChangedDel = new lz.Delegate(this, "valueChanged");
			this.updateSelectionDel = new lz.Delegate(this, "updateSelection");
			
			this.createViews();
			]]>
		</method>
		
		<!--- 
			@keywords private
		 -->
		<method name="destroy">
			<![CDATA[
			this.valueChangedDel.unregisterAll();
			delete this.valueChangedDel;
			this.updateSelectionDel.unregisterAll();
			delete this.updateSelectionDel;
			]]>
		</method>
		
		<!--- 
			@keywords private
			Pass the attribute "enabled" to the selector
		 -->
		<handler name="onenabled">
			<![CDATA[
			this.selector.setAttribute("enabled", this.enabled);
			]]>
		</handler>
		
		<!--- 
			@keywords private
			Updates the bound model object when a new value is selected
		 -->
		<method name="valueChanged" args="e=null">
			<![CDATA[
				var value = this.selector.getValue();
				if (!this["_settingValue"] && this["multiValueSelections"] && this.multiValueSelections.length > 0 && value != null) {
					this.multiValueSelections[Number(value)].setPropertyValues(this.o);
				}
			]]>
		</method>
		
		<!--- 
			@keywords private
			Binds a new model object to this multi-value selector. 
			@param wcfModelObject newObject the new model object to bind.
		 -->
		<method name="setModelObject" args="newObject">
			<![CDATA[
			if (this["o"] != newObject) {
				this.o = newObject;
				this.updateSelection();
			}
			]]>
		</method>
		
		<!--- 
			@keywords private
			Makes sure the selected property values are the same as the property values in the bound model object. 
		 -->
		<method name="updateSelection" args="e=null">
			<![CDATA[
				if(this["updateSelectionDel"]) {
					this.updateSelectionDel.unregisterAll();
					
					if(this["multiValueSelections"] && this.o) {
						for (var i = 0; i < this.multiValueSelections.length; i++) {
							this.multiValueSelections[i].registerDelegate(this.o, this.updateSelectionDel);
						}
					}
				}
				
				if(this.selector && this.o) {
					this["_settingValue"] = true;
					var selectedIndex = -1;
					for (var i=0; i < this.multiValueSelections.length; i++) {
						if (this.multiValueSelections[i].isSelected(this.o)) {
							selectedIndex = i;
							break;
						}
					}

					if (selectedIndex >= 0) {
						this.selector.selectItemAt(selectedIndex);
					}
					else if (selectedIndex == -1) {
						this.selector.clearSelection();	
					}
					this["_settingValue"] = false;
				}
			]]>
		</method>

		<!---
			@keywords private
			Creates the selector widget based on the types of the selector. Either a dropdown list or a group of 
			radio buttons will be created. 
		-->
		<method name="createViews">
			<![CDATA[
				//otherwise we use base components
				if (this.useRadioButtons) {
					this.selector = new lz.wcfBaseRadioGroup(this, {
						name: "editor",
						enabled: this.enabled
					});
					this.valueChangedDel.register(this.selector, "onvalue");
				}
				else {
					this.selector = new lz.wcfBaseComboBox(this, {
						name: "editor",
						width: 230, 
						enabled: this.enabled
					});
					this.valueChangedDel.register(this.selector, "onselectedValue");					
				}				
				
				for (var i=0; i < this.multiValueSelections.length; i++) {
					var selection = this.multiValueSelections[i];
			
					if (this.useRadioButtons) {
						this.selector.addItem(selection.displayName, i);
						var item = this.selector.getItemAt(i);
						item.setAttribute("multiValueSelection", selection);
						item.setAttribute("propertyValue", selection);
						if(selection.imageSrc != "") {
							item.setAttribute("imageSrc", selection.imageSrc);
						}
					}
					else {
						this.selector.addValue(selection);
					}
				}
				
				this.updateSelection();
			]]>
		</method>
	</class>
	
	<!---
		This class defines widget that allows the business user to select from a set of options.
		The widget is for use within a properties view.
		The options can be displayed in a combobox or as a list of radio buttons. Selecting an option will
		cause one or more property values to be changed.
		The following code snippet shows how to use a multi-value selector.
		In this example each option will set two properties 
		at a time, the promotion rule and the promotion group. The values of selections are defined in 
		{@link wcfMultiValueSelection} instances.
		
		@START_CODE
			<MultiValueSelector>
				<MultiValueSelection displayName="${promotionResources.promotion_type_OrderLevelPercentDiscount}">
					<dataset name="values">
						<promotionRuleName>OrderLevelPercentDiscount</promotionRuleName>
						<promotionGroup>OrderLevelPromotion</promotionGroup>
					</dataset>
				</MultiValueSelection>
				<MultiValueSelection displayName="${promotionResources.promotion_type_OrderLevelValueDiscount}">
					<dataset name="values">
						<promotionRuleName>OrderLevelValueDiscount</promotionRuleName>
						<promotionGroup>OrderLevelPromotion</promotionGroup>
					</dataset>
				</MultiValueSelection>
			</MultiValueSelector>
		@END_CODE
	-->
	<class name="wcfMultiValueSelector" extends="wcfPropertiesComponent">
		<!--- 
			@keywords private
			the list of selections 
			@type wcfMultiValueSelection[]
		-->
		<attribute name="multiValueSelections"/>
		<!--- Flags whether to use radio buttons. The default value is combobox. -->
		<attribute name="useRadioButtons" type="boolean" value="false"/>
		
		<!---
			Creates the editor for the given property component.
			@param wcfPropertiesComponent parentComponent The parent properties component from which to create the editor
		-->
		<method name="createEditor" args="parentComponent">
			<![CDATA[	
			new lz.wcfBaseMultiValueSelector(parentComponent, {
				name: "editor",
				x: parentComponent.promptWidth + parentComponent.xspacing,
				enabled: parentComponent.enabled,
				o: parentComponent.o,				
				multiValueSelections: this.multiValueSelections,
				useRadioButtons: this.useRadioButtons
			});			
			]]>
		</method>
	</class>
	
	<!---
		@keywords private
		
		The base class for a checkbox multi-value selector. A checkbox multi-value selector allows a user to toggle an option on or off
		which may set more than one property value at a time. Based on the selection, multiple properties may be set. The properties that are set
		are defined by two instances of {@link wcfMultiValueSelection} - one instance must be named <code>true</code>
		and the other must be named <code>false</code>.
	-->
	<class name="wcfCheckboxMultiValueSelector" extends="wcfBaseMultiValueSelector">
		<!--- 
			@keywords private
			Updates the checkbox state based on the object property values. 
		 -->
		<method name="updateSelection" args="e=null">
			<![CDATA[
				if (this["updateSelectionDel"]) {
					this.updateSelectionDel.unregisterAll();

					if(this["multiValueSelections"] && this.o) {
						for (var i = 0; i < this.multiValueSelections.length; i++) {
							this.multiValueSelections[i].registerDelegate(this.o, this.updateSelectionDel);
						}
					}
				}
				
				if (this.selector && this.o) {	
					this["_settingValue"] = true;
					var isChecked = false;
					
					for (var i = 0; i < this.multiValueSelections.length; i++) {
						if (this.multiValueSelections[i].isSelected(this.o)) {
							if(this.multiValueSelections[i].name == "true") {
								isChecked = true;
							}
							break;
						}
					}
					this.selector.setValue(isChecked);
					
					this["_settingValue"] = false;
				}
			]]>
		</method>

		<!---
			@keywords private
			Creates the base checkbox widget.
		-->
		<method name="createViews">
			<![CDATA[
				this.selector = new lz.wcfBaseCheckbox(this, {
					name: "editor",
					enabled: this.enabled
				});
				this.valueChangedDel.register(this.selector, "onvalue");
				
				this.updateSelection();
			]]>
		</method>
		
		<!--- 
			@keywords private
			Updates the bound model object when a new value is selected
		 -->
		<method name="valueChanged" args="e=null">
			<![CDATA[
				var value = String(this.selector.getValue());

				if (!this["_settingValue"] && this["multiValueSelections"] && this.multiValueSelections.length > 0 && value != null) {
					for(var i = 0; i < this.multiValueSelections.length; i++) {
						if(this.multiValueSelections[i].name == value) {
							this.multiValueSelections[i].setPropertyValues(this.o);
							break;
						}
					}
				}
			]]>
		</method>
	</class>
	
	<!---
		<p>This class defines widget that allows the business user to select whether or not an option is true (checked)
		or false (unchecked). Based on the selection, multiple properties may be set. The properties that are set
		are defined by two instances of {@link wcfMultiValueSelection} - one instance must be named <code>true</code>
		and the other must be named <code>false</code>.</p>
		
		<p>The following code snippet shows how to use a multi-value checkbox. When the checkbox is checked, the
		"true" MultiValueSelection is applied to set wishlistEnabled=true, singleWishList=true and multipleWishList=false.
		When the checkbox is unchecked, the "false" MultiValueSelection is applied to set all three properties to <code>false</code>.</p>
		
		@START_CODE
			<MultiValueCheckbox promptText="Enable wishlist">
				<MultiValueSelection name="true">
					<Xml name="values">
						<wishlistEnabled>true</wishlistEnabled>
						<singleWishList>true</singleWishList>
						<multipleWishList>false</multipleWishList>
					</Xml>
				</MultiValueSelection>
				<MultiValueSelection name="false">
					<Xml name="values">
						<wishlistEnabled>false</wishlistEnabled>
						<singleWishList>false</singleWishList>
						<multipleWishList>false</multipleWishList>
					</Xml>
				</MultiValueSelection>
			</MultiValueCheckbox>
		@END_CODE
	-->
	<class name="wcfMultiValueCheckbox" extends="wcfPropertiesComponent">
		<!--- 
			@keywords private
			the list of selections 
			@type wcfMultiValueSelection[]
		-->
		<attribute name="multiValueSelections"/>
		
		<!---
			Creates the editor for the given property component.
			@param wcfPropertiesComponent parentComponent The parent properties component from which to create the editor
		-->
		<method name="createEditor" args="parentComponent">
			<![CDATA[	
			new lz.wcfCheckboxMultiValueSelector(parentComponent, {
				name: "editor",
				x: parentComponent.promptWidth + parentComponent.xspacing,
				enabled: parentComponent.enabled,
				o: parentComponent.o,
				multiValueSelections: this.multiValueSelections
			});			
			]]>
		</method>
	 </class>
	
	<!---
		Use this class to define a selectable value in a multiple value selector.
		Multiple instances of this class can be declared as children of an instance
		of {@link wcfMultiValueSelector}. Declare a single instance of a dataset (see the OpenLaszlo documentation for
		{@OLlink LzDataset}) with the name "values" to define the property values that will
		be applied to the current object when this value is selected.
		
		<p>For example, the following code snippet 
		declares a selection that contains two property values, promotionRuleName, and promotionGroup. A tag name inside
		the dataset node refers to a property's name, and the tag's inner text is the property value. 
		
		@START_CODE
			<MultiValueSelection displayName="${promotionResources.promotion_type_OrderLevelPercentDiscount}">
				<dataset name="values">
					<promotionRuleName>OrderLevelPercentDiscount</promotionRuleName>
					<promotionGroup>OrderLevelPromotion</promotionGroup>
				</dataset>
			</MultiValueSelection>
		@END_CODE
	 -->
	<class name="wcfMultiValueSelection" extends="node">
		<!--- 
			The text displayed for this selection when this selection is used as an item in a multi-value selector. 
		 -->
		<attribute name="displayName" type="string" value=""/>
		<!--- 
			The source for an image to be displayed after the displayname for this selection when this selection is used as an item in a multi-value selector. 
		 -->
		<attribute name="imageSrc" type="string" value="" />
		
		<!--- 
			@keywords private
			A list of property values for selection. Each property value contains two attributes, name, and value. 
			@type Object[]
		 -->
		<attribute name="propertyValues" value="${null}"/>

		<!---
			@keywords private
		-->
		<method name="init">
			<![CDATA[
			super.init();
			if (!this["definitionNode"]) {
				this.postCreateDefinitionChildren();
			}
			]]>
		</method>

		<!--- 
			@keywords private
		 -->
		<method name="postCreateDefinitionChildren">
			<![CDATA[
				var e = this["values"];
				if (e) {
					var tmpValues = wcfXMLUtil.parseXML(e.serialize());
					this.parseDataElement(tmpValues);
				}
				
				var selections = parent["multiValueSelections"];
				if (!selections) {
					selections = [];
					parent.multiValueSelections = selections;
				}
				this.value = selections.length;
				selections.push(this);
			]]>
		</method>
		
		<!--- 
			@keywords private
			Constructs property values by parsing the data set node in this selection. 
		 -->
		<method name="parseDataElement" args="e=null">
			<![CDATA[
				this.propertyValues = [];
				var nodes = e.childNodes;
				for (var i = 0; i < nodes.length; i++) {
					var node = nodes[i];
					var significant = node.attributes["significant"] != "false";
					var propertyName = node.nodeName;
					var propertyValue = wcfXMLUtil.getNodeValue(node);
					var objectPath = null;
					if(node.attributes["objectPath"]){
						objectPath = node.attributes["objectPath"];
					}
					var nameValuePair = new Object();
					nameValuePair.name = propertyName;
					nameValuePair.value = propertyValue;
					nameValuePair.objectPath = objectPath;
					nameValuePair.significant = significant;
					this.propertyValues.push(nameValuePair);
				}
			]]>
		</method>
		
		<!--- 
			@keywords private
			Sets the the properties in the given object with the property values in this selection. 
			@param wcfModelObject o the model object whose properties to be set.
		 -->
		<method name="setPropertyValues" args="o">
			<![CDATA[
				for (var i=0; i < this.propertyValues.length; i++) {
					o.setPropertyValue(this.propertyValues[i].name, this.propertyValues[i].objectPath, this.propertyValues[i].value);
				}
				return true;
			]]>
		</method>
		
		<!---
			@keywords private
			Register a delegate to be executed when the significant properties change
			for the specified model object.
			@param wcfModelObject o: the model object
			@param lz.Delegate del: the delegate
		-->
		<method name="registerDelegate" args="o,del">
			<![CDATA[
				for(var i = 0; i < this.propertyValues.length; i++) {
					if(this.propertyValues[i].significant) {
						var propertyObject = o;
						if (this.propertyValues[i].objectPath != null) {
							propertyObject = o.getObject(this.propertyValues[i].objectPath, false, null, del);
						}
						if (propertyObject != null) {
							var property = propertyObject.getProperty(this.propertyValues[i].name);
							del.register(property, "onvalue");
						}
					}
				}
			]]>
		</method>
		
		<!--- 
			@keywords private
			Determines if an object's properties are set. 
			@param wcfModelObject o a model object to be examined.
			@return true if this model object is set with the property values in this selection. False otherwise. 
		 -->
		<method name="isSelected" args="o">
			<![CDATA[
				for (var i = 0; i < this.propertyValues.length; i++) {
					if (this.propertyValues[i].significant) {
						var oPropertyValue = o.getPropertyValue(this.propertyValues[i].name, this.propertyValues[i].objectPath);
						if (oPropertyValue && this.propertyValues[i].value) {
							if (oPropertyValue != this.propertyValues[i].value) {
								return false;
							}
						}
						else if (!oPropertyValue &&  this.propertyValues[i]["value"]) {
							return false;
						}
						else if (oPropertyValue &&  !this.propertyValues[i]["value"]) {
							return false;
						}
					}
				}
				return true;
			]]>
		</method>
	 </class>
</library>
