<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2007, 2011 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->
<library>

	<!--- 
		This class provides a basic view for element diagram in flow builder.
		@keywords private 
	-->
	<class name="wcfFlowElement" extends="wcfElement" placement="content">
		<!--- @keywords private -->
		<attribute name="objectClass" type="string" value="wcfFlowPath"/>
		
		<!--- @keywords private -->
		<attribute name="oList" value="null"/>
		
		<!--- @keywords private -->
		<attribute name="elementName" type="string" value=""/>

		<!---
			Name of the resource for this element's flow icon
			@keywords private
		-->
		<attribute name="icon" type="string" value="${null}"/>
		<!---
			Reference to the icon view of the flow element
			@keywords private
		-->
		<attribute name="iconView" value="null"/>
		
		<!--- @keywords private -->
		<attribute name="summaryView" value="null"/>
		<!---
			Summary view map.
			@keywords private
		-->
		<attribute name="summaryViewMap" value="${{}}"/>

		<!--- @keywords private -->
		<attribute name="fixedElement" type="boolean" value="false"/>

		<!--- @keywords private -->
		<attribute name="o" setter="this.setModelObject(o);"/>

		<!--- @keywords private -->
		<attribute name="flowPathFilter" value="null"/>

		<!--- @keywords private -->
		<attribute name="flowPathSorter" value="null"/>
		
		<!--- @keywords private -->
		<attribute name="pathWidth" type="number" value="0"/>

		<!--- @keywords private -->
		<attribute name="pathHeight" type="number" value="0"/>
		
		<!---
			A reference to the parent wcfFlowPath
			@keywords private
		-->
		<attribute name="parentFlowPath" value="null" />
		
		<!---
			Flag indicating whether or not this element has child path elements
		-->
		<attribute name="hasChildElements" type="boolean" value="false"/>
		
		<!--- @keywords private -->
		<attribute name="contextMenuClass" type="string" value="wcfFlowElementContextMenu" />
		
		<handler name="oninit">
			<![CDATA[
			this.flowPathFilter = new lz.wcfObjectGroupFilter(this, {objectGroup: "FlowElement"});
			this.flowPathSorter = new lz.wcfFlowElementSorter(this);

			var parentFlow = wcfFlowUtils.getParentFlow(this);
			if(parentFlow && parentFlow["flowBuilder"]) {
				new lz[parentFlow.flowBuilder.flowConnectorClass](this.flowconnectorview, {name: "flowconnector"});
			}

			if(this["o"]) {
				this.parentFlowPath = wcfFlowUtils.getParentFlowPath(this);
				this.o.bindViewToChildren(this, this.flowPathFilter, null, this.flowPathSorter);
			}
			this.summaryView = this.MainView.iconcontentview.iconcontent.textview.summaryview;
			this.updateSummary();
			]]>
		</handler>

		<!--- @keywords private -->
		<method name="destroy">
			<![CDATA[
			if(this["releaseModelObjectDel"]) {
				this.releaseModelObjectDel.unregisterAll();
				delete this.releaseModelObjectDel;
			}
			if(this["updateElementNameDel"]) {
				this.updateElementNameDel.unregisterAll();
				delete this.updateElementNameDel;
			}
			if(this["sequenceDel"]) {
				this.sequenceDel.unregisterAll();
				delete this.sequenceDel;
			}
			if(this["pathSequenceDel"]) {
				this.pathSequenceDel.unregisterAll();
				delete this.pathSequenceDel;
			}
			
			super.destroy();
			]]>
		</method>

		<!--- @keywords private -->
		<method name="setModelObject" args="newObject">
			<![CDATA[
			if (this["o"] != newObject) {
			
				if(this["o"]) {
					this.o.releaseViewFromChildren(this);
				}
				
				if (this["releaseModelObjectDel"]) {
					this.releaseModelObjectDel.unregisterAll();
				}
				else {
					this.releaseModelObjectDel = new lz.Delegate(this, "releaseModelObject");
				}

				if (this["updateElementNameDel"]) {
					this.updateElementNameDel.unregisterAll();
				}
				else {
					this.updateElementNameDel = new lz.Delegate(this, "updateElementName");
				}
				
				if (this["sequenceDel"]) {
					this.sequenceDel.unregisterAll();
				}
				else {
					this.sequenceDel = new lz.Delegate(this, "updateSequence");
				}
				
				if (this["pathSequenceDel"]) {
					this.pathSequenceDel.unregisterAll();
				}
				else {
					this.pathSequenceDel = new lz.Delegate(this, "updatePathSequence");
				}
	
				
				this.o = newObject;
				
				if(this.o) {
					this.releaseModelObjectDel.register(this.o, "beingDestroyed");
					var sequenceProp = this.o.getProperty("sequence");
					this.sequenceDel.register(sequenceProp, "onvalue");
					
					this.o.bindViewToChildren(this, this.flowPathFilter, null, this.flowPathSorter);
					this.parentFlowPath = wcfFlowUtils.getParentFlowPath(this);

					this.setAttribute("icon", this.o.objectDefinition.flowIcon);
					this.setAttribute("elementName", this.o.objectDefinition.displayName);

					// make sure we update ourselves when the language changes
					this.updateElementNameDel.register(this.o.objectDefinition, "ondisplayName");

					this.updateSummary();
					this.o.validate();
					
					if (this.o.objectId == parent.parentFlow.o["viewState"]) {
						this.loadProperties();
					}
					
					var children = wcfFlowUtils.getSortedElements(this.o);
					if (this.hasChildElements != children.length > 0) {
						this.setAttribute("hasChildElements", children.length > 0);
					}
					
					if(this.hasChildElements) {
						this.pathSequenceDel.register(this.o, "onchildObjects");
					}
				}
				this.updateComplete();
			}
			]]>
		</method>

		<!---
			@keywords private
			This method releases the model object from this properties view by setting {@link wcfObjectProperties#o} to null.
		-->
		<method name="releaseModelObject" args="e=null">
			<![CDATA[
			this.setAttribute("o", null);
			]]>
		</method>

		<!--- @keywords private -->
		<method name="updateElementName" args="e=null">
			<![CDATA[
				if(this.o && this.o["objectDefinition"]) {
					this.setAttribute("elementName", this.o.objectDefinition.displayName);
				}
			]]>
		</method>
		
		<!--- @keywords private -->
		<method name="updateSequence" args="e=null">
			<![CDATA[
				if(this.o && this.parentFlowPath && this.parentFlowPath["oList"]) {
					this.parentFlowPath.oList.refreshFilteredObjects();
				}
			]]>
		</method>

		<!---
			When child objects are added or removed from this element, this method notifies all of the existing paths to
			update their sequence values.
			@keywords private
		-->
		<method name="updatePathSequence" args="e=null">
			<![CDATA[
				if(this.o && this.hasChildElements) {
					var paths = this.getChildren();

					for(var i = 0; i < paths.length; i++) {
						paths[i].resetSequence();
					}
				}
			]]>
		</method>

		<!--- @keywords private -->
		<method name="determinePlacement" args="v,p,a">
			<![CDATA[
			if (p == "content") {
				return this.MainView.subPathsView.paths;
			}
			else {
				return super.determinePlacement(v, p, a);
			}
			]]>
		</method>
		
		<!--- @keywords private -->
		<method name="updateSummary">
			<![CDATA[
				if(this["o"]) {
					if (this.summaryView != null && this.summaryView["summary"]) {
						this.summaryView.summary.setAttribute("visible", false);
						this.summaryView.summary.setAttribute("o", null);
						this.summaryView.summary = null;
					}
					
					var def = this.o.objectDefinition;
					if (def && def.summaryClass && this.summaryView != null) {
						var summary = this.summaryViewMap[def.summaryClass];
						if (summary) {
							summary.setAttribute("o", this.o);
							summary.setAttribute("visible", true);
						}
						else {
							summary = new lz[def.summaryClass](this.summaryView, {o: this.o});
							this.summaryViewMap[def.summaryClass] = summary;
						}
						this.summaryView.summary = summary;
					}
				}
			]]>
		</method>

		<!--- @keywords private -->
		<method name="getChildren">
			<![CDATA[
				var childFlowPaths = [];
				
				var childViews = this.MainView.subPathsView.paths.subviews;
				for (var i = 0; i < childViews.length; i++) {
					if (childViews[i].visible && childViews[i] instanceof lz.wcfFlowPath) {
						childFlowPaths.push(childViews[i]);
					}
				}
				
				return childFlowPaths;
			]]>
		</method>

		<!--- @keywords private -->
		<method name="unselectChildren">
			<![CDATA[
				var childFlowPaths = this.MainView.subPathsView.paths.subviews;
				for (var i = 0; i < childFlowPaths.length; i++) {
					var s = childFlowPaths[i];
					if (s.visible && s instanceof lz.wcfFlowPath) {
						s.unselectChildren();
					}
				}
			]]>
		</method>
		
		<!--- @keywords private -->
		<method name="deleteFlowElements">
			<![CDATA[
			this.parentFlow.o.lock();
			var propertiesView = this.parentFlow.o["viewState"];
			
	   		if (this.selected) {
				for (var i = 0; i < this.parentFlow.selectedElements.length; i++) {
					var obj = this.parentFlow.selectedElements[i].o;
					if(obj.objectId == propertiesView) {
						this.parentFlow.hideProperties();
						this.parentFlow.o["viewState"] = "";
					}
					this.deleteFlowElement(obj);
				}
			}
			else {
				if(this.o.objectId == propertiesView) {
					this.parentFlow.hideProperties();
					this.parentFlow.o["viewState"] = "";
				}
				this.deleteFlowElement(this.o);
			}

			this.parentFlow.o.unlock(true);
			]]>
		</method>

		<!--- @keywords private -->
		<method name="deleteFlowElement" args="obj">
			<![CDATA[
				// for branches, we need to move elements from control path back to main flow
				if(this.isBranch(this.o)) {
					if(this.parentFlowPath) {
						var insertSequenceRefObj = null;
						var siblings = wcfFlowUtils.getSortedElements(this.parentFlowPath.o);
						for(var i = 0; i < siblings.length - 1; i++) {
							if(siblings[i] == obj) {
								insertSequenceRefObj = siblings[i + 1];
								break;
							}
						}

						var branchPaths = wcfFlowUtils.getSortedElements(obj);
						if(branchPaths.length > 0) {
							// get elements on the first path
							var copyElements = wcfFlowUtils.getSortedElements(branchPaths[0]);
							
							// clone elements on the first path and delete
							if(copyElements.length > 0) {
								for(var i = 0; i < copyElements.length; i++) {
									var insertSequence = wcfFlowUtils.getNextSequenceNumber(this.parentFlowPath.o, insertSequenceRefObj);
									
									var cloneObj = this.parentFlowPath.o.model.createNewObject(null, this.parentFlowPath.o, true, copyElements[i]);
									cloneObj.setPropertyValue("sequence", null, insertSequence);
								}
							}
						}
						
						this.parentFlowPath.o.updateChildObjects();
					}
					
				}

				obj.deleteObject();
			]]>
		</method>

		<!--- @keywords private -->
		<method name="addElementsToBranch" args="forcedBranchType, branchObjectType">
			<![CDATA[

			var pathType = "path";
			this.parentFlow.o.lock();
			
			if(branchObjectType) {
				var firstElement = (this.selected) ? this.parentFlow.selectedElements[0] : this;
				var lastElement = (this.selected) ? this.parentFlow.selectedElements[this.parentFlow.selectedElements.length - 1] : this;
	
				// create branch element
				var insertSequence = wcfFlowUtils.getNextSequenceNumber(this.parentFlowPath.o, firstElement.o);
				var branchObj = this.parentFlowPath.o.model.createNewObject(this.parentFlowPath.o.model.getObjectDefinition(this.parentFlowPath.o, branchObjectType), this.parentFlowPath.o);
				branchObj.setPropertyValue("sequence", null, insertSequence);

				if((typeof(forcedBranchType) != "undefined") && (forcedBranchType != "")) {
					var branchProp = branchObj.getProperty("branchtype");
					branchProp.change(forcedBranchType);
					branchProp.setAttribute("propertyReadOnly", "true");
					branchObj.setPropertyValue("branchtypeReadOnly", "", "true");
				}
				
				var pathObjectDefinition = branchObj.model.getObjectDefinition(branchObj, pathType);
				
				// create top path element
				insertSequence = wcfFlowUtils.getNextSequenceNumber(branchObj);
				var topFlowObj = branchObj.model.createNewObject(pathObjectDefinition, branchObj);
				topFlowObj.setPropertyValue("sequence", null, insertSequence);
	
				// create bottom path element
				insertSequence = wcfFlowUtils.getNextSequenceNumber(branchObj);
				var botFlowObj = branchObj.model.createNewObject(pathObjectDefinition, branchObj);
				botFlowObj.setPropertyValue("sequence", null, insertSequence);
				
				// copy elements to paths
				if(this.selected) {
					for (var i = 0; i < this.parentFlow.selectedElements.length; i++) {
						var e = this.parentFlow.selectedElements[i];
						if (e instanceof lz.wcfFlowElement) {
							this.addElementToBranch(e.o, topFlowObj, botFlowObj);
						}
					}
				}
				else {
					this.addElementToBranch(this.o, topFlowObj, botFlowObj);
				}
				
				branchObj.updateChildObjects();
				topFlowObj.updateChildObjects();
				botFlowObj.updateChildObjects();
				
			}
			this.parentFlow.o.unlock(true);
			]]>
		</method>

		<!--- @keywords private -->
		<method name="addElementToBranch" args="elementObj, topFlowObj, bottomFlowObj">
			<![CDATA[
				// copy to top flow
				var insertSequence = wcfFlowUtils.getNextSequenceNumber(topFlowObj);
				var moveObj = topFlowObj.model.createNewObject(null, topFlowObj, true, elementObj);
				moveObj.setPropertyValue("sequence", null, insertSequence);
				moveObj.updateChildObjects();
				
				// clone to bottom
				insertSequence = wcfFlowUtils.getNextSequenceNumber(bottomFlowObj);
				var cloneObj = bottomFlowObj.model.createNewObject(null, bottomFlowObj, true, elementObj);
				cloneObj.setPropertyValue("sequence", null, insertSequence);
				cloneObj.updateChildObjects();

				// delete original object
				elementObj.deleteObject();
			]]>
		</method>

		<!--- @keywords private -->
		<method name="addPath">
			<![CDATA[
				if(this.isBranch(this.o)) {
					var currentPaths = wcfFlowUtils.getSortedElements(this.o);
					if(currentPaths.length > 0) {
						// get elements on the last current path
						var lastPath = currentPaths[currentPaths.length - 1];
						var elements = wcfFlowUtils.getSortedElements(lastPath);
						
						// create new path
						var insertSequence = wcfFlowUtils.getNextSequenceNumber(this.o);
						var pathObj = this.o.model.createNewObject(this.o.model.getObjectDefinition(this.o, "path"), this.o);
						pathObj.setPropertyValue("sequence", null, insertSequence);
						
						// clone elements to new path
						if(elements.length > 0) {
							for(var i = 0; i < elements.length; i++) {
								insertSequence = wcfFlowUtils.getNextSequenceNumber(pathObj);
								var cloneObj = pathObj.model.createNewObject(null, pathObj, true, elements[i]);
								cloneObj.setPropertyValue("sequence", null, insertSequence);
							}
						}
					}
				}
			]]>
		</method>
		
		<!--- @keywords private -->
		<method name="isBranch" args="obj=null">
			<![CDATA[
				if (obj == null) {
					obj = this.o;
				}
				return obj && obj.objectDefinition.elemTemplateType == "Branch";
			]]>
		</method>

		<!--- @keywords private -->
		<method name="isDragEnabled">
			<![CDATA[
			// disable if root flow is not editable or we are a fixed element
			var parentFlow = wcfFlowUtils.getParentFlow(this);
			if((parentFlow && !parentFlow.editableFlow) || this.fixedElement) {
				return false;
			}

			return true;
			]]>
		</method>
		
		<!--- @keywords private -->
		<method name="getConnectorLeftExpansionSize" args="del=null">
			<![CDATA[
			var expansionSize = 0;
			if (del != null) {
				del.register(this, "onhasChildElements");
				del.register(this, "oniconView");
			}
			if (!this.hasChildElements && this.iconView != null) {
				if (del != null) {
					del.register(this, "onwidth");
					del.register(this.iconView, "onwidth");
				}
				expansionSize = this.width - this.iconView.width - this.flowconnectorview.width - 20;
				if (expansionSize < 0) {
					expansionSize = 0;
				}
			}
			return expansionSize;
			]]>
		</method>

		<simplelayout axis="x" spacing="0" />

		<view name="flowconnectorview" height="32"/>

		<view name="MainView">
			<wcfDragSource name="dragSource" targetKeys="${['flowelement']}"
				dragAndDropManager="${wcfDndManager}"
				dragObjectTarget="${classroot.MainView.iconcontentview.iconcontent}">
				<attribute name="flowElement" value="${classroot}" />

				<method name="isEnabled">
					<![CDATA[
					return classroot.isDragEnabled();
					]]>
				</method>

				<method name="getDragSources">
					<![CDATA[
					var dragSources = new Array();
					
					if (classroot.selected) {
						for (var i = 0; i < classroot.parentFlow.selectedElements.length; i++) {
							var e = classroot.parentFlow.selectedElements[i];
							if (e instanceof lz.wcfFlowElement) {
								if(!e.fixedElement && e.MainView["dragSource"] && e.MainView.dragSource.isEnabled()) {
									dragSources.push(e.MainView.dragSource);
								}
								else {
									e.unselect();
								}
							}
						}
					}
					else {
						classroot.parentFlow.unselectAll();
						classroot.select();
						
						dragSources.push(this);
					}
					
					return dragSources;
					]]>
				</method>
			</wcfDragSource>

			<simplelayout axis="x" spacing="0" />
			<view name="iconcontentview">
				<view name="iconcontent">
					<handler name="oninit">
						this.menu = new lz[classroot.contextMenuClass](this, {flowElement: classroot});
						this.menu.addView(this.textview);
					</handler>
					<handler name="onicon" reference="classroot">
						this.menu.addView(this.wrapper.iconview.icon);
					</handler>
					<handler name="onclick">
						classroot.loadProperties();
					</handler>
					<handler name="onmouseover">
						// only animate if we're not the current selection
						classroot.parentFlow.selectBox.enabled = false;
						if(!classroot.selected) {
							classroot.setIconBackground(classroot.hoverBorderColour, classroot.hoverFillColour);
						}
					</handler>
					<handler name="onmouseout">
						classroot.parentFlow.selectBox.enabled = true;
						if(!classroot.selected) {
							classroot.setIconBackground(null, null);
						}
					</handler>
					<view name="wrapper" width="${iconview.icon.width + 6}" height="${iconview.icon.height + 6}" x="12" y="${(classroot.flowconnectorview.height-this.height)/2 - 1}">
						<view name="iconview" width="${parent.width - 2}" height="${parent.height - 2}" x="1" y="1">
							<view name="icon" align="center" valign="middle" resource="${classroot.icon}">
								<handler name="oninit">
									classroot.setAttribute("iconView", this);
								</handler>
							</view>
						</view>
					</view>
					<view resource="wcfFlowElementIncomplete" visible="${!classroot.complete}" x="${parent.textview.x - this.width}" y="${parent.textview.y + 2}"/>
					<view name="textview" x="10" y="${parent.wrapper.iconview.y + parent.wrapper.iconview.height + 1}">
						<simplelayout axis="y" spacing="0" />
						<text name="elementtext" resize="true" fontsize="12" text="${classroot.elementName}"/>
						<view name="summaryview" width="${Math.max(parent.elementtext.width, 100)}"/>
						<text name="counttext" fontstyle="italic" resize="true"/>
						<view name="padding" height="10"/>
					</view>
				</view>
			</view>

			<view name="subPathsView" visible="${classroot.hasChildElements}">
				<handler name="onwidth">
					<![CDATA[
					classroot.setAttribute("pathWidth", this.width);
					]]>
				</handler>
				<handler name="onheight">
					<![CDATA[
					classroot.setAttribute("pathHeight", this.height);
					]]>
				</handler>
				<simplelayout axis="x" spacing="0" />
				<view name="paths">
					<simplelayout axis="y" spacing="0"/>
				</view>
				<view width="40"/>
			</view>
		</view>
	</class>
</library>
