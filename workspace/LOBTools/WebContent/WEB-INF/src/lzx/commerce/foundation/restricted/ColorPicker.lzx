<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2007, 2009 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->
<library>
	<wcfFloatingPane id="wcfColorPicker" focusable="false">
		<attribute name="outterPadding" type="number" value="6"/>
		<attribute name="colorMap" value="${{}}"/>
		<attribute name="color" type="color"/>
		<attribute name="initstage" value="late"/>
		<attribute name="colorPalette" value="${[]}"/>
		
		<simplelayout axis="y" spacing="10" inset="${parent.outterPadding}"/>
		<view name="colorCells" x="${parent.outterPadding}" focusable="true">
			<simplelayout axis="y"/>
			
			<method name="addSwatchRow" args="colorsInRow, rowIndex"><![CDATA[
				var rowView = new lz.view(this, {
					name: String(rowIndex),
					x: 0, 
					bgcolor: 0xEBEBEB
				}); 
				for(var i = 0, len = colorsInRow.length; i < len; ++i){
					var cell = this.addSwatchCell(rowView, rowIndex, colorsInRow[i], i, len);
				}
				return rowView; 
				]]>
			</method>
			
			<method name="addSwatchCell" args="rowView, rowIndex, color, cellIndex, rowLength"><![CDATA[
				var colorCell = new lz.wcfColorCell(rowView, {
					name: String(cellIndex), 
					bgcolor: color, 
					disabled: color == null,
					borderRightSize: color!=null && cellIndex == rowLength - 1? 1: 0, 
					borderLeftSize: color == null? 0:1, 
					colorPicker: parent,
					rowIndex: rowIndex,
					colIndex: cellIndex
				}); 
				colorCell.setAttribute('x', cellIndex * colorCell.width); 
				parent.colorMap = parent['colorMap'] || {}; 
				if(color != null){
					parent.colorMap[color] = colorCell; 
				}
				
				return colorCell; 
				]]>
			</method>
			
			<handler name="oninit"><![CDATA[
				var colors = [
								[0xff0000,0xffff00,0x00ff00,0x00ffff,0x0000ff,0xff00ff,0xffffff,0xebebeb,0xe1e1e1,0xd7d7d7,0xcccccc,0xc2c2c2,0xb7b7b7,0xacacac,0xa0a0a0,0x959595], 
								[0xee1d24,0xfff100,0x00a650,0x00aeef,0x2f3192,0xed008c,0x898989,0x7d7d7d,0x707070,0x626262,0x555555,0x464646,0x363636,0x262626,0x111111,0x000000], 
								[0xf7977a,0xfbad82,0xfdc68c,0xfff799,0xc6df9c,0xa4d49d,0x81ca9d,0x7bcdc9,0x6ccff7,0x7ca6d8,0x8293ca,0x8881be,0xa286bd,0xbc8cbf,0xf49bc1,0xf5999d],
								[0xf16c4d,0xf68e54,0xfbaf5a,0xfff467,0xacd372,0x7dc473,0x39b778,0x16bcb4,0x00bff3,0x438ccb,0x5573b7,0x5e5ca7,0x855fa8,0xa763a9,0xef6ea8,0xf16d7e], 
								[0x9a8575,0x726357,0x524842,0x362f2c,0xc69c6d,0xa77c50,0x8c623a,0x744b24,0x613813, null,   null,    null,    null,    null,    null,    null]
							 ];
				for(var row = 0; row < colors.length; ++row){
					this.parent.colorPalette[row] = this.addSwatchRow(colors[row], row); 
				}
				]]>
			</handler>
			
			<handler name="onfocus">
				<![CDATA[
				if (wcfColorPicker["activeColorCell"]) {
					wcfColorPicker.setSliders(wcfColorPicker.activeColorCell.bgcolor);
				}
				else {
					wcfColorPicker.setSliders(0x000000); // set default color to black
				}
				]]>
			</handler>

			<handler name="onkeydown" args="k">
				<![CDATA[
				if (k >= 37 && k <= 40) { // k is either left, right, up, down
					this.doMove(k);
				}
				else if (k == 32) { // space
					wcfColorPicker.activeColorCell.onclick.sendEvent();
				}
				]]>
			</handler>

			<method name="doMove" args="k">
				<![CDATA[
				var cell = wcfColorPicker.activeColorCell;
				// move to next cell by arrow keys
				var row = cell.rowIndex;
				var col = cell.colIndex;
				var colorPalette = wcfColorPicker.colorPalette;
				if (k == 38) { // keyUp
					if (row > 0) {
						row = row - 1;
					}
				} else if (k == 40) { // keyDown
					if (row < colorPalette.length - 1 && !colorPalette[row + 1].subviews[col].disabled) {
						row = row + 1;
					}
				} else if (k == 39) { // right
					if (col < colorPalette[row].subviews.length - 1 && !colorPalette[row].subviews[col + 1].disabled) {
						col = col + 1;
					}
				} else if (k == 37) { // left
					if (col > 0) {
						col = col - 1;
					}
				}
				wcfColorPicker.setSliders(colorPalette[row].subviews[col].bgcolor);
				]]>
			</method>			
		</view>
		<view name="manualInput" x="${parent.outterPadding}">
			<simplelayout axis="x" spacing="5"/>
			<view name="swatch" width="36" height="48">		
				<wcfBorderedView name="color" y="6" width="36" height="36" borderSize="1" borderColor="0x898989" bgcolor="black"/>
				<handler name="onclick">
					<![CDATA[
					wcfColorPicker.doSelect();
					]]>
				</handler>
			</view>
			<view name="sliders" height="${parent.swatch.height+15}">
				<wcfSlider name="red" labelText="R" y="0"/>	
				<wcfSlider name="green" labelText="G" y="${(parent.height - this.height) / 2}" />	
				<wcfSlider name="blue" labelText="B" y="${parent.height - this.height}" />	
				
				<handler name="oninit"><![CDATA[
					this.setColorDel = new lz.Delegate(this, "selectColor");
					this.setColorDel.register(this.red, "onvalue");
					this.setColorDel.register(this.green, "onvalue");
					this.setColorDel.register(this.blue, "onvalue");
					this.selectColor();
					]]>
				</handler>
				
				<method name="destroy"><![CDATA[
					this.setColorDel.unregisterAll();
					delete this.setColorDel;
					super.destroy(); 
					]]>
				</method>
				<method name="getColor"><![CDATA[
					return this.red.value * 65536 + this.green.value * 256 + this.blue.value; 
					]]>
				</method>
				
				<method name="selectColor" args="e=null"><![CDATA[
					parent.swatch.color.setAttribute('bgcolor', this.getColor());
					parent.parent.hiliteColorCell(this.getColor()); 
					]]>
				</method>
			</view>
			<view name="padding" width="0" height="${parent.sliders.height}"/>
		</view>
		
		<!--- @keywords private -->
		<method name="destroyDelegateMethod" args="e=null">
			<![CDATA[
			this.destroy();
			]]>
		</method>
		
		<!--- @keywords private -->
		<method name="destroy">
			<![CDATA[
			if (this["doSelectDel"]) {
				this.doSelectDel.unregisterAll();
				delete this.doSelectDel;
			}
			super.destroy();
			]]>
		</method>
				
		<method name="setSliders" args="color"><![CDATA[
			if(color == null || typeof(color) == 'undefined'){
				return; 
			}
			var sliders = this.manualInput.sliders; 
			
			var blue = color % 256; 
			sliders.blue.setValue(blue);
			
			var green = Math.floor((color % 65536 - blue)/256); 
			sliders.green.setValue(green); 
			
			var red = Math.floor(color / 65536); 
			sliders.red.setValue(red); 
			]]>
		</method>
		
		<method name="getColorCell" args="color"><![CDATA[
			if(!this.colorMap){
				return null; 
			}
			
			return this.colorMap[color]; 
			]]>
		</method>
		
		<method name="hiliteColorCell" args="color"><![CDATA[
			if(this['activeColorCell']){
				this.activeColorCell.removeHilite(); 
				this.activeColorCell = null; 
			}
			
			var colorCell = this.getColorCell(color); 
			if(colorCell){
				colorCell.hilite(); 
				this.activeColorCell = colorCell; 
			}
			]]>
		</method>
		
		<method name="doSelect" args="e=null">
			<![CDATA[
			this.setAttribute("color", this.manualInput.swatch.color.bgcolor);
			]]>
		</method>

		<handler name="onvisible">
			<![CDATA[
			if (typeof(this["doSelectDel"]) == "undefined") {
				this.doSelectDel = new lz.Delegate(this, "doSelect");
			}
			if (visible) {
				lz.Keys.callOnKeyCombo(this.doSelectDel, ['enter']);
			}
			else {
				lz.Keys.removeKeyComboCall(this.doSelectDel, ['enter']);
			}
			]]>
		</handler>		
	</wcfFloatingPane>
	
	<!--- @keywords private -->
    <class name="wcfColorCell" extends="wcfBorderedView" width="12" height="12" borderLeftSize="1" borderTopSize="1" bgcolor="${parent.bgcolor}">
	    <attribute name="colorPicker" value="null"/>
	    <attribute name="defaultBorderColor" type="color" value="0x444444"/>
	    <attribute name="borderHiliteColor" type="color" value="white"/>
	    <attribute name="disabled" type="boolean" value="false"/>
	    <attribute name="rowIndex" type="number"/>
	    <attribute name="colIndex" type="number"/>
	    
		<handler name="onmouseover"><![CDATA[
			if(this.disabled){
				return; 
			}
			this.hilite(); 
			]]>
		</handler>	
		
		<method name="hilite"><![CDATA[
			this.setAttribute("borderRightSize", 1); 
			this.setAttribute("borderBottomSize", 1); 
			this.setAttribute("borderColor", this.borderHiliteColor);
			]]>
		</method>
			
		<method name="removeHilite"><![CDATA[
			this.setAttribute("borderRightSize", 0); 
			this.setAttribute("borderBottomSize", 0); 
			this.setAttribute("borderColor", this.defaultBorderColor);
			]]>
		</method>
		
		<handler name="onmouseout">	
			if(this.disabled || this == this.colorPicker['activeColorCell']){
				return; 
			}
			this.removeHilite(); 
		</handler>		
				
		<handler name="onclick">
			<![CDATA[
			if (!this.disabled) {
				this.colorPicker.setSliders(this.bgcolor);
				wcfColorPicker.doSelect();
			}
			]]>
		</handler>
					
    </class>
    
    <!--- @keywords private -->
	<class name="wcfSlider">
		<attribute name="sliderWidth" type="number" value="140"/>
		<attribute name="labelText" type="string" value=""/>
		<attribute name="showValue" type="boolean" value="true"/>
		
		<!--  the minimum value of the slider. That is, the value with which the slider starts -->
		<attribute name="minValue" type="number" value="0"/>
		
		<!--  The maximum value of the slider. That is, the value at which the slider ends -->
		<attribute name="maxValue" type="number" value="255"/>
		
		<attribute name="value" type="number" value="${Math.round(sliderTrackDark.width / (sliderWidth - sliderBar.width) * (maxValue - minValue))}"/>
		
		<view name="sliderTrackDark" x="0" y="${(parent.height - this.height)/2}"  width="${parent.sliderBar.x}" stretches="width" resource="sliderTrackDark">
			<handler name="onclick"><![CDATA[
				classroot.moveSliderBar(classroot.getMouse("x")); 
				]]>
			</handler>
		</view>
		<view name="sliderBar" x="0" y="${(parent.height - this.height) / 2}" resource="sliderBar" onmousedown="dragger.setAttribute('applied', true)" onmouseup="dragger.setAttribute('applied', false)">
			<dragstate name="dragger" drag_axis="x" drag_min_x="0" drag_max_x="${parent.sliderWidth-this.width}"/>
		</view>
		<view name="sliderTrack" x="${parent.sliderBar.x + parent.sliderBar.width}" y="${parent.sliderTrackDark.y}" width="${parent.sliderWidth - parent.sliderBar.x - parent.sliderBar.width}" stretches="width" resource="sliderTrack">
			<handler name="onclick"><![CDATA[
				classroot.moveSliderBar(classroot.getMouse("x")); 
				]]>
			</handler>
		</view>

		<text name="label" visible="${parent.labelText || parent.showValue}" x="${parent.sliderTrack.x + parent.sliderTrack.width + 5}">
			<state applied="${classroot.labelText &amp;&amp; classroot.showValue}">
				<attribute name="text" value="${classroot.labelText+': '}"/>
			</state>
			
			<state applied="${classroot.labelText &amp;&amp; !classroot.showValue}">
				<attribute name="text" value="${classroot.labelText}"/>
			</state>
		</text>

		<wcfInputText name="colorValue" visible="${parent.labelText || parent.showValue}" x="${this.parent.label.x + 17}" 
			width="35" height="20">
			
			<handler name="oninit"><![CDATA[
				this.setText(classroot.value);
				]]>
			</handler>
			
			<handler name="onvalue" reference="classroot">
				<![CDATA[
				if (!this["valueLocked"]) {
					this.setText(classroot.value);
				}
				]]>
			</handler>

			<handler name="ontext">
				<![CDATA[
				var val = this.getText();
				if (wcfStringUtil.isInteger(val)) {
					val = parseInt(val);
					if (val >= this.parent.minValue && val <= this.parent.maxValue) {
						this.valueLocked = true;
						this.parent.setValue(val);
						this.valueLocked = false;
					}
				}
				]]>
			</handler>

			<handler name="onblur">
				<![CDATA[
				this.setText(classroot.value);
				]]>
			</handler>
		</wcfInputText>
		
		<method name="moveSliderBar" args="toX"><![CDATA[
			var maxX = this.sliderWidth - this.sliderBar.width; 
			
			if(toX > maxX){
				toX = maxX; 
			}
			this.sliderBar.setAttribute('x', toX); 
			]]>
		</method>
		<method name="setValue" args="value"><![CDATA[
			// If The given value is empty, the slider will be rest to the min value
			if(value == null || typeof(value) == 'undefined' || value < this.minValue){
				value = this.minValue; 
			}
			
			var ratio = (value - this.minValue) / this.maxValue; 
			if(ratio > 1){
				ratio = 1; 
			}
			
			this.sliderBar.setAttribute('x', (this.sliderWidth - this.sliderBar.width)* ratio); 
			
			]]>
		</method>
	</class>
</library>
