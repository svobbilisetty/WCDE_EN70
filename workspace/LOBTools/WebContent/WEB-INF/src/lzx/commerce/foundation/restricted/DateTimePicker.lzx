<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2007, 2009 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->
<library>
	<!---
		@keywords private
		An instance of this class allows users to pick both date and time from a {@link wcfDatePicker}, and a 
		{@link wcfTimePicker}, respectively.  
	 -->
	<class name="wcfBaseDateTimePicker">
		<!--- 
			@keywords private
			Indicates that a valid date has been entered into the date component
			of the date time picker. This is used to enable/disable the time
			component.
		 -->
		<attribute name="hasDate" type="boolean" value="false"/>
		
		<!--- 
			true if this date time picker is enabled. False otherwise. 
		 -->
		<attribute name="enabled" type="boolean" value="true"/>
		<!---
			When true, the time of day will default to 23:59:59:999 when the time picker is first enabled.  
			Otherwise start of day is used 00:00:00:001. 
		-->
		<attribute name="endOfDay" type="boolean" value="false"/>
		
		<!---
			Display the preferred time zone next to the time picker. The default value is <code>true<code>.
		-->
		<attribute name="showTimeZone" type="boolean" value="true"/>
		
		<view name="dpview">
			<wcfDatePicker name="datepicker" enabled="${classroot.enabled}">
				<method name="storeValue">
					<![CDATA[
					super.storeValue();
					classroot.setAttribute("hasDate", this.getDate() != null);
					classroot.storeValue();
					]]>
				</method>
			</wcfDatePicker>
		</view>
		<view name="tpview" x="${classroot.dpview.width + 5}">
			<wcfTimePicker name="timepicker" enabled="${classroot.enabled &amp;&amp; classroot.hasDate}" 
				showTimeZone="${classroot.showTimeZone}">
				<method name="storeValue">
					<![CDATA[
					super.storeValue();
					classroot.storeValue();
					]]>
				</method>
				
				<handler name="onhasDate" reference="classroot">
					<![CDATA[
					if (!classroot.hasDate) {
						this.setTime(null);
					}else if (this.getTimeString() == "") {
						this.setTime(classroot.getDateTime());
					}
					]]>
				</handler>
			</wcfTimePicker>
		</view>
		
		<!--- 
			@keywords private
			Sets the selected datetime value with a given new value
			@param newDateTime Date the new value to set to the selected datetime value
		 -->
		<method name="setDateTime" args="newDateTime">
			<![CDATA[
			this.dpview.datepicker.setDate(newDateTime);
			this.tpview.timepicker.setTime(newDateTime);
			this.setAttribute("hasDate", this.dpview.datepicker.getDate() != null);
			]]>
		</method>
		
		<!---
			@keywords private
			@return the selected datetime value
		 -->
		<method name="getDateTime">
			<![CDATA[
			var dateTime = null;
			var date = this.dpview.datepicker.getDate();
			var time = this.tpview.timepicker.getTime();
			if (date != null && time != null) {
				dateTime = new Date(date);
				dateTime.setHours(time.getHours()); 
				dateTime.setMinutes(time.getMinutes());
				dateTime.setSeconds(time.getSeconds());
				dateTime.setMilliseconds(time.getMilliseconds()); 
			}
			else if (this.tpview.timepicker.getTimeString() == "") {
				dateTime = date;
				if(this.endOfDay  && dateTime != null){
					dateTime = new Date(date);
					dateTime.setHours(23); 
					dateTime.setMinutes(59);
					dateTime.setSeconds(59);
					dateTime.setMilliseconds(999); 
				}
			}
			return dateTime;
			]]>
		</method>
		
		<!---
			@keywords private
			Store the new value.
		 -->
		<method name="storeValue"/>
	</class>
	
	<!---
		@keywords private
		Simular to {@link wcfBaseDateTimePicker} but is used with properties.  The selected date and time will be combined into a datetime value and 
		get stored in the bound property. The following is an example of using this class: 
		
		@START_CODE
			<wcfDateTimePicker property="${yourPropertyReference}"/>
		@END_CODE
	 -->
	<class name="wcfDateTimePicker" extends="wcfBaseDateTimePicker">
		<!--- Reference to wcfModelProperty object that is being edited. -->
		<attribute name="property" value="null" setter="setProperty(property)"/>

		<!--- 
			@keywords private
		-->
		<method name="destroy">
			if (this["updateValueDel"]) {
				this.updateValueDel.unregisterAll();
				delete this.updateValueDel;
			}
			super.destroy();
		</method>
		
		<!--- 
			@keywords private
		 -->
		<handler name="oninit">
			<![CDATA[
			if (this["property"]) {
				this.updateValue();
			}
			]]>
		</handler>
		
		<!---
			@keywords private
			Sets a new property object.
			@param wcfModelProperty the new property to be set to the bound property in this datetime picker. 
		-->
		<method name="setProperty" args="newProperty">
			<![CDATA[
			if (typeof(this["property"]) == "undefined" || newProperty != this["property"]) {
				if (typeof(this.updateValueDel) == "undefined") {
					this.updateValueDel = new lz.Delegate(this, "updateValue");
				}
				this.updateValueDel.unregisterAll();
				this.property = newProperty;
				if (this.property) {
					this.updateValueDel.register(this.property, "onvalue");
					this.updateValue();
				}
				else if (this.isinited) {
					this.dpview.datepicker.setDateString("");
					this.tpview.timepicker.setTimeString("");
					this.setAttribute("hasDate", false);
				}
			}
			]]>
		</method>
		
		<!---
			@keywords private
			Updates the widget with a new property value.
		-->
		<method name="updateValue" args="e=null">
			<![CDATA[
			if (this.isinited) {
				var value = this.property.value;
				var newDateTime = wcfDateUtil.parse(value, wcfDateUtil.DATE_TIME_FORMAT);
				if (newDateTime != null) {
					this.setDateTime(newDateTime);
				}
				else {
					var newDate = null;
					var dateString = "";
					var timeString = "";
					if (value != null && value != "") {
						var delimitPos = value.indexOf(" ");
						dateString = value;
						if (delimitPos != -1) {
							dateString = value.substring(0, delimitPos);
							newDate = wcfDateUtil.parse(dateString, wcfDateUtil.getDatePreferenceFormat());
							if (newDate != null) {
								timeString = value.substring(delimitPos + 1);
							}
							else {
								dateString = value;
							}
						}
					}
					this.dpview.datepicker.setDateString(dateString);
					this.tpview.timepicker.setTimeString(timeString);
					this.setAttribute("hasDate", newDate != null);
				}
			}
			]]>
		</method>
		
		<!---
			@keywords private
			Stores the property value with the selected datetime value
		-->
		<method name="storeValue">
			<![CDATA[
			if (this["property"]) {
				var currentDateTime = wcfDateUtil.parse(this.property.value, wcfDateUtil.DATE_TIME_FORMAT);
				var newDateTime = this.getDateTime();
				if (newDateTime != null) {
					if(wcfDateUtil.normalizeToMilliseconds(newDateTime) != wcfDateUtil.normalizeToMilliseconds(currentDateTime)){
						var newValue = wcfDateUtil.format(newDateTime, wcfDateUtil.DATE_TIME_FORMAT);
						this.property.change(newValue);
						if(wcfLogger.enabled){
							wcfLogger.log("com.ibm.commerce.lobtools.foundation.view", "INFO", "wcfDateTimePicker", "storeValue", "updates the model property " + this.property.propertyName + " with new value " + newValue + this.property.o.logString());
						}
					}
				}
				else {
					var newValue = this.dpview.datepicker.getDateString();
					var timeString = this.tpview.timepicker.getTimeString();
					if (timeString != "") {
						newValue += " " + timeString;
					}
					this.property.change(newValue);
					if(wcfLogger.enabled){
						wcfLogger.log("com.ibm.commerce.lobtools.foundation.view", "INFO", "wcfDateTimePicker", "storeValue", "updates the model property " + this.property.propertyName + " with new value " + newValue + this.property.o.logString());
					}
				}
			}
			]]>
		</method>
	</class>
	
</library>
