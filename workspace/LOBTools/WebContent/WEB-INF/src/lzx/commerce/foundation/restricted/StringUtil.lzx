<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2007, 2010 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->
<library>

	<!---
		@keywords private

		This utility node provides methods for strings checking and manipulation.
	-->
	<node id="wcfStringUtil">

		<!---
			Substitute all occurrences of "%{i}" with another strings. Where i is an integer
			greater or equal to zero.

			Sample usage:
			@START_CODE
			var s1 = "Good %{0}, %{1}"
			var result1 = wcfStringUtil.substituteparameters(s1, "Morning", "Peter");
			var result2 = wcfStringUtil.substituteparameters(s1, "Afternoon", "Becky");
			@END_CODE

			In the sample above, result1 value is "Good Morning, Peter"
			result2 value is "Good Afternoon, Becky"

			@param string template: The original string that needs subsitution
			@returns string: the result
		-->
		<method name="substituteparameters" args="template">
			<![CDATA[
				for (var i = 0; i < (arguments.length-1); i++) {
					template = wcfStringUtil.replace(template, "%{"+i+"}", arguments[i+1]);
				}

				return template;
			]]>
		</method>
		
		<!---
			Insert a string into another string at a given index 

			Sample usage:
			@START_CODE
			var result1 = wcfStringUtil.insertStringAt("Good Morning, Peter", "Becky and ", 15);
			@END_CODE

			In the sample above, result1 value is "Good Morning, Becky and Peter"

			@param string str: The original string
			@param string insert: The string that you want inserted
			@param string index: The position of the original string that you want the new string inserted to
			@returns string: The result
		-->
		<method name="insertStringAt" args="str,insertStr,index">
			<![CDATA[
				var str1 = str.slice(0,index);
				var str2 = str.slice(index,str.length);
				return str1 + insertStr + str2;
			]]>
		</method>

		<!---
			Replace part of the string with another string

			Sample usage:
			@START_CODE
			var result1 = wcfStringUtil.replace("Good Morning, Peter", "Peter", "Becky");
			@END_CODE

			In the sample above, result1 value is "Good Morning, Becky"

			@param string s: The original string
			@param string r: The sub-string you want to replace
			@param string n: The string you want to sub-string to be replace with
			@returns string: The result
		-->
		<method name="replace" args="s, r, n">
			<![CDATA[
				return s.split(r).join(n);
			]]>
		</method>
		<!---
			@keywords private
		-->
		<attribute name="trimWhiteSpaceAndLineFeed" value="{' ': true, '\r': true, '\n': true, '\t': true}"/>
		<!---
			@keywords private
		-->
		<attribute name="trimWhitespaceOnly" value="{' ': true}"/>

		<!---
			Trims the leading and trailing white spaces of a given string

			@param string s: the string to be trimmed
			@param string whitespaceChars: optional parameter to override what need to be trimmed
			@returns string: the result
		 -->
		<method name="trim" args="str, whitespaceChars=null">
			<![CDATA[
				if (typeof(str) == "undefined" || str == null) {
					return str;
				}
				str = str.toString();
				if (whitespaceChars == null) {
					whitespaceChars = this.trimWhitespaceOnly;
				}
			    var len = str.length;
			    var sindex = 0;
			    var eindex = str.length -1;
			    var ch;
			    while (sindex < len) {
			        ch = str.charAt(sindex);
			        if (whitespaceChars[ch] != true) break;
			        sindex++;
			    }
			
			    while (eindex > sindex) {
			        ch = str.charAt(eindex);
			        if (whitespaceChars[ch] != true) break;
			        eindex--;
			    }
			        
			    return str.slice(sindex,eindex+1);

			]]>
		</method>
		
		<method name="trimAllSpace" args="s">
			<![CDATA[
			if (s) {
				
				for (var i= s.indexOf(" "); i>=0; i= s.indexOf(" ")) {
					s = s.substring(0, i).concat(s.substring(i+1, s.length));
				}
			}else{
				return null;
			}
			return s;
			]]>
		</method>

		<!---
			@keywords private
			Add characters to the left of the string until the length reaches a certain length.
			If the specified length is smaller than the original string.  Then the original
			string will be return.

			@param string s: the original string
			@param string c: the character
			@param number stringlength: the length of the resulting string
			@returns string: the result
		-->
		<method name="padleft" args="s, c, stringlength">
			<![CDATA[
				var n = stringlength - s.toString().length;

				var padstr = "";

				for (var i = 0; i < n; i++) {
					padstr += c;
				}

				return padstr + s;
			]]>
		</method>

		<!---
			@keywords private
			Add characters to the right of the string until the wrong reach a certain length.
			If the specified length is smaller than the original string.  Then the original
			string will be return.

			@param string s: the original string
			@param string c: the character
			@param number stringlength: the length of the resulting string
			@returns string: the result
		-->
		<method name="padright" args="s, c, stringlength">
			<![CDATA[
				var n = stringlength - s.toString().length;

				var padstr = "";

				for (var i = 0; i < n; i++) {
					padstr += c;
				}

				return s + padstr;
			]]>
		</method>

		<!---
			@keywords private
			Check if a string is empty, or contains only blanks.

			@param string s: the input string
			@returns boolean: true if the given argument is an empty string, or contains only blanks
		-->
		<method name="isBlankString" args="s">
			<![CDATA[
			if(!wcfLangUtil.isString(s)){
				s = s.toString();
			}

			return wcfStringUtil.trim(s).length == 0;
			]]>

		</method>

		<!---
			Check if a string is a number, a number can be an Integer or a decimal number.  A number should
			match the regular expression (+|-)?(.\d+ | \d+(.\d+)?)

			@param String s: string that is to be verified whether it is of decimal format. It should be
			normalized. That is, it uses dot as the decimal point, and it doesn't contain separator for thousand.
			@returns boolean: true if the given string is a valid decimal number. False otherwise.
		-->
		<method name="isNumber" args="s"><![CDATA[
			if(typeof(s) == 'undefined' || s == null){
				return false;
			}

			s = this.trim(s);
			// Number() function converts empty string to 0, and ignores single trailing decimal point
			// "e" is exponental function which is valid in number string.
			// we need to explicitly filter it for a general number string purpose.
			if(s == '' || s.charAt(s.length - 1) == '.' || s.indexOf('e') > 0 || s.indexOf('E') > 0){
				return false;
			}

			return !isNaN(Number(s));
			]]>
		</method>

		<!---
			Check if a string is an integer.  An integer string matches the following pattern: \s*(+|-)?\d+\s*.

			@param String s The string that is to be verified whether it is of integer format. It should
			not contain separator for thousand.
			@returns boolean: true if the given string is a valid integer. False otherwise.
		 -->
		<method name="isInteger" args="s"><![CDATA[
			// s is an integer string if it is a number string that does not contain decimal point
			return s && s.indexOf('.') < 0 && isNumber(s);
			]]>
		</method>

		<!---
			Construct an array by splitting strings into substrings.  Each substring is delimited by the given
			delimiter. Each substring is trimmed. Only the non-empty string will be returned. If s is undefined
			or null, empty array will be returned.

			Sample usage:
			@START_CODE
			var s1 = "Peter, John, Becky, Mary"
			var result1 = wcfStringUtil.splitAndTrim(s1, ",");
			@END_CODE

			In the sample above, result1 value is ["Peter", "John", "Becky", "Mary"]

			@param String s the string to be split
			@param String delimiter: the delimiter used to split the string s
			@returns Array: an array of the resulted strings
		 -->
		<method name="splitAndTrim" args="s, delimiter"><![CDATA[
			if(typeof(s) == 'undefined' || s == null){
				return [];
			}

			var result = [];
			var tokens = s.split(delimiter);
			for(var i = 0; i < tokens.length; ++i){
				var token = this.trim(tokens[i], this.trimWhiteSpaceAndLineFeed);
				if(token != ""){
					result.push(token);
				}
			}

			return result;
			]]>
		</method>
		
		<!---
			Abbreviate long string.
			
			Sample usage:
			@START_CODE
			var s1 = "This is a very long string";
			var result1 = wcfStringUtil.abbreviate(s1, 10);
			@END_CODE

			In the sample above, result1 value is "This is a ..."
			
			@param string s the string to be abbreviated
			@param number shortSize the length of abbreviated string
			@returns string: abbreviated string with ellipsis or original string
		-->
		<method name="abbreviate" args="s, shortSize">
			<![CDATA[
			if (s == null || typeof(s) != 'string') return s;
			return s.length > shortSize ? (s.substr(0, shortSize) + "...") : s;
			]]>
		</method>
		
		<!---
			Return a formatted string for the specified string and parameter list. It substitutes the
			parameters in the message with the values given in the parameter list.
			
			@param string str The message string.
			@param Array paramList An array of parameters that are to be substituted into the message.
			@returns string The resulting message string.
		-->
		<method name="replaceParams" args="str,paramList">
			<![CDATA[
				if (!str || str == "") {
					return str;
				}
				var paramFound = false;
				var value = str;
				
				for (var i = 0; i < paramList.length; i++){						
					paramFound = false;
					while (value.indexOf("{"+i+"}") != -1) {
						paramFound = true;
						var abbreviatedArg = this.escapeText(wcfStringUtil.abbreviate(paramList[i], 128));
						value = wcfStringUtil.replace(value, "{"+i+"}", abbreviatedArg);
					}
					if (!paramFound){	
					    if (wcfLogger.enabled) {
						     wcfLogger.log("com.ibm.commerce.lobtools.foundation.util", "INFO", "wcfStringUtil", "replaceParams", "The following argument is not found: '" + paramList[i] + "' at index " + i);
					    }	
					}
				}
				return value;
			]]>
		</method>
		
		<!---
			Returns an escaped version of the string.
			
			@param string str The string.
			@returns string The escaped version of the string.
		-->
		<method name="escapeText" args="str">
			<![CDATA[
				var textStr = str;
				if (typeof(str) != "undefined" && str != null && wcfLangUtil.isString(str)) {
				 	var escapeChars = { '>': '&gt;', '<': '&lt;'};
				 	var i;
				 	for (var ec in escapeChars) {
						while (textStr.indexOf(ec) > -1) {
							i = textStr.indexOf (ec);
							textStr = textStr.substring(0, i) + escapeChars[ec] + textStr.substring(i + ec.length);
						}
					}
				}
				
				return textStr;
			]]>
		</method>

		<!---
			Returns an unescaped version of an escaped string. This is the reverse of the <code>escapeText</code> method.
			
			@param string str The escaped string.
			@returns string The unescaped version of the string.
		-->
		<method name="unescapeText" args="str">
			<![CDATA[
				var textStr = str;
				if (typeof(str) != "undefined" && str != null && wcfLangUtil.isString(str)) {
				 	var escapeChars = { '&gt;': '>', '&lt;': '<', '&quot;': '"'};
				 	var i;
				 	for (var ec in escapeChars) {
						while (textStr.indexOf(ec) > -1) {
							i = textStr.indexOf(ec);
							textStr = textStr.substring(0, i) + escapeChars[ec] + textStr.substring(i + ec.length);
						}
					}
				}
				
				return textStr;
			]]>
		</method>
		
		<!---
			Return an encoded string for the specified string. It substitutes special characters with their 
			UTF-8 encoded equivalent. This method behaves as java URLEncoder.encode. It will encode all non-alphanumeric
			characters, except: *-._
			Also, space will be encoded as: +
			
			@param string str The string.
			@returns string The encoded string.
		-->
		<method name="encodeString" args="str">
			<![CDATA[
				// Note:
				// If it is necessary to do a replace for the % sign, that should be added at the end of the
				// replace sequence. Otherwise, there is a risk of wrongfully unencoding the string.
				// Example:
				// Original String: %2D-
				// Encoded String:
				// %  --> %25
				// 2D --> 2D
				// -  --> %2D
				// the result is: %252D%2D
				//
				// If we replace the % as one of the first steps, then the decoding would be incorrect:
				// Encoded String: %252D%2D
				// First call to replace, we find %25 and replace it for %
				// Partially decoded string: %2D%2D
				// Second call to replace, we find %2D and replace it for -
				// Decoded string: --
				
				// encodeURIComponent in OpenLaszlo encodes: *-._
				// and encodes spaces as %20
				var encodedStr = encodeURIComponent(str);
				
				// decode space character
				encodedStr = wcfStringUtil.replace(encodedStr, "%20", "+");
				
				// decode * character
				encodedStr = wcfStringUtil.replace(wcfStringUtil.replace(encodedStr, "%2A", "*"), "%2a", "*");
				
				// decode - character
				encodedStr = wcfStringUtil.replace(wcfStringUtil.replace(encodedStr, "%2D", "-"), "%2d", "-");
				
				// decode . character
				encodedStr = wcfStringUtil.replace(wcfStringUtil.replace(encodedStr, "%2E", "."), "%2e", ".");
				
				// decode _ character
				encodedStr = wcfStringUtil.replace(wcfStringUtil.replace(encodedStr, "%5F", "_"), "%5f", "_");
				
				return encodedStr;
			]]>
		</method>
		
		<!---
			Return a decoded string for the specified string. It decodes using UTF-8.
			The plus sign (+) is treated as a blank space.
			
			@param string str The string.
			@returns string The decoded string.
		-->
		<method name="decodeString" args="str">
			<![CDATA[
				// See note under encodeString for some considerations for the % sign.
				
				// encodeURIComponent in OpenLaszlo will interpret + correctly as a blank space.
				var decodedStr = decodeURIComponent(str);
				
				return decodedStr;
			]]>
		</method>
		
	</node>

</library>
