<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2007, 2012 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->
<library>
	<!---	
		<p>wcfObjectDefinition is the base class of all object definition classes. An object
		  definition is used to describe the characteristics of Management Center
		  objects of a particular object type.</p>
		<p>For example, the behaviour of categories in the Management Center is
		  described by the {@link catCatalogGroupPrimaryObjectDefinition} class, and
		  products by the {@link catProductPrimaryObjectDefinition} class. An object
		  definition defines the services and actions available to the object type,
		  such as the creation, update and deletion of objects, as well as custom
		  services and actions. Since Management Center object definitions are used
		  to describe business data from the business user perspective, they can be
		  different from the noun definitions on the server side. For example,
		  activities are described by a single <code>Activity</code> noun
		  definition on the server side, but two separate object definitions in the
		  Management Center - the {@link mktEmailActivityPrimaryObjectDefinition}
		  class for e-mail activities, and the {@link mktWebActivityPrimaryObjectDefinition}
		  class for web activities - since they have different display properties and
		  creation templates in the Management Center.</p>
		<p>wcfObjectDefinition class is a base class for all object definition classes. Object definitions can only be declared
		as children of an instance of {@link wcfBusinessObjectEditor} or as children of another instance of wcfObjectDefinition.</p>
		
		<p>An object definition class should include the following child nodes:</p>
		<ul>
			<li>A single instance of {@link wcfCreateService} can be declared as a child of an object definition. The create service will
			be used to persist new business objects described by the object definition.
		
			<li>A single instance of {@link wcfUpdateService} can be declared as a child of an object definition. The update service
			will be used to persist changes to existing business objects described by the object definition.
		
			<li>A single instance of {@link wcfDeleteService} can be declared as a child of an object definition.  The delete service
			will be used to delete business objects described by the object definition.
		
			<li>A single instance of {@link wcfRefreshService} can be declared as a child of an object definition. The refresh service
			will be used to reload business objects described by the object definition.
		
			<li>Multiple instances of {@link wcfGetChildrenService} can be declared as children of an object definition. The get children services
			will be used to load the child objects associated with business objects decribed by the object definition.

			<li>Multiple instances of {@link wcfGetReferencesService} can be declared as children of an object definition. The get
			references service will be used to load business objects that reference business objects described by the object definition.
			
			<li>Multiple instances of {@link wcfCustomService} can be declared as children of an object definition. Custom services
			will be used to perform a server process for business objects described by the object definition. Custom services
			must be explicitly triggered using the toolbar or menu.
		
			<li>Multiple instances of {@link wcfClientAction} can be declared as children of an object definition. Client actions
			will be used to perform a client side process for business objects described by the object definition. Client actions
			must be explicitly triggered using the toolbar or menu.

			<li>Multiple instances of {@link wcfViewOption} can be declared as children of an object definition. View options will be
			used to allow the business user to toggle different views of data in the properties view. View options can be used with
			{@link wcfEnablementCondition enablement conditions} to control the visibility of {@link wcfPropertyGroup property groups}
			and {@link wcfPropertyTabPane property tab panes}.

			<li>A single instance of a dataset (see the OpenLaszlo documentation for {@OLlink LzDataset}) with the name <code>template</code> can be declared as a child of an object definition. The dataset will
			be used to construct new instances of business objects described by the object definition. The template dataset can be used to
			declare default values for business object properties. It can also be used to declare child objects that will be instantiated with
			the new business object. The syntax for the template dataset is the same as the XML syntax for business objects that are loaded from
			the server. The following example demonstrates the declaration of a template dataset. The template provides a default
			value for a property named <CODE>referenceType</CODE> and indicates that a child object of object type <CODE>CatalogEntryListPrice</CODE>
			is to be created when new instances of the business object are created.
			@START_CODE
			<dataset name="template">
				<referenceType>MerchandisingAssociations</referenceType>
				<object objectType="CatalogEntryListPrice" />
			</dataset>
			@END_CODE

			<li>Multiple instances of {@link wcfPropertyDefinition} can be declared as children an object definition. There is no
			requirement to have a property definition for every business object property. Property definitions are only needed if
			there is a need to describe a property.
		
			<li>Multiple instances of {@link wcfValidator} can be declared as children of an object definition. Validators declared as
			immediate children of an object definition are expected to perform object level validation. Object level validation
			might check for the existence of required child objects or check dependencies between properties. If the validation
			check is scoped to a specific property, then a property level validator should be used.
		
			<li>Multiple instances of {@link wcfNavigationListDefinition} can be declared as children of an object definition. Navigation lists
			are used to show lists of objects that are related to the business objects described by the object definition. For example,
			a navigation list can be used to show the list of catalog entries in a catalog group.
			
			<li>A single instance of {@link wcfFilter} can be declared a child of an object definition. The filter will
			be used to filter the visibility of child business objects that are displayed in the utilities view details view when
			a business object described by the object definition is selected in the utilities view browse tree. If this is an organizational
			object, then this filter will be used to filter the objects displayed in any child list.
			
			<li>Multiple instances of {@link wcfFileTypes} can be declared as a child of an object definition whose {@link wcfObjectDefinition#isFileObject isFileObject}
			flag is set to true. These objects are used to define which file types are allowed to be uploaded by the object being defined. If there are no
			{@link wcfFileTypes} defined then all files will be permitted. For example, a <code>sampleImageFile</code> might restrict the valid file types to
			image files only. To do so, it would have the following {@link wcfFileTypes} as a child of the object definition:
			@START_CODE
			<FileTypes
				description="Image Files"
				extension="*.jpg;*.gif"/>
			@END_CODE
			
			<li>A single instance of {@link wcfEnablementCondition} with the <code>conditionType</code> attribute set to <code>"parentObjectCondition"</code>
			can be declared a child of an object definition. The enablement condition will be used to determine if new instances of this object type can
			be created. The enablement condition will be resolved against the potential parent object. If an enablement condition is declared without
			specifying <code>conditionType</code>, then it will be treated as the "parentObjectCondition".

			<li>A single instance of {@link wcfEnablementCondition} with the <code>conditionType</code> attribute set to <code>"childObjectCondition"</code>
			can be declared as a child of a {@link wcfParentReferenceObjectDefinition}, {@link wcfCollectionReferenceObjectDefinition} or
			{@link wcfReferenceObjectDefinition}. The enablement condition will be used to determine if new instances of this
			object type can be created. When the framework detects that the business user is attempting to create an instance of the reference object, the enablement condition
			will be resolved against the potential child object.
			
			<li>A single instance of {@link wcfEnablementCondition} with the <code>conditionType</code> attribute set to <code>"refreshCondition"</code>
			can be declared as a child of an object definition. The enablement condition will be used to determine whether refresh service will be invoked for this object. 
			
			<li>Multiple instances of {@link wcfObjectTemplate} can be declared as a child of an object definition if the {@link wcfObjectDefinition#templateTypeProperty}
			has been specified.

			<li>A single instance of {@link wcfObjectCompatibilityCheck} can be declared as a child of a {@link wcfParentReferenceObjectDefinition},
			{@link wcfCollectionReferenceObjectDefinition} or {@link wcfReferenceObjectDefinition}. The compatibility check will be used to determine
			if new instances of this object type can be created. When the framework detects that the business user is attempting to create an instance
			of the reference object, the compatibility check will be invoked to determine if creating a relationship of this type between the potential
			parent and child objects is allowed.
			
			<li>Multiple instances of {@link wcfDisplayNameStyle} can be declared as children of an object definition. Display name styles
			are used to control the style used by the framework when displaying the display name of a business object. For example,
			a display name style can be used to change the display name of published categories to green.
			
			<li>A single instance of {@link wcfSaveHandler} can be declared as a child of an object definition. A save handler is used to provide
			custom save logic for instances of this object definition.
			
			<li>A single instance of {@link wcfPopulateNewObjectService} can be declared as a child of an object definition. The populate new object service will
			be used to dynamically populate a new object that is created from a user request originating in store preview.

			<li>A single instance of {@link wcfGetPreviewURLService} can be declared as a child of an object definition. The get Preview URL service
			will be used to retrieve the SEO URL of the business objects described by the object definition.
		</ul>
		
		<p>An object definition class should not extend the wcfObjectDefinition class directly; instead, it should extend one of the subclasses of wcfObjectDefinition.
		 See the reference documentation of the wcfObjectDefinition subclasses for more details.
		</p>
		<h4>Examples</h4>
		<p>The following is an example of a simple {@link wcfPrimaryObjectDefinition primary object definition}:
			@START_CODE
				<PrimaryObjectDefinition definitionName="CarType"
						objectType="CarType"
						creatable="true"
						displayName="Car"
						displayNameProperty="name"
						idProperty="id"
						newDisplayName="New Car"
						newObjectMenuItemText="New Car"
						propertiesDefinitionName="CarBuilder"
						searchType="FindCars"
						icon="carIcon"
						headerIcon="carHeaderIcon">
			
					<RefreshService url="/cmc/GetCar">
						<ServiceParam name="storeId" />
						<ServiceParam name="carId" propertyName="id" />
					</RefreshService>
					<GetChildrenService url="/cmc/GetCarDescriptions">
						<ServiceParam name="storeId" />
						<ServiceParam name="carId" propertyName="id" />
					</GetChildrenService>
					<GetChildrenService url="/cmc/GetCarComponents">
						<ServiceParam name="storeId" />
						<ServiceParam name="carId" propertyName="id"/>
					</GetChildrenService>
					<CreateService url="/cmc/CreateCar">
						<ServiceParam name="storeId" />
					</CreateService>
					<UpdateService url="/cmc/SaveCar">
						<ServiceParam name="storeId" />
						<ServiceParam name="carId" propertyName="id" />
					</UpdateService>
					<DeleteService url="/cmc/DeleteCar">
						<ServiceParam name="storeId" />
						<ServiceParam name="carId" propertyName="id" />
					</DeleteService>
					<CustomService shortcutKeys="['Control', 'Shift', 't']" url="/cmc/TestCar"
							displayName="Test Car" toolbarIcon="testCarIcon">
						<ServiceParam name="storeId" />
						<ServiceParam name="carId" propertyName="id" />
					</CustomService>
					
					<GetPreviewURLService url="/cmc/GetCarPreviewURL">
						<ServiceParam name="storeId" />
						<ServiceParam name="carId" propertyName="id" />
					</GetPreviewURLService>
					
					<Xml name="template">
						<engineType>gasoline</engineType>
						<numberOfSeats>4</numberOfSeats>
					</Xml>
			
					<CarDescription />
					<CarComponent />
			
				</PrimaryObjectDefinition>
			@END_CODE
			See the source code of the catalog and marketing object definitions for more detailed examples.
		</p>
		@keywords abstract
	-->
	<class name="wcfObjectDefinition" placement="objectDefinitionPlacement" extends="node">
		<!---
			A string to identify the object type. All object definitions declared under the same parent must have
			unique object types. This is a required attribute.
		-->
		<attribute name="objectType" type="string"/>
		<!---
			A string to identify the base object type. The base object type will be used to identify an object definition
			instance upon which this object definition will be based. The framework will search for an object definition
			whose "objectType" attribute matches this object definition's "baseType". The base object definition must
			be explicitly declared in the same {@link wcfBusinessObjectEditor} instance as this object definition
			or it must be registered in the global registry using {@link wcfRegisterObjectDefinition}. If the base object
			definition is not found, then the framework will check for a class with the name specified by "baseType".
			The object definition identified by "baseType" can be a {@link wcfObjectDefinition#isBaseDefinition base definition}
			or it can be an ordinary object definition. A base object definition can itself use "baseType" and be based on another object
			definition instance provided there are no loops in the definition chain. The use of "baseType" is preferred
			over the use of regular class inheritance because the base object definition's child node instances will be shared, not re-instantiated
			with each object definition instance.
			
			<p>Instances of {@link wcfChildObjectDefinition} that use "baseType" must refer to an object
			definition declared as a base definition. Child object definitions cannot use other ordinary
			child object definitions as their base type.

			<p>The following example demonstrates the declaration of a primary object definition that
			uses "BaseProduct" as its base type.			
			@START_CODE
				<PrimaryObjectDefinition definitionName="Product"
					baseDefinitionName="catBaseProductPrimaryObjectDefinition"
					objectType="Product"
					creatable="true"
					icon="productIcon"
					headerIcon="productHeaderIcon">
					...
        		</PrimaryObjectDefinition>
			@END_CODE
		-->
		<attribute name="baseType" type="string"/>
		<!---
			A boolean to indicate that this wcfObjectDefinition is a base definition and should be ignored by the
			framework. Other object definitions can use a base definition object type as their {@link wcfObjectDefinition#baseType}
			and inherit the base definition's properties.
		-->
		<attribute name="isBaseDefinition" type="boolean" value="false"/>
		<!---
			@keywords private
			Stores the wcfObjectDefinition that is the base definition for this wcfObjectDefinition, if there is one.
		-->
		<attribute name="baseDefinition" value="${null}"/>
		<!---
			An optional comma separated list of object group names for this	object type. An object group is a way to refer to several
			related object types with a single string. An object group name can be provided instead of the object type when an
			object path is required.
			
			For example, consider the following two definitions:
				@START_CODE
					<ObjectDefinition objectType="myObjectType1" objectGroups="myObjectGroup,myOtherObjectGroup" ... />
					<ObjectDefinition objectType="myObjectType2" objectGroups="myObjectGroup" ... />
				@END_CODE
				
			In the example above, the two definitions have unique object types but both will match with an object path specified
			as "myObjectGroup". Only myObjectType1 will match myOtherObjectGroup.
		-->
		<attribute name="objectGroups" type="string" value=""/>
		<!---
			Indicates that the object type should be visible in the create menu. When this attribute is set to true,
			this object type will appear as an option for creation on the toolbar and menu.
			
			The default value for this attribute is "false".
		-->
		<attribute name="creatable" type="boolean"/>
		<!--- @keywords private -->
		<attribute name="creatable__type" type="string" value="boolean"/>
		<!---
			@keywords private
			The services declared for this object definition that will return the child objects associated with a specified
			parent object. This generally contains an instance of {@link wcfGetChildrenService} but it is possible to have multiple
			services defined.
		-->
		<attribute name="getChildrenServices" value="${[]}"/>
		<!---
			@keywords private
			The services declared for this object definition that will return references to a specified child object.
			This generally contains an instance of {@link wcfGetReferencesService} but it is possible to have multiple
			services defined.
		-->
		<attribute name="getReferencesServices" value="${[]}"/>
		<!---
			@keywords private
			The object templates associated with this object definition.
		-->
		<attribute name="objectTemplates" value="${{}}"/>
		<!---
			@keywords private
			The array of object templates associated with this object definition.
		-->
		<attribute name="objectTemplatesArray" value="${[]}"/>
		<!---
			@keywords private
			The save service declared for this object definition. This is often an instance of {@link wcfUpdateService}.
			The saveService will be invoked when an object is saved.
		-->
		<attribute name="saveService" value="null"/>
		<!---
			@keywords private
			The create service declared for this object definition. This is often an instance of {@link wcfCreateService}. The
			createService is used when creating new objects with this {@link wcfObjectDefinition#objectType}.
		-->
		<attribute name="createService" value="null"/>
		<!---
			@keywords private
			The delete service declared for this object definition. The delete service is normally an instance of {@link wcfDeleteService}.
			The deleteService is used to delete objects of this {@link wcfObjectDefinition#objectType}.
		-->
		<attribute name="deleteService" value="null"/>		
		<!---
			@keywords private
			The save handler declared for this object definition. By default, this attribute is not defined.
			If this handler is defined, it will be executed when save is performed.
		-->
		<attribute name="saveHandler" value="null"/>
		<!---
			@keywords private
			The new handler declared for this object definition. By default, this attribute is not defined.
			If this handler is defined, it will be executed when new instance of this object type is created by the user.
		-->
		<attribute name="newHandler" value="null"/>
		<!---
			@keywords private
			The open handler declared for this object definition. By default, this attribute is not defined.
			If this handler is defined, it will be executed when this object is opened by the user.
		-->
		<attribute name="openHandler" value="null"/>
		<!---
			@keywords private
			The map of this wcfObjectDefinition's property definitions. A property definition is used to describe individual object
			properties. Property definitions are only required when additional information about a property is required by the widgets that
			will display that property.
			
			This map contains the {@link wcfPropertyDefinition} that appear as children of this wcfObjectDefinition. Each entry in the map is
			an array. If there is more than one property definition with the same property name, then they are stored in the same array.
		-->
		<attribute name="propertyDefinitions" value="${{}}"/>
		<!---
			@keywords private
			The custom services declared for this object definition. These are normally instances of {@link wcfCustomService} and
			are used to define services that are unique to objects with this wcfObjectDefinition.
		-->
		<attribute name="customServices" value="${[]}"/>
		<!---
			@keywords private
			The client actions declared for this object definition. These are normally instances of {@link wcfClientAction} and
			are used to define client side actions that are unique to objects with this wcfObjectDefinition.
		-->
		<attribute name="clientActions" value="${[]}"/>
		<!---
			@keywords private
			The view options declared for this object definition. These are normally instances of {@link wcfViewOption} and are used
			to define view options that are unique to objects with this wcfObjectDefinition.
		-->
		<attribute name="viewOptions" value="${[]}" />
		<!---
			The display name for this object type. This name will be used when the framework needs to refer to this object type.
			For example, the "Promotion" object type has this value set to "Promotion" and the framework
			uses this value to display "Promotion" in the "New" menu.
			Do not confuse this attribute with "displayNameProperty" which is used when the
			framework needs to refer to a specific instance of this object type.
		-->
		<attribute name="displayName" type="string"/>
		<!---
			This attribute contains the name of the class to use for displaying the properties view of objects with
			this {@link wcfObjectDefinition#objectType}. Generally, this class is a subclass of {@link wcfObjectProperties}.
			@type string
		-->
		<attribute name="propertiesClass" type="string" value="${null}"/>
		<!---
			This attribute contains the name of the definition to use for displaying the properties view of objects with
			this {@link wcfObjectDefinition#objectType}. Generally, this definition is an instance of {@link wcfObjectProperties}.
			Only specify this attribute if you are not providing a value for <code>propertiesClass</code>.
			@type string
		-->
		<attribute name="propertiesDefinitionName" type="string" value="${null}"/>
		<!---
			The attribute contains the name of the class to use for displaying the summary view of objects with
			this {@link wcfObjectDefinition#objectType}. The summary view is used by {@link wcfFlowElement}.
			@type string, must be a class that extends wcfFlowElementSummary
		-->
		<attribute name="summaryClass" type="string" value="${null}"/>
		<!---
			@keywords private
			List of navigation list definitions. A navigation list definition is used to bind one or more child object types
			to a list view. An object type can have many navigation list definitions.
			
			This list contains the {@link wcfNavigationListDefinition} that appear as children of this wcfObjectDefinition.
		-->
		<attribute name="navigationListDefinitions" value="${[]}" when="once"/>
		<!---
			@keywords private
			A list of wcfValidator instances. A validator is used to perform client side validation on property values. A
			business object can have more than one validator. A validator can examine one or many properties.
			
			This map contains the {@wcfValidator} objects that appear as children of this wcfObjectDefinition.
		-->
		<attribute name="validators" value="${[]}"/>
		<!---
			@keywords private
			This attribute contains a reference to the default navigation list definition. The default value of this attribute
			is null.
		-->
		<attribute name="defaultNavigationList" value="null"/>
		<!---
			This attribute identifies which object property contains the unique ID for an instance of this object type.
			The default value of this attribute is the empty string.
		-->
		<attribute name="idProperty" value="" type="string"/>
		<!---
			This attribute identifies which object property will be used as the display name for an instance of
			this object type. This value will be used when the framework needs a simple name to refer to a specific object instance.
			For example, the value of the "identifier" property is used to display a "CatalogGroup" instance in the explorer tree.
			Do not confuse this with "displayName" which is used when the framework needs to refer to the object type
			and not a specific object instance.
		-->
		<attribute name="displayNameProperty" value="" type="string"/>
		<!---
			@keywords private
			This attribute contains a list of wcfDisplayNameStyle instances that 
			can change the style used to display the display name of a business object
			based on the enablement conditions.
		-->
		<attribute name="displayNameStyles" value="${[]}" type="string"/>
		<!---
			This attribute defines the object path that will be used to locate {@link wcfObjectDefinition#displayNameProperty}.
			The default value of this attribute is null.
		-->
		<attribute name="displayNameObjectPath" value="${null}" type="string"/>
		<!---
			This attribute identifies which object property will be used as the long display name for an instance of
			this object type. The default value of this attribute is the empty string. The long display name is used
			by wcfGridDisplayName when {@link wcfGridDisplayName#showLongDisplayName} is set to true. A long display name
			is useful when displaying a list of objects without their parent context. For example when you display
			the search results for a list of files the full path should be displayed. But when
			you are displaying a list of files in the context of their parent directory, then only the file name
			needs to be displayed.
		-->
		<attribute name="longDisplayNameProperty" value="" type="string"/>
		<!---
			This attribute defines the object path that will be used to locate {@link wcfObjectDefinition#longDisplayNameProperty}.
			The default value of this attribute is null.
		-->
		<attribute name="longDisplayNameObjectPath" value="${null}" type="string"/>

		<!---
			This attribute defines the text to be used as the display name for a new instance of this object type.
			This display name will be used until a value is entered for the new object's {@link wcfObjectDefinition#displayNameProperty display name property}.
			For example if this value is set to the text "New Promotion", then when a new promotion is created, the text "New Promotion" will appear
			under the "Active Work" node.
		-->
		<attribute name="newDisplayName" type="string"/>
		<!---
			This attribute defines the text to be used as the context menu text for creating a new instance of this object type.
			If this attribute is not set, the context menu text will be constructed from the {@link wcfObjectDefinition#displayName displayName} attribute.
		-->
		<attribute name="newObjectMenuItemText" type="string"/>
		<!---
			This attribute identifies which object property contains the template type for an instance of this object type.
			The default value of this attribute is the empty string. The value of the template type property will be used to
			select which {@link wcfObjectTemplate} to apply when the template property changes.
		-->
		<attribute name="templateTypeProperty" value="" type="string"/>
		<!---
			A {@link wcfSearchDefinition#searchType} that can be used to perform searches for objects of this type.
			This attribute also has the implication that when opening the utility pane from a ReferenceEditor or a ChildListEditor
			it	will default to the search tab with the selected {@link wcfSearchDefinition#searchType}.
		-->
		<attribute name="searchType" type="string" value="${null}"/>
		<!---
			@keywords private
			
			The search definition that matches the specified search type. This attribute is initialized based on the value specified for
			{@link wcfObjectDefinition#searchType}.
		-->
		<attribute name="searchDefinition" value="null"/>
		<!---
			@keywords private
			A map of child object definitions for this object definition.
			
			This map contains the {@link wcfChildObjectDefinition} that are declared as children of this wcfObjectDefinition.
		-->
		<attribute name="objectDefinitions"/>
		<!---
			@keywords private
			This attribute indicates that this wcfObjectDefinition is a primary object definition. The default value of this
			attribute is "false". This value will be true for objects that are instances of {@link wcfPrimaryObjectDefinition}.
		-->
		<attribute name="primary" type="boolean" value="false"/>
		<!---
			@keywords private
			This attribute indicates that this is an organizational object definition. The default value of this attribute is "false". This
			value will be true for objects that are instances of {@link wcfOrganizationalObjectDefinition}.
		-->
		<attribute name="organizational" type="boolean" value="false"/>
		<!---
			@keywords private
			An array of object definitions for the referenced object types. It will be initialized if there is a value for referencedType or referencedTypes, such
			as when the object definition is an instance of {@link wcfReferenceObjectDefinition}.
			
			The default value of this attribute is null.
		-->
		<attribute name="referencedDefinitions" value="null"/>
		<!---
			@keywords private
			This attribute is a reference to the {@link wcfModel model}.
		-->
		<attribute name="model" value="null"/>
		<!---
			This attribute contains the name of the resource to be used as an icon for instances of the object type. The default
			value is treeFolderResource.
		-->
		<attribute name="icon" type="string"/>
		<!---
			This attribute contains the name of the resource to be used as a header icon for instances of the object type. The default
			value is panelHeaderFolderResource.
		-->
		<attribute name="headerIcon" type="string"/>
		<!---
			@keywords private
			The refresh service declared for this object definition. This is generally an instance of {@link wcfRefreshService}.
			The refreshService is invoked when an object of this {@link wcfObjectDefinition#objectType} is refreshed.
		-->
		<attribute name="refreshService" value="null"/>
		<!--- 
			The number of seconds between two consecutive refresh actions. This attribute is used only when
			the object contains an enablement condition of "refreshCondition" type {@link wcfEnablementCondition#conditionType}.
			The default is 15 seconds. 
		-->
		<attribute name="refreshInterval" type="number" value="15"/>
		<!---
			This attribute indicates that this object type can be opened and added to the active work list. The default value of this
			attribute is false. This attribute will be true for instances of {@link wcfPrimaryObjectDefinition}.
		-->
		<attribute name="openGroupTop" type="boolean" value="false"/>
		<!---
			This attribute specifies the default {@link wcfFilter#filterType filter type} to use when opening the utility pane from a {@link wcfReferenceEditor} or a
			{@link wcfPropertyChildListEditor}. If a value for this attribute is given, the utility pane will automatically open to the browse tab
			regardless of the {@link wcfObjectDefinition#searchType} that is specified.
		-->
		<attribute name="browseFilterType" type="string" value="${null}"/>
		<!---
			@keywords private
			This attribute indicates that this wcfObjectDefinition defines a reference object definition. The default is "false".
			This attribute will be true for instances of {@link wcfReferenceObjectDefinition}
		-->
		<attribute name="reference" type="boolean" value="false"/>
		<!---
			@keywords private
			This attribute indicates that this reference object definition represents a parent/child
			relationship between two primary objects. The default is "false".
			This attribute can only be true when {@link wcfObjectDefinition#reference} is also true.
			parentReference will be true for instances of {@link wcfParentReferenceObjectDefinition}.
		-->
		<attribute name="parentReference" type="boolean" value="false"/>
		<!---
			@keywords private
			This attribute indicates that this reference object definition represents a collection relationship
			between primary objects. The default is "false".
			This attribute can only be true when {@link wcfObjectDefinition#reference} is also true.
			collectionReference will be true for instances of {@link wcfCollectionReferenceObjectDefinition}.
		-->
		<attribute name="collectionReference" type="boolean" value="false" />
		<!---
			@keywords private
			An array that contains collection reference object definitions that are children of this object definition.
			This array will be initialized internally.
		-->
		<attribute name="collectionReferenceObjectDefinitions" />
		<!---
			@keywords private
			An array that contains parent reference object definitions that are children of this object definition.
			This array will be initialized internally.
		-->
		<attribute name="parentReferenceObjectDefinitions"/>
		<!---
			@keywords private
			An array of the reference object definitions that are children of this object definition.
			This array will be initialized internally based on the {@link wcfReferenceObjectDefinition} that appear as children
			of this wcfObjectDefinition.
		-->
		<attribute name="referenceObjectDefinitions"/>
		<!---
			This attribute indicates that this wcfObjectDefinition contains translatable properties.
			The framework can create an instance of this object for every language supported by the store. The language of a particular
			instance is indicated by the {@link wcfStoreLanguage#languageId languageId} property that is created internally by the framework.
			The default value for this attribute is "false".
		-->
		<attribute name="languageSensitive" type="boolean"/>
		<!--- @keywords private -->
		<attribute name="languageSensitive__type" type="string" value="boolean"/>
		<!---
			@keywords private
			An array of the object definitions resolved from {@link wcfOrganizationalObjectDefinition#organizedObjectTypes}. This
			attribute is utilized by instances of {@link wcfOrganizationalObjectDefinition}.
		-->
		<attribute name="organizedObjectDefinitions" value="null"/>
		<!---
			An optional comma separated list of compatible object definitions for this object definition.
			When you use this value, objects with this objectType can be copied as new objects of the compatible type.

			Business users might want to create a copy of an existing object. For example, a business user can copy an
			object of type A into a widget that holds objects of type B, and create a new object of type B that has the
			same properties as the copied object of type A.

			This attribute specifies which object types can be created by copying the business objects that are described
			by this object definition.

			For example, consider the following wcfObjectDefinition:
				@START_CODE
					<PrimaryObjectDefinition definitionName="CatalogGroup"
						objectType="CatalogGroup"
						objectGroups="CatalogGroupAlias"
						compatibleObjectTypes="SalesCatalogGroup"
						...
				@END_CODE
			
			If an object with objectType CatalogGroup is copied, an object with type SalesCatalogGroup can be created from it.
			The default value of this attribute is the empty string.
		-->
		<attribute name="compatibleObjectTypes" type="string" value=""/>
		<!---
			@keywords private
			An array that contains of the instances of {@link wcfObjectDefinition#propertiesClass} for the different parent views
			as they are requested. The method {@link wcfObjectDefinition#getPropertiesView} creates these instances.
			The key for this map is the parent view.
		-->
		<attribute name="propertiesViews" value="${{}}"/>
		<!---
			This attribute indicates that the parent object can have only one child object of this type.
			This attribute should only be used on objects that are defined as {@link wcfChildObjectDefinition}.
			The default value of this attribute is "false".
		-->
		<attribute name="singleInstance" type="boolean"/>
		<!--- @keywords private -->
		<attribute name="singleInstance__type" type="string" value="boolean"/>
		<!---
			This attribute indicates that this wcfObjectDefinition is copy protected. The default value of this attribute is
			"false". An object whose object definition is marked as copyProtected cannot be duplicated.
		-->
		<attribute name="copyProtected" type="boolean"/>
		<!--- @keywords private -->
		<attribute name="copyProtected__type" type="string" value="boolean"/>
		
		<!---
			@keywords private
			
			An array of {@link wcfFilter} instances for this object definition. This list is created from
			the {@link wcfFilter} that are declared as direct children of this wcfObjectDefinition.
			
			A filters that is declared as a direct child of the wcfObjectDefinition will be applied to the utilities view
			detail's view.
			It will be used to filter the visibility of objects that are displayed in the utilities view details view when
			an object of this type is selected in the utilities view browse tree.
			Only the first filter will be used. If multiple filters are declared, the additional filters will be ignored.
		-->
		<attribute name="filters" value="${[]}"/>
		<!---
			@keywords private
			
			A map of default property values for this object definition. Default property values are loaded from
			the template.
		-->
		<attribute name="defaultPropertyValues" value="${{}}"/>
		<!---
			This attribute indicates whether the object defined represents a file that will be uploaded to the server.
			This flag will cause the {@link wcfCreateService create} and {@link wcfUpdateService update} services
			to upload a file associated with this object to the specified service's URL. The business user can associate
			a file with a file object instance using {@link wcfPropertyFileUploader}. When the object is saved, the
			create or update service will post the file content to the service's URL. The server URL that handles
			the file upload must be prepared to handle the following elements:
			<ul>
			<li>A Content-Type element of "multipart/form-data"
			<li>A Content-Disposition element with a name attribute set to "Filedata" and a filename attribute set to the name of the source file
			<li>The binary content of the file
			</ul>
			<p>The default value for this attribute is false.
		-->
		<attribute name="isFileObject" type="boolean"/>
		<!--- @keywords private -->
		<attribute name="isFileObject__type" type="string" value="boolean"/>
		<!---
			Use this attribute to specify the name of the property on the object to update with the source file
			name when {@link wcfPropertyFileUploader} selects a file. This is useful if you want to initialize
			the name of the object being created to the name of the source file being uploaded.
			This attribute defaults to null which indicates that no property will be updated with the source file name.
       		This attribute should only be used for objects that have {@link wcfObjectDefinition#isFileObject} set to true.
       	-->
       	<attribute name="fileNamePropertyName" value="${null}" type="string"/>
       	<!---
	       	Use this optional attribute to specify the name of the property on the object to update with the source file size
	       	(in bytes) when {@link wcfPropertyFileUploader} selects a file. This is useful if you want to send
	       	the file size to the server or display the file size using {@link wcfPropertyKilobyte} or {@link wcfGridKilobytes}.
	       	This attribute defaults to null which indicates that no property will be updated with the file size.
       		This attribute should only be used for objects that have {@link wcfObjectDefinition#isFileObject} set to true.
       	-->
       	<attribute name="fileSizePropertyName" value="${null}" type="string"/>
       	<!---
     	    This attribute should only be used for objects that have {@link wcfObjectDefinition#isFileObject} set to true.
       		The optional attribute allows you to specify the maximum allowable file size in bytes.
       		If a value for maximumFileSize is specified, then when a file larger than that size is opened, an error
       		dialog will be displayed and the file will be rejected.
       		If no value is specified, then the file size is ignored.
       	-->
       	<attribute name="maximumFileSize" value="${null}" type="size"/>
       	<!---
			@keywords private
			The file types associated with this file object definition. This will only be used if {@link wcfObjectDefinition#isFileObject} is
			set to true. It is initialized to an empty array.
		-->
		<attribute name="fileTypes" value="${[]}"/>
		<!---
			@keywords private
			
			True if a parent object can be implicitly created from an instance of this object. The default is false.
		-->		
		<attribute name="allowImplicitParentCreate" type="boolean"/>
		<!--- @keywords private -->
		<attribute name="allowImplicitParentCreate__type" type="string" value="boolean"/>
		<!---
			Indicates whether the property objectStoreId needs to be initialized when a new object is created.
			The default is "true" for primary object definitions and "false" for other object definitions.
		-->
		<attribute name="initializeObjectStoreId" type="boolean"/>
		<!--- @keywords private -->
		<attribute name="initializeObjectStoreId__type" type="string" value="boolean"/>
		<!---
			The save priority for objects of this object type. Objects with higher priority will
			be saved before their siblings. If this attribute is not set, then objects of this type
			will be considered lower priority than objects that have a save priority. The smaller the
			number the higher the priority. For example: a save priority of "1" will be saved before
			"10".
		-->
		<attribute name="savePriority" type="number" value="${null}"/>
		<!---
			@keywords private
			Set this attribute to true to indicate that the parent object cannot be released from the client side cache if it has any child objects of this type.
			The default is "true" for parent reference object definitions and "false" for other object definitions.
		-->
		<attribute name="parentReleaseProtected" type="boolean"/>
		<!--- @keywords private -->
		<attribute name="parentReleaseProtected__type" type="string" value="boolean"/>
		<!---
			@keywords private
			If true, when save is invoked for a viewed object with this object definition it will attempt to save the parent primary object if
			it is in a different open group object.
			The default is "false".
		-->
		<attribute name="saveParentPrimaryObject" type="boolean"/>
		<!--- @keywords private -->
		<attribute name="saveParentPrimaryObject__type" type="string" value="boolean"/>
		<!---
			This attribute identifies the column header name for the utilities view details view.
			
			If the value is empty, then <code>utilitiesGrid_name</code> in {@link wcfFoundationResourceBundle} will be used.
		-->
		<attribute name="detailsViewHeaderText" type="string"/>
		<!---
			This attribute indicates that if this object definition describes a child object then
			the framework can target instances of this object type for release when the parent object
			is closed. A released object will be removed from the client side cache.
			The default value is <code>true</code>.
		-->
		<attribute name="releaseWhenClosed" type="boolean"/>
		<!--- @keywords private -->
		<attribute name="releaseWhenClosed__type" type="string" value="boolean"/>
		<!---
			This attribute contains the name of the class to use for displaying the browse details view in the utilities pane.
			This must be a class that extends {@link wcfObjectGrid}.
			@type string
		-->
		<attribute name="utilitiesListClass" type="string" value="${null}"/>
		<!---
			This attribute contains the name of the definition to use for displaying the browse details view in the utilities pane.
			This must be a definition that extends {@link wcfObjectGrid}.
			Only specify this attribute if you are not providing a value for <code>utilitiesListClass</code>.
			@type string
		-->
		<attribute name="utilitiesListDefinitionName" type="string" value="${null}"/>
		
		<!---
			@keywords private
			This attribute is a reference to the object's post save service. If a {@link wcfPostSaveService} exists as a child
			of this object definition, then each time the {@link wcfCreateService create} and {@link wcfUpdateService update} services
			execute the {@link wcfPostSaveService} will be automatically triggered.
			The post save service can only exist as a child of a {@link wcfPrimaryObjectDefinition primary object}.
		-->
		<attribute name="postSaveService" value="null"/>
		
		<!---
			This attribute contains the name of an optional create wizard dialog class that will walk the business user through the
			creation of the object. The create wizard dialog will be instantiated the first	time an object of this type
			is created and reused for subsequent creations.
			
			The default value of this attribute is null.
			@type string, must be a class that extends wcfBaseCreateWizard
		-->
		<attribute name="createWizardClass" type="string" value="${null}"/>
		<!---
			This attribute contains the definition name of an optional create wizard definition that will walk the business user through the
			creation of the object. The create wizard dialog will be instantiated the first	time an object of this type
			is created and reused for subsequent creations. Only specify this attribute if you are not providing a value
			for <code>createWizardClass</code>.
			
			The default value of this attribute is null.
			@type string, must be the name of a definition that extends wcfBaseCreateWizard
		-->
		<attribute name="createWizardDefinitionName" type="string" value="${null}"/>
		
		<!---
			Set this attribute to true to indicate that objects of this type should not be loaded when the
			parent object is opened. This can be used with child objects that are displayed in a list
			view that is not visible on the first tab of the properties view. The objects will be loaded
			when the list view is displayed.
		-->
		<attribute name="deferLoad" type="boolean"/>
		<!--- @keywords private -->
		<attribute name="deferLoad__type" type="string" value="boolean"/>
		
		<!---
			@keywords private
			Indicates to the definition loader that the base definition should be ignored. The object definition
			code will handle mixing in the base definition attributes and children.
		-->
		<attribute name="ignoreBaseDefinition" type="boolean" value="true"/>
		<!---
			This attribute contains the name of the view class that is used to display information when the object is selected.
		-->
		<attribute name="helpPage" type="string" value="${null}"/>

		<!---
			This attribute contains the name of the resource to be used as an icon in the formula viewer for the object type.
		-->
		<attribute name="formulaIcon" type="string" />

		<!---
			This attribute specifies the text to be used as the label text for formula icon in the formula viewer for the object type.
		-->
		<attribute name="formulaText" type="string" />

		<!---
			This attribute identifies which object property will be used as the text for an instance of this object type. This
			value will be used in the formula viewer.
		-->
		<attribute name="formulaTextProperty" type="string" value="${null}" />

		<!---
			This attribute defines the object path that will be used to locate {@link wcfObjectDefinition#formulaTextProperty}.
			The default value of this attribute is null.
		-->
		<attribute name="formulaTextObjectPath" type="string" value="${null}" />

		<!---
			@keywords private
			Indicates the prefix of the properties that will be reset when the refresh service is called. The default value is <code>"x_"</code>.
		-->
		<attribute name="userDataPrefix" type="string"/>
		<!---
			The name of the usage policy used to determine if the user has write access to instances of this business object.
			If this attribute is not specified, then the usage specified for the business object editor is used.
		-->
		<attribute name="writeUsage" type="string"/>
		<!---
			@keywords private
			The populate new object service declared for this object definition. This is generally an instance of {@link wcfPopulateNewObjectService}.
			The populate new object service is invoked when an object of this {@link wcfObjectDefinition#objectType} is created
			through a user request originating from store preview.
		-->
		<attribute name="populateNewObjectService" value="null"/>
		<!---
			@keywords private
			The get preview URL service declared for this object definition. This is generally an instance of {@link wcfGetPreviewURLService}.
			The getPreviewURLService is invoked when an object of this {@link wcfObjectDefinition#objectType} is store previewed.
		-->
		<attribute name="getPreviewURLService" value="null"/>

		<!--- @keywords private -->
		<handler name="onconstruct">
			<![CDATA[
			if (!this["objectType"]) {
				this.objectType = this["definitionName"];
			}
			if (!this["baseType"]) {
				this.baseType = this["baseDefinitionName"];
			}
			var oDefs = immediateparent["objectDefinitions"];
			if (!oDefs) {
				oDefs = [];
				immediateparent.objectDefinitions = oDefs;
			}
			var definitionKey = this.objectType;
			if (this["definitionName"] && this.immediateparent["isModel"] && !this.primary && !this.organizational && !this.isBaseDefinition && this.objectType != "Top") {
				definitionKey = this.definitionName;
			}
			var defFound = false;
			for (var i = 0; i < oDefs.length; i++) {
				if (oDefs[i].objectType == definitionKey) {
					wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "SEVERE", "cmc.foundation.ObjectDefinition", "constructor", "Duplicate object definition: " + definitionKey + ". Parent: " + (!this.parent["isModel"] ? this.parent.objectType : "model"));
					this.parent.initializationError = true;
					defFound = true;
					break;
				}
			}
			if (!defFound) {
				var newDef = { objectType: definitionKey, objectDefinition: this };
				oDefs.push(newDef);
				if (wcfLogger.enabled) {
					wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "FINEST", "cmc.foundation.ObjectDefinition", "constructor", definitionKey + " Parent: " + (!this.parent ? this.parent.objectType: "model") + " Primary: " + primary + " Organizational:" +  this.organizational);
				}
			}

			if (this.reference && !this.isBaseDefinition) {
				var defs = immediateparent["referenceObjectDefinitions"];
				defs.push(this);
			}
			if (this.parentReference && !this.isBaseDefinition) {
				var defs = immediateparent["parentReferenceObjectDefinitions"];
				defs.push(this);
			}
			if (this.collectionReference && !this.isBaseDefinition) {
				var defs = immediateparent["collectionReferenceObjectDefinitions"];
				defs.push(this);
			}
			this.objectDefinitions = [];
			this.referenceObjectDefinitions = [];
			this.parentReferenceObjectDefinitions = [];			
			this.collectionReferenceObjectDefinitions = [];
			]]>
		</handler>
		
		<!--- @keywords private -->
		<method name="destroy">
			<![CDATA[
			this.displayNameDel.unregisterAll();
			delete this.displayNameDel;
			if (this['updateDetailsViewHeaderTextDel']) {
				this.updateDetailsViewHeaderTextDel.unregisterAll();
				delete this.updateDetailsViewHeaderTextDel;
			}
			super.destroy();
			]]>
		</method>
		
		<!---
			@keywords private
			This method creates a new instance of this type of object using the arguments provided in args.
			Optional arguments are:
			<ul>
				<li>contextObject: A wcfModelObject. If it is a suitable parent object, then it will be used as the parent. Otherwise the contextObject will be ignored.
								   A contextObject is considered suitable if its definition allows for objects of this type to be its child.</li>
				<li>templateObject: A wcfModelObject of the same, or a compatible, objectType. This new wcfModelObject will be a duplicate of the templateObject.
			</ul>
			
			If there is a {@link wcfObjectDefinition#createWizardClass} defined, this method will call that for the object creation.
			Otherwise, this method will call {@link wcfPrimaryObjectDefinition#doCreateObject} to create the new object.
			
			Eventually, both of these methods will delegate to . See bleh for a full list of arguments that should be provided.
			
			@param Object args The argument map of the create arguments.
		-->
		<method name="doCreate" args="args">
			<![CDATA[
			if (this.model == null) {
				this.initializeDefinition(wcfModelUtil.findModelForView(this));
			}
			if (this.createWizardClass && !args["templateObject"]) {
				
				if (!this["_createWizard"]) {
					if (lz[this.createWizardClass]) {
						this._createWizard = new lz[this.createWizardClass](this.model.oEditor, {model: this.model.oEditor.model, objectDefinition: this});
					}
					else {
						this._createWizard = wcfDefinitionLoader.getDefinition(this.createWizardClass, this.model.oEditor, {model: this.model.oEditor.model, objectDefinition: this});
					}
				}

				this._createWizard.createTemplateObject(args);
			}
			else {
				doCreateObject(args);
			}
			]]>
		</method>

		<!---
			@keywords private
			This method creates a new instance of this type of object. Optional arguments are:
			<ul>
				<li>contextObject: A wcfModelObject. If it is a suitable parent object, then it will be used as the parent. Otherwise the contextObject will be ignored.
								   A contextObject is considered suitable if its definition allows for objects of this type to be its child.</li>
				<li>templateObject: A wcfModelObject of the same, or a compatible, objectType. This new wcfModelObject will be a duplicate of the templateObject.
			</ul>
			
			This method delegates the actual object creation to {@link wcfModel#createNewObject}.
			
			@param Object args: The argument map.
		-->
		<method name="doCreateObject" args="args">
			<![CDATA[
			if (args && args["templateObject"]) {
				var targetObject = null;
				if (args["contextObject"]) {
					var oDef = args.contextObject.objectDefinition;
					if (oDef.primary || oDef.parentReference || oDef.collectionReference) {
						targetObject = args.contextObject.getReferencedObject();
					}
				}
				triggerAction("wcfCopyActionHandler", {
					sourceObject: args.templateObject,
					targetObject: targetObject,
					targetDefinition: this,
					doOpen: true,
					callbackDelegate: args["createCallbackDel"],
					transactionEventId: -1,
					transactionGroupId: -1,
					saveCopy: false,
					isLastSaveInGroup: false,
					isLastSaveObject: false,
					sequencePropertyName: null, 
					sequencePropertyPath: null, 
					nextSeq: -1,
					newObjectOptions: args["newObjectOptions"],
					objectKey: args["objectKey"]
				});
			}
			else {
				var parentObject = this.getParentObject(args);
				var o = null;
				if (this.organizational) {
					var openObjects = this.model.openObjects;
					for (var i=0; i<openObjects.length; i++) {
						if (openObjects[i].objectType == this.objectType) {
							o = openObjects[i];
							break;
						}
					}
				}
				
				if (o == null) {
					o = this.model.createNewObject(this, parentObject);
					
					if (args && args["newObjectOptions"] && this.populateNewObjectService != null) {
						this.populateNewObjectService.doRequest(o, args.newObjectOptions);
					}
				}
			
				if (parentObject && parentObject.parentObject != null) {
					parentObject.parentObject.updateChildObjects();
				}
	
				this.model.oEditor.selectOpenObject(o);
				
				if (args && args["createCallbackDel"]) {
					args.createCallbackDel.execute(o);
				}

				if (args && args["objectKey"] && wcfAutomationUtil.active) {
					wcfAutomationUtil.setObject(args["objectKey"], o);
				}
			}
			]]>
		</method>
		
		<!--- @keywords private -->
		<method name="getParentObject" args="args">
			<![CDATA[
			var parentObject = null;
			if (args && args["contextObject"]) {
				var co = args.contextObject;
				var coDef = co.objectDefinition;
				if (coDef.primary || coDef.parentReference || coDef.collectionReference) {
					co = co.getReferencedObject();
					coDef = co.objectDefinition;
					var parentRefDef = coDef.getParentReferenceObjectDefinition(this);
					if (parentRefDef == null) {
						parentRefDef = coDef.getCollectionReferenceObjectDefinition(this);
					}
					if (parentRefDef != null) {
						parentObject = this.model.createNewObject(parentRefDef, co, false);
					}
				}
			}
			return parentObject;
			]]>
		</method>

		<!---
			@keywords private
			This method returns true if this object definition has any child object definitions.
		-->
		<method name="hasChildDefinitions">
			<![CDATA[
				return this.objectDefinitions.length > 0;
			]]>
		</method>

		<!---
			@keywords private
			This method returns the wcfObjectDefinition for the child object with the specified object type.
			This method will ensure that the child object definitions have been initialized.
			
			@param string objectType The object type of the child being looked for.
			@return wcfChildObjectDefinition The object definition of the child object. If no object with this objectType is found
											 null is returned.
		-->
		<method name="getChildDefinition" args="objectType">
			<![CDATA[
			var def;
			for (var i = 0; i < this.objectDefinitions.length; i++) {
				if (this.objectDefinitions[i].objectType == objectType) {
					def = this.objectDefinitions[i].objectDefinition;
					break;
				}
			}
			if (def) {
				def.initializeDefinition(this.model);
			}
			return def;
			]]>
		</method>
		
		<!---
			@keywords private
			This method returns an array of child object definitions that match the specified object type.
			If the object type is a group, then there could be multiple matching object definitions.
			This method will ensure that the child object definitions have been initialized.
			
			@param string objectType The object type or group for the children
			@return [wcfChildObjectDefinition] Array of object child object definitions. If there are no matching children, then an empty array is returned.
		-->
		<method name="getChildDefinitions" args="objectType">
			<![CDATA[
			var childDefs = [];
			for (var i = 0; i < this.objectDefinitions.length; i++) {
				var childDef = this.objectDefinitions[i].objectDefinition;
				childDef.initializeDefinition(this.model);
				if (childDef.matchesType(objectType)) {
					childDefs.push(childDef);
				}
			}
			return childDefs;
			]]>
		</method>
		
		<!---
			@keywords private
			This method retrieves the child reference object definitions for this object. This method will
			ensure that the reference object definitions have been initialized.
			
			@return Array The method will return an array of the initialized wcfObjectDefinition instances
						  for the current object definition. If there are no reference object definitions, then
						  nothing is returned.						
		-->
		<method name="getReferenceObjectDefinitions">
			<![CDATA[
			for (var i = 0; i < this.referenceObjectDefinitions.length; i++) {
				this.referenceObjectDefinitions[i].initializeDefinition(this.model);
			}
			return this.referenceObjectDefinitions;
			]]>
		</method>
		
		<!---
			@keywords private
			This method retrieves the child object definitions that are not reference object definitions and
			allow implicit creates for their parents. This method will ensure that the child object definitions
			have been initialized.

			@return Array The method will return an array of the initialized wcfObjectDefinition instances
						  for the current object definition. If there are no reference object definitions, then
						  nothing is returned.	
		-->
		<method name="getAllowImplicitParentCreateChildDefinitions">
			<![CDATA[
			var childDefs = [];
			for (var i = 0; i < this.objectDefinitions.length; i++) {
				var childDef = this.objectDefinitions[i].objectDefinition;
				childDef.initializeDefinition(this.model);
				if(!childDef.reference && childDef.allowImplicitParentCreate){
					childDefs.push(childDef);
				}
			}
			return childDefs;
			]]>
		</method>
		
		<!---
			@keywords private
			This method retrieves the child reference object definitions that allow implicit creates for their parents.
			This method will ensure that the reference object definitions have been initialized.
			
			@return Array The method will return an array of the initialized wcfObjectDefinition instances
						  for the current object definition. If there are no reference object definitions, then
						  nothing is returned.	
		-->
		<method name="getAllowImplicitParentCreateReferenceDefinitions">
			<![CDATA[
			var refObjects = []
			for (var i = 0; i < this.referenceObjectDefinitions.length; i++) {
				var refDef = this.referenceObjectDefinitions[i];
				refDef.initializeDefinition(this.model);
				if (refDef.allowImplicitParentCreate) {
					refObjects.push(refDef);
				}
			}
			return refObjects;
			]]>
		</method>
		
		<!---
			@keywords private
			Returns an array of the open group object definitions
			@return [wcfObjectDefinition] An array of the open group object definitions
		-->
		<method name="getOpenGroupObjectDefinitions">
			<![CDATA[
			if (!this["openGroupObjectDefinitions"]) {
				this.openGroupObjectDefinitions = [];
				for (var i = 0; i < this.objectDefinitions.length; i++) {
					var oDef = this.getChildDefinition(this.objectDefinitions[i].objectType);
					if (!oDef.parentReference && !oDef.collectionReference && !oDef.deferLoad) {
						this.openGroupObjectDefinitions.push(oDef);
					}
				}
			}
			return this.openGroupObjectDefinitions;
			]]>
		</method>

		<!---
			@keywords private
			Returns an array of the copyable object definitions
			@return [wcfObjectDefinition] An array of the copyable object definitions
		-->
		<method name="getCopyObjectDefinitions">
			<![CDATA[
			if (!this["copyObjectDefinitions"]) {
				this.copyObjectDefinitions = [];
				for (var i = 0; i < this.objectDefinitions.length; i++) {
					var oDef = this.objectDefinitions[i].objectDefinition;
					oDef.initializeDefinition(this.model);
					if (!oDef.parentReference && !oDef.collectionReference && !oDef.copyProtected) {
						this.copyObjectDefinitions.push(oDef);
					}
				}
			}
			return this.copyObjectDefinitions;
			]]>
		</method>

		<!---
			@keywords private
			This method returns the {@link wcfCollectionReferenceObjectDefinition} for the collection objects that represents
			the relationship between two primary objects that have this definition, and objects that have the
			{@link wcfPrimaryObjectDefinition} passed in.
			
			@param wcfPrimaryObjectDefinition definition The primary object definition
			@return wcfCollectionReferenceObjectDefinition The collection reference object definition
		-->
		<method name="getCollectionReferenceObjectDefinition" args="definition">
			<![CDATA[
			var colRefDef = null;
			for (var i = 0; i < this.collectionReferenceObjectDefinitions.length; i++) {
				var def = this.collectionReferenceObjectDefinitions[i];
				if (def.isReferencedDefinition(definition)) {
					colRefDef = def;
					break;
				}
			}
			return colRefDef;
			]]>
		</method>
		
		<!---
			@keywords private
			This method returns the {@link wcfParentReferenceObjectDefinition} for the reference object that represents the
			parent/child relationship between objects that have this definition, and objects that have the
			{@link wcfPrimaryObjectDefinition} passed in.
			
			@param wcfPrimaryObjectDefinition definition The primary object definition
			@return wcfParentReferenceObjectDefinition The parent reference object definition
		-->
		<method name="getParentReferenceObjectDefinition" args="definition">
			<![CDATA[
			var parentRefDef = null;
			for (var i = 0; i < this.parentReferenceObjectDefinitions.length; i++) {
				var def = this.parentReferenceObjectDefinitions[i];
				if (def.isReferencedDefinition(definition)) {
					parentRefDef = def;
					break;
				}
			}
			return parentRefDef;
			]]>
		</method>

		<!---
			@keywords private
			This method returns true if the the given object definition {@link wcfPrimaryObjectDefinition}
			is a referenced definition of this object definition.
			
			@param wcfObjectDefinition definition The possible referenced definition
			@return boolean True if the given object definition is a referenced definition
		-->
		<method name="isReferencedDefinition" args="definition">
			<![CDATA[
			if (this.model == null) {
				this.initializeDefinition(wcfModelUtil.findModelForView(this));
			}
			var isReferencedDef = false;
			if (this.referencedDefinitions != null) {
				for (var i = 0; i < this.referencedDefinitions.length; i++) {
					var def = this.referencedDefinitions[i];
					if (def == definition) {
						isReferencedDef = true;
						break;
					}
				}
			}
			return isReferencedDef;
			]]>
		</method>
		
		<!---
			@keywords private
			This method returns true if the passed in definition is a child definition
			of this wcfObjectDefinition.
			
			@param wcfObjectDefinition definition The possible child object definition
			@return boolean: true if the arg is a child definition of this definition
		-->
		<method name="isChildDefinition" args="definition">
			<![CDATA[
			var isChildDef = false;
			for (var i = 0; i < this.objectDefinitions.length; i++) {
				if (this.objectDefinitions[i].objectType == definition.objectType) {
					isChildDef = true;
					break;
				}
			}
			return isChildDef;
			]]>
		</method>
		
		<!---
			@keywords private
			This method returns true if the passed in custom service is defined in this wcfObjectDefinition.
			
			@param wcfCustomService customService The possible child custom service.
			@return boolean true if the custom service is defined, false otherwise.
		-->
		<method name="isCustomServiceDefined" args="customService">
			<![CDATA[
			var isDefined = false;
			for (var type in this.customServices) {
				if(this.customServices[type] == customService){
					isDefined = true;
					break;
				}
			}
			return isDefined;
			]]>
		</method>
		
		<!---
			@keywords private
			This method returns true if the passed in client action is defined in this wcfObjectDefinition.
			
			@param wcfClientAction clientAction The possible child client action.
			@return boolean true if the client action is defined, false otherwise.
		-->
		<method name="isClientActionDefined" args="clientAction">
			<![CDATA[
			var isDefined = false;
			for (var type in this.clientActions) {
				if(this.clientActions[type] == clientAction){
					isDefined = true;
					break;
				}
			}
			return isDefined;
			]]>
		</method>
		
		<!---
			@keywords private
			This method takes a model object that it is passed and "opens" it by doing the following:
				<ul>
					<li>Setting the {@link wcfObjectModel#open} to true</li>
					<li>Calling {@link wcfBusinessObjectEditor#selectOpenObject}</li>
				</ul>
			@param wcfObjectModel args The model object that is being opened.
		-->
		<method name="doOpen" args="args">
			<![CDATA[
			args.o.doOpen();
			]]>
		</method>

		<!---
			@keywords private
			This method checks if this wcfObjectDefinition has an {@link wcfObjectDefinition#objectType} matches the specified object type.
			This function will return true if the specified type is an exact match with this  object type or if the specified type matches
			one of the object groups defined for this object definition.
			
			This method does not consider {@link wcfObjectDefinition#compatibleObjectTypes}.
			
			@param string type The object type to match against this wcfObjectDefinition
			@return boolean This method returns true if the specified type matches this object definition and false otherwise
		-->
		<method name="matchesType" args="type">
			<![CDATA[
			var match = type == this.objectType || type == "*";
			if (!match) {
				if (this["objectGroupsArray"] == null) {
					this.objectGroupsArray = wcfStringUtil.splitAndTrim(this.objectGroups, ",");
				}
				for (var i = 0; i < this.objectGroupsArray.length; i++) {
					if (this.objectGroupsArray[i] == type) {
						match = true;
						break;
					}
				}
			}
			return match;
			]]>
		</method>
		
		<!--- @keywords private -->
		<method name="initializeDefinition" args="model">
			<![CDATA[
			/*
			if (wcfLogger.enabled) {
				wcfLogger.entering("com.ibm.commerce.lobtools.foundation.model", "wcfObjectDefinition", "initializeDefinition(model)", [model]);				
			}
			*/
			if (this.model == null) {
				this.completeInstantiation();
				if (this.createWizardClass == null) {
					this.createWizardClass = this.createWizardDefinitionName;
				}
				if (this.propertiesClass == null) {
					this.propertiesClass = this.propertiesDefinitionName;
				}
				if (this.utilitiesListClass == null) {
					this.utilitiesListClass = this.utilitiesListDefinitionName;
				}
				wcfDefinitionLoader.completeCreateDefinitionChildren(this);
				this.model = model;
				if (this["referencedType"] || this["referencedTypes"]) {
					if (this["referencedType"] && this["referencedTypes"]) {
						wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "SEVERE", "wcfObjectDefinition", "initializeDefinition", "Attributes referenceType and referenceTypes are both declared.  Attribute referenceType with value " + this.referenceType + " will be ignored.");
					}
					var refTypes = null;
					if (this["referencedTypes"]) {
						refTypes = this["referencedTypes"];
					}
					else if (this["referencedType"]) {
						refTypes = this["referencedType"];
					}
					this.referencedDefinitions = model.getObjectDefinitions(null, refTypes);
					if (typeof(this.referencedDefinitions) == "undefined" || this.referencedDefinitions == null || this.referencedDefinitions.length == 0) {
						wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "SEVERE", "wcfObjectDefinition", "initializeDefinition", "Unable to resolve referencedTypes: " + refTypes + " for " + this.objectType + ". Parent: " + parent + ".");
						model.initializationError = true;
					}
				}
				if (this["searchType"]) {
					this.searchDefinition = model.getSearchDefinition(this.searchType);
					if (typeof(this.searchDefinition) == "undefined" || this.searchDefinition == null) {
						wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "SEVERE", "wcfObjectDefinition", "initializeDefinition", "Unable to resolve searchType: " + this.searchType + " for " + this.objectType + ". Parent: " + parent + ".");
						model.initializationError = true;
					}
				}
				if (this["organizedObjectTypes"]) {
					this.organizedObjectDefinitions = model.getObjectDefinitions(null, this.organizedObjectTypes);
					for (var i = 0; i < this.organizedObjectDefinitions.length; i++) {
						if (!this.organizedObjectDefinitions[i]) {
							wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "SEVERE", "wcfModel", "getObjectDefinitions", "Unable to resolve organizedObjectTypes: " + this.organizedObjectTypes + " for " + this.objectType + ". Parent: " + parent + ".");
							model.initializationError = true;
						}
					}
				}
				if (this["initializationError"]) {
					model.initializationError = true;
				}
				
				for (var type in this.propertyDefinitions) {
					var propDefArray = this.propertyDefinitions[type];
					for (var i = 0; i < propDefArray.length; i++) {
						propDefArray[i].initializeDefinition(model);
					}
				}
				
				var e = this["template"];
				if (e) {
					var nodes = e.childNodes;
					for (var i = 0; i < nodes.length; i++) {
						var node = nodes[i];
						var textNode = node.getFirstChild();
						if (typeof(textNode) != "undefined" && textNode != null && (textNode instanceof lz.DataText)) {
							this.defaultPropertyValues[node.nodeName] = textNode.data;
						}
					}
				}
				
				if (this.templateTypeProperty) {
					var propDefArray = this.propertyDefinitions[this.templateTypeProperty];
					if (!propDefArray) {
						new lz.wcfPropertyDefinition(this, {propertyName: this.templateTypeProperty});
						propDefArray = this.propertyDefinitions[this.templateTypeProperty];
					}
					for (var i = 0; i < propDefArray.length; i++) {
						for (var j = 0; j < this.objectTemplatesArray.length; j++) {
							var objTemplate = this.objectTemplatesArray[j];
							new lz.wcfTemplatePropertyValue(propDefArray[i], {value: objTemplate.templateType, objectTemplate: objTemplate, enablementCondition: objTemplate.enablementCondition});
						}
					}
				}
				if (this["baseType"]) {
					this.integrateBaseObject();
				}
				if (typeof(this["creatable"]) == "undefined") {
					this.creatable = false;
				}
				if (typeof(this["icon"]) == "undefined") {
					this.icon = this.reference ? null : "treeFolderResource";
				}
				if (typeof(this["headerIcon"]) == "undefined") {
					this.headerIcon = "panelHeaderFolderResource";
				}
				if (typeof(this["languageSensitive"]) == "undefined") {
					this.languageSensitive = false;
				}
				if (typeof(this["singleInstance"]) == "undefined") {
					this.singleInstance = false;
				}
				if (typeof(this["copyProtected"]) == "undefined") {
					this.copyProtected = false;
				}
				if (typeof(this["isFileObject"]) == "undefined") {
					this.isFileObject = false;
				}
				if (typeof(this["allowImplicitParentCreate"]) == "undefined") {
					this.allowImplicitParentCreate = false;
				}
				if (typeof(this["initializeObjectStoreId"]) == "undefined") {
					this.initializeObjectStoreId= this.primary;
				}
				if (typeof(this["parentReleaseProtected"]) == "undefined") {
					this.parentReleaseProtected= this.parentReference;
				}
				if (typeof(this["saveParentPrimaryObject"]) == "undefined") {
					this.saveParentPrimaryObject= false;
				}
				if (typeof(this["releaseWhenClosed"]) == "undefined") {
					this.releaseWhenClosed = true;
				}
				if (typeof(this["detailsViewHeaderText"]) == "undefined") {
					this.updateDetailsViewHeaderTextDel = new lz.Delegate(this, "updateDetailsViewHeaderText");
					if (this.baseDefinition != null && "detailsViewHeaderText" in this.baseDefinition) {
						this.updateDetailsViewHeaderTextDel.register(this.baseDefinition, "ondetailsViewHeaderText");
					} else {
						this.updateDetailsViewHeaderTextDel.register(foundationResources.utilitiesGrid_name, "onstring");
					}
					this.updateDetailsViewHeaderText();
				}
				if (this.isFileObject) {
					var fileRequiredValidator = null;
					for (var i = 0; i < this.validators.length; i++) {
						if (this.validators[i].validatorType == "fileRequiredValidator") {
							fileRequiredValidator = this.validators[i];
							break;
						}
					}
					if (fileRequiredValidator == null) {
						new lz.wcfFileRequiredValidator(this);
					}
				}
				if (typeof(this["allowDuplicates"]) == "undefined") {
					this.allowDuplicates = true;
				}
				if (typeof(this["allowCrossStoreReferences"]) == "undefined") {
					this.allowCrossStoreReferences = true;
				}
				if (typeof(this["derivedId"]) == "undefined") {
					this.derivedId = false;
				}
				if (typeof(this["cascadeDelete"]) == "undefined") {
					this.cascadeDelete = false;
				}
				if (typeof(this["deferLoad"]) == "undefined") {
					this.deferLoad = false;
				}
				if (typeof(this["formulaIcon"]) == "undefined") {
					this.formulaIcon = null;
				}
				if (typeof(this["formulaText"]) == "undefined") {
					this.formulaText = null;
				}
				if (typeof(this["userDataPrefix"]) == "undefined") {
					this.userDataPrefix= "x_";
				}
				if (typeof(this["writeUsage"]) == "undefined") {
					this.writeUsage = null;
				}
			}
			/*
			if (wcfLogger.enabled) {
				wcfLogger.exiting("com.ibm.commerce.lobtools.foundation.model", "wcfObjectDefinition", "initializeDefinition(model)");
			}
			*/
			]]>
		</method>
		
		<!--- @keywords private -->
		<method name="getTemplate">
			<![CDATA[
			var xml = null;
			if (this["template"]) {
				if (this["_template"]) {
					xml = this._template;
				}
				else {
					var xmlstr = this.template.serialize();
					xml = wcfXMLUtil.parseXML(xmlstr);
					this._template = xml;
				}
			}
			return xml;
			]]>
		</method>
				
		<!--- @keywords private -->
		<method name="updateDetailsViewHeaderText" args="e=null">
			<![CDATA[
			if (this.baseDefinition != null && "detailsViewHeaderText" in this.baseDefinition) {
				this.setAttribute("detailsViewHeaderText", this.baseDefinition.detailsViewHeaderText);
			} else {
				this.setAttribute("detailsViewHeaderText", foundationResources.utilitiesGrid_name.string);
			}
			]]>
		</method>
		
		<!--- @keywords private -->
		<method name="integrateBaseObject">
			<![CDATA[
			var i = null;
			var key = null;
			this.baseDefinition = this.model.getObjectDefinition(null, this.baseType);
			this.displayNameDel = new lz.Delegate(this, "updateBaseName");
			
			if (this.objectGroups == "") {
				this.objectGroups = this.baseDefinition.objectGroups;
			}
			if (typeof(this["creatable"]) == "undefined") {
				this.creatable = this.baseDefinition.creatable;
			}
			if (typeof(this["isFileObject"]) == "undefined") {
				this.isFileObject = this.baseDefinition.isFileObject;
			}
			if (typeof(this["allowImplicitParentCreate"]) == "undefined") {
				this.allowImplicitParentCreate = this.baseDefinition.allowImplicitParentCreate;
			}
			if (typeof(this["releaseWhenClosed"]) == "undefined") {
				this.releaseWhenClosed = this.baseDefinition.releaseWhenClosed;
			}
			if (typeof(this["initializeObjectStoreId"]) == "undefined") {
				this.initializeObjectStoreId= this.baseDefinition.initializeObjectStoreId;
			}
			if (typeof(this["parentReleaseProtected"]) == "undefined") {
				this.parentReleaseProtected= this.baseDefinition.parentReleaseProtected;
			}
			if (typeof(this["saveParentPrimaryObject"]) == "undefined") {
				this.saveParentPrimaryObject= this.baseDefinition.saveParentPrimaryObject;
			}
			for (i = 0; i < this.baseDefinition.getChildrenServices.length; i++) {
				this.getChildrenServices.push(this.baseDefinition.getChildrenServices[i]);
			}
			for (i = 0; i < this.baseDefinition.getReferencesServices.length; i++) {
				this.getReferencesServices.push(this.baseDefinition.getReferencesServices[i]);
			}
			for(key in this.baseDefinition.objectTemplates) {
				if (!this.objectTemplates[key]){
					this.objectTemplates[key] = this.baseDefinition.objectTemplates[key];
				}
			}
			for (i = this.baseDefinition.objectTemplatesArray.length - 1; i >= 0; i--) {
				var template = this.baseDefinition.objectTemplatesArray[i];
				if (!this.objectTemplates[template.templateType]){
					this.objectTemplatesArray.unshift(template);
				}
			}
			if(this.saveService == null){
				this.saveService = this.baseDefinition.saveService;
			}
			if(this.createService == null){
				this.createService = this.baseDefinition.createService;
			}
			if(this.deleteService == null){
				this.deleteService = this.baseDefinition.deleteService;
			}
			if(this.postSaveService == null){
				this.postSaveService = this.baseDefinition.postSaveService;
			}
			if (this.saveHandler == null) {
				this.saveHandler = this.baseDefinition.saveHandler;
			}
			if (this.newHandler == null) {
				this.newHandler = this.baseDefinition.newHandler;
			}
			for(var key in this.baseDefinition.propertyDefinitions) {
				var propDefArray = this.propertyDefinitions[key];
				if (!propDefArray) {
					propDefArray = [];
					this.propertyDefinitions[key] = propDefArray;
				}
				var basePropDefArray = this.baseDefinition.propertyDefinitions[key];
				for (var i = 0; i < basePropDefArray.length; i++) {
					propDefArray.push(basePropDefArray[i]);
				}
			}
			for (i = 0; i < this.baseDefinition.customServices.length; i++) {
				this.customServices.push(this.baseDefinition.customServices[i]);
			}
			for (i = 0; i < this.baseDefinition.clientActions.length; i++) {
				this.clientActions.push(this.baseDefinition.clientActions[i]);
			}
			for (i = 0; i < this.baseDefinition.viewOptions.length; i++) {
				this.viewOptions.push(this.baseDefinition.viewOptions[i]);
			}
			if(typeof(this["displayName"]) == "undefined"){
				this.displayName = this.baseDefinition["displayName"];
				this.displayNameDel.register(this.baseDefinition, "ondisplayName");
			}
			if(this.propertiesClass == null){
				this.propertiesClass = this.baseDefinition.propertiesClass;
			}
			if(this.summaryClass == null){
				this.summaryClass = this.baseDefinition.summaryClass;
			}
			for (i = 0; i < this.baseDefinition.navigationListDefinitions.length; i++) {
				this.navigationListDefinitions.push(this.baseDefinition.navigationListDefinitions[i]);
			}
			for (i = 0; i < this.baseDefinition.validators.length; i++) {	
				this.validators.push(this.baseDefinition.validators[i]);
			}
			if(this.defaultNavigationList == null){
				this.defaultNavigationList = this.baseDefinition.defaultNavigationList;
			}
			if(this.idProperty == ""){
				this.idProperty = this.baseDefinition.idProperty;
			}
			if(this.displayNameProperty == ""){
				this.displayNameProperty = this.baseDefinition.displayNameProperty;
			}
			if(this.displayNameObjectPath == null){
				this.displayNameObjectPath = this.baseDefinition.displayNameObjectPath;
			}
			if(this.longDisplayNameProperty == ""){
				this.longDisplayNameProperty = this.baseDefinition.longDisplayNameProperty;
			}	
			if(this.longDisplayNameObjectPath == null){
				this.longDisplayNameObjectPath = this.baseDefinition.longDisplayNameObjectPath;
			}
			if (typeof(this["newDisplayName"]) == "undefined"){
				this.newDisplayName = this.baseDefinition["newDisplayName"];
				this.displayNameDel.register(this.baseDefinition, "onnewDisplayName");
			}
			if (typeof(this["newObjectMenuItemText"]) == "undefined"){
				this.newObjectMenuItemText = this.baseDefinition["newObjectMenuItemText"];
				this.displayNameDel.register(this.baseDefinition, "onnewObjectMenuItemText");
			}
			if(this.templateTypeProperty == ""){
				this.templateTypeProperty = this.baseDefinition.templateTypeProperty;
			}
			if(this.searchDefinition == null){
				this.searchDefinition = this.baseDefinition.searchDefinition;
			}
			for (i = 0; i < this.baseDefinition.objectDefinitions.length; i++) {
				var typeFound = false;
				for (var j = 0; j < this.objectDefinitions.length; j++) {
					if (this.baseDefinition.objectDefinitions[i].objectType == this.objectDefinitions[j].objectType) {
						typeFound = true;
						break;
					}
				}
				if (!typeFound) {
					var newDef = { objectType: this.baseDefinition.objectDefinitions[i].objectType, objectDefinition: this.baseDefinition.objectDefinitions[i].objectDefinition };
					this.objectDefinitions.push(newDef);
				}
			}
			if(this.referencedDefinitions == null){
				this.referencedDefinitions = this.baseDefinition.referencedDefinitions;
			}
			if(typeof(this["icon"]) == "undefined" ){
				this.icon = this.baseDefinition.icon;
			}
			if(typeof(this["headerIcon"]) == "undefined" ){
				this.headerIcon = this.baseDefinition.headerIcon;
			}
			if(this.refreshService == null ){
				this.refreshService = this.baseDefinition.refreshService;
			}
			if(this.browseFilterType == null){
				this.browseFilterType = this.baseDefinition.browseFilterType;
			}
			if(this.getPreviewURLService == null ){
				this.getPreviewURLService = this.baseDefinition.getPreviewURLService;
			}
			for (i = 0; i < this.baseDefinition.collectionReferenceObjectDefinitions.length; i++) {
				var colDef = this.baseDefinition.collectionReferenceObjectDefinitions[i];
				var found = false;
				for (var s = 0; s < this.collectionReferenceObjectDefinitions.length; s++) {
					if (this.collectionReferenceObjectDefinitions[s].objectType == colDef.objectType) {
						found = true;
						break;
					}
				}
				if (!found) {
					this.collectionReferenceObjectDefinitions.push(colDef);
				}
			}
			for (i = 0; i < this.baseDefinition.parentReferenceObjectDefinitions.length; i++) {
				var parDef = this.baseDefinition.parentReferenceObjectDefinitions[i];
				var found = false;
				for (var s = 0; s < this.parentReferenceObjectDefinitions.length; s++) {
					if(this.parentReferenceObjectDefinitions[s].objectType == parDef.objectType){
						found = true;
						break;
					}
				}
				if(!found){
					this.parentReferenceObjectDefinitions.push(parDef);
				}
			}
			for (i = 0; i < this.baseDefinition.referenceObjectDefinitions.length; i++) {
				var refDef = this.baseDefinition.referenceObjectDefinitions[i];
				var found = false;
				for (var s = 0; s < this.referenceObjectDefinitions.length; s++) {
					if(this.referenceObjectDefinitions[s].objectType == refDef.objectType){
						found = true;
						break;
					}
				}
				if(!found){
					this.referenceObjectDefinitions.push(refDef);
				}
			}
			if(typeof(this["languageSensitive"]) == "undefined" ){
				this.languageSensitive = this.baseDefinition.languageSensitive;
			}
			if(this.organizedObjectDefinitions == null){
				this.organizedObjectDefinitions = this.baseDefinition.organizedObjectDefinitions;
			}
			if(this.compatibleObjectTypes == ""){
				this.compatibleObjectTypes = this.baseDefinition.compatibleObjectTypes;
			}
			if(typeof(this["singleInstance"]) == "undefined" ){
				this.singleInstance = this.baseDefinition.singleInstance;
			}
			if(typeof(this["copyProtected"]) == "undefined" ){
				this.copyProtected = this.baseDefinition.copyProtected;
			}
			for (i = 0; i < this.baseDefinition.filters.length; i++) {
				this.filters.push(this.baseDefinition.filters[i]);
			}
			for(key in this.baseDefinition.defaultPropertyValues) {
				if (!this.defaultPropertyValues[key]){
					this.defaultPropertyValues[key] = this.baseDefinition.defaultPropertyValues[key];
				}
			}
			if(typeof(this["template"]) == "undefined" ){
				if(typeof(this.baseDefinition["template"]) != "undefined" ){
					this.template = this.baseDefinition.template;
				}
			}
			if(this["createWizardClass"] == null){
				if(typeof(this.baseDefinition["createWizardClass"]) != "undefined" ){
					this.createWizardClass = this.baseDefinition.createWizardClass;
				}
			}
			if(this["helpLink"] == ""){
				if(typeof(this.baseDefinition["helpLink"]) != "undefined" ){
					this.helpLink = this.baseDefinition.helpLink;
				}
			}
			if(this.searchType == null){
				this.searchType = this.baseDefinition.searchType;
			}
			if (this.savePriority == null) {
				this.savePriority = this.baseDefinition.savePriority;
			}
			if (this.fileNamePropertyName == null) {
				this.fileNamePropertyName = this.baseDefinition.fileNamePropertyName;
			}
			if (this.fileSizePropertyName == null) {
				this.fileSizePropertyName = this.baseDefinition.fileSizePropertyName;
			}
			if (this.maximumFileSize == null) {
				this.maximumFileSize = this.baseDefinition.maximumFileSize;
			}
			for (i = 0; i < this.baseDefinition.fileTypes.length; i++) {
				this.fileTypes.push(this.baseDefinition.fileTypes[i]);
			}
			if (typeof(this["allowDuplicates"]) == "undefined") {
				this.allowDuplicates = this.baseDefinition.allowDuplicates;
			}
			if (typeof(this["allowCrossStoreReferences"]) == "undefined") {
				this.allowCrossStoreReferences = this.baseDefinition.allowCrossStoreReferences;
			}
			if (typeof(this["derivedId"]) == "undefined") {
				this.derivedId = this.baseDefinition.derivedId;
			}
			if (typeof(this["enablementCondition"]) == "undefined") {
				this.enablementCondition = this.baseDefinition["enablementCondition"];
			}
			if (typeof(this["parentObjectCondition"]) == "undefined") {
				this.parentObjectCondition = this.baseDefinition["parentObjectCondition"];
			}
			if (typeof(this["childObjectCondition"]) == "undefined") {
				this.childObjectCondition = this.baseDefinition["childObjectCondition"];
			}
			if (typeof(this["refreshCondition"]) == "undefined") {
				this.refreshCondition = this.baseDefinition["refreshCondition"];
			}
			if (typeof(this["cascadeDelete"]) == "undefined") {
				this.cascadeDelete = this.baseDefinition.cascadeDelete;
			}
			if (typeof(this["objectCompatibilityCheck"]) == "undefined") {
				this.objectCompatibilityCheck = this.baseDefinition["objectCompatibilityCheck"];
			}
			if (!this["helpPage"]) {
				this.helpPage = this.baseDefinition["helpPage"];
			}
			if(this.utilitiesListClass == null){
				this.utilitiesListClass = this.baseDefinition.utilitiesListClass;
			}
			for (i = 0; i < this.baseDefinition.displayNameStyles.length; i++) {
				this.displayNameStyles.push(this.baseDefinition.displayNameStyles[i]);
			}
			if(typeof(this["deferLoad"]) == "undefined" ){
				this.deferLoad = this.baseDefinition.deferLoad;
			}
			if (typeof(this["formulaIcon"]) == "undefined") {
				this.formulaIcon = this.baseDefinition.formulaIcon;
			}
			if (typeof(this["formulaText"]) == "undefined") {
				this.formulaText = this.baseDefinition.formulaText;
			}
			if (this.formulaTextProperty == null) {
				this.formulaTextProperty = this.baseDefinition.formulaTextProperty;
			}
			if (this.formulaTextObjectPath == null) {
				this.formulaTextObjectPath = this.baseDefinition.formulaTextObjectPath;
			}
			
			if (typeof(this["userDataPrefix"]) == "undefined") {
				this.userDataPrefix = this.baseDefinition.userDataPrefix;
			}
			if (typeof(this["writeUsage"]) == "undefined") {
				this.writeUsage = this.baseDefinition.writeUsage;
			}
			if (this.populateNewObjectService == null ){
				this.populateNewObjectService = this.baseDefinition.populateNewObjectService;
			}
			]]>
		</method>
		
		<!--- @keywords private -->
		<method name="updateBaseName" args="e=null">
			<![CDATA[
				if(typeof(this.baseDefinition["displayName"]) != "undefined" ){
					this.setAttribute("displayName",this.baseDefinition.displayName);
				}
				if(typeof(this.baseDefinition["newDisplayName"]) != "undefined" ){
					this.setAttribute("newDisplayName",this.baseDefinition.newDisplayName);
				}
				if (typeof(this.baseDefinition["newObjectMenuItemText"]) != "undefined" ){
					this.setAttribute("newObjectMenuItemText", this.baseDefinition.newObjectMenuItemText);
				}
			]]>
		</method>
		
		<!--- @keywords private -->
		<method name="isCreatable" args="parentObject=null, childObject=null, delegate=null">
			<![CDATA[
			if (this.model == null) {
				this.initializeDefinition(wcfModelUtil.findModelForView(this));
			}
			var creatable = true;
			var parentObjCondition = this["enablementCondition"] ? this.enablementCondition : (this["parentObjectCondition"] ? this.parentObjectCondition : null);
			var childObjCondition = this["childObjectCondition"] ? this.childObjectCondition : null;
			if (this["allowedParentTypes"]) {
				creatable = false;
				if (parentObject != null) {
					var parentType = parentObject.objectDefinition.primary?parentObject.objectDefinition.objectType:parentObject.getParentPrimaryObject().objectDefinition.objectType;
					var _parentTypes = wcfStringUtil.splitAndTrim(this.allowedParentTypes, ",");
					
					for (var i = 0; i < _parentTypes.length; i++) {
						if (_parentTypes[i] == parentType) {
							creatable = true;
							break;
						}
					}
				}
			}
			if(parentObject != null && this.organizational){
				parentObject = null;
			}
			if (creatable && parentObjCondition != null) {
				if (delegate) {
					parentObjCondition.registerDelegate(parentObject, delegate);
				}
				creatable = parentObjCondition.isEnabled(parentObject);
			}
			else if (creatable && parentObject != null && !this.parentReference && !this.collectionReference) {
				if (delegate) {
					delegate.register(parentObject, "onreadOnly");
				}
				creatable = !parentObject.readOnly;
			}
			if (creatable && parentObject && parentObject.objectVersionId != null && parentObject.objectVersionId != "") {
				creatable = false;
			}
			if (creatable && childObject != null && this.reference) {
				if (childObjCondition != null) {
					if (delegate) {
						childObjCondition.registerDelegate(childObject, delegate);
					}
					creatable = childObjCondition.isEnabled(childObject);
				}
				else if (this.parentReference || this.collectionReference) {
					if (delegate) {
						delegate.register(childObject, "onreadOnly");
					}
					creatable = !childObject.readOnly;
				}
				if (creatable && childObject.objectVersionId != null && childObject.objectVersionId != "") {
					creatable = false;
				}
			}
			if (creatable && this.primary && this.createService == null) {
				creatable = false;
			}
			if (creatable && this.reference && !this.allowCrossStoreReferences && parentObject && childObject) {
				creatable = (parentObject.objectStoreId == childObject.objectStoreId);
			}
			if (creatable && this.model.oEditor.respectWorkspaceContext) {
				var readOnlyModeContextValue = wcfContextUtil.findContextValue(null, "readOnlyMode");
				if (delegate) {
					delegate.register(readOnlyModeContextValue, "onvalue");
				}
				creatable = (readOnlyModeContextValue.value != "true");
			}
			if (creatable && ( (parentObject && parentObject.isContextReadOnly()) || (childObject && childObject.isContextReadOnly()) ) ) {
				creatable = false;
			}
			if (creatable && parentObject && childObject && this["objectCompatibilityCheck"]) {
				creatable = this.objectCompatibilityCheck.isCompatible(parentObject, childObject);
			}
			if (creatable && parentObject && this.newHandler != null) {
				if (delegate) {
					this.newHandler.registerEnablementDelegate(parentObject, delegate);
				}
				creatable = this.newHandler.isEnabled(parentObject);
			}
			
			if (creatable) {
				var objectStoreId = null;
				var storeConfig = wcfContextUtil.findStoreConfig(parentObject != null ? parentObject : this.model.oEditor, delegate);
				if (this.initializeObjectStoreId && storeConfig){
					objectStoreId = storeConfig.storeId;
				} else {
					if (this.parentReference || this.collectionReference) {
						if (childObject) {
							objectStoreId = childObject.getObjectStoreId(delegate);
						}
					} else {
						if (parentObject) {
							objectStoreId = parentObject.getObjectStoreId(delegate);
						}
					}
				}
				
				var usage = this.writeUsage;
				if (usage == null){
					if (this.parentReference || this.collectionReference) {
						if (childObject) {
							usage = childObject.getWriteUsage();
						}
					} else {
						if (parentObject) {
							usage = parentObject.getWriteUsage();
						}
					}
				}

				if (objectStoreId != null && usage != null && usage != this.model.oEditor.usage) {
					var objectStore = wcfModelUtil.objectStoreMap[objectStoreId + usage];
					if (objectStore == null) {
						// Object store with the usage is not in the object store map. Need to retrieve the information and add it to the object store map.
						objectStore = wcfModelUtil.createObjectStore({
							storeId: objectStoreId,
							usage: usage
						});
						wcfModelUtil.objectStoreMap[objectStoreId + usage] = objectStore;
					}
					if (delegate && !objectStore.accessRightChecked){
						// Don't know the access right yet.
						delegate.register(objectStore, "onaccessRightChecked");
					}
					creatable = objectStore.hasAccessRight;
				}
			}
			
			return creatable;
			]]>
		</method>

		<!---
			@keywords private
			This method checks if the specified objectType is compatible with this wcfObjectDefinition. For an objectType to be
			compatible, it must be one of the types listed in {@link wcfObjectDefinition#compatibleObjectTypes}.
		
			@param String otherObjectType The objectType to compare with the compatible types of this wcfObjectDefinition
			@return boolean This method returns true if objectType is compatible with this wcfObjectDefinition and false otherwise.
		-->
		<method name="isCompatibleType" args="otherObjectType">
			<![CDATA[
			var isCompatible = false;
			if (this["compatibleObjectTypesArray"] == null) {
				this.compatibleObjectTypesArray = wcfStringUtil.splitAndTrim(this.compatibleObjectTypes, ",");
			}
			for (var i = 0; i < this.compatibleObjectTypesArray.length; i++) {
				if (this.compatibleObjectTypesArray[i] == otherObjectType) {
					isCompatible = true;
					break;
				}
			}
			return isCompatible;			
			]]>
		</method>

		<!---
			@keywords private
			This method finds the instance of {@link wcfObjectDefinition#propertiesClass} that is the child of the specified
			parent view. If an instance has previously been requested for the given parent, the previously created one will be
			returned. Otherwise it will create a new instance. The method will also set {@link wcfBaseObjectProperties#o} to
			be the specified {@link wcfModelObject} instance.
			
			@param view parentView The parent view to consider.
			@param wcfModelObject o The model object instance whose properties should be displayed.
			@param boolean inDetails When set to true, this boolean flag indicates that the properties view instance is used
					in the details view. For more information see {@link wcfBaseObjectProperties#inDetails}.
			@return wcfObjectProperties An instance of the class specified in {@link wcfObjectDefinition#propertiesClass propertiesClass}
					that is the child of the specified parent view.
		-->
		<method name="getPropertiesView" args="parentView,o,inDetails">
			<![CDATA[
			var v = null;
			if (this.baseDefinition != null && this.propertiesClass == this.baseDefinition.propertiesClass) {
				v = this.baseDefinition.getPropertiesView(parentView, o, inDetails);
			}
			else if (this.propertiesClass != null) {
				var propertiesViewKey = parentView.getUID();
				if (inDetails) {
					propertiesViewKey += "browsing";
				}
				var v = this.propertiesViews[propertiesViewKey];
				if (typeof(v) == "undefined") {
					if (lz[this.propertiesClass]) {
						v = new lz[this.propertiesClass](parentView, {
								o: o,
								inDetails: inDetails
						});
					}
					else {
						v = wcfDefinitionLoader.getDefinition(this.propertiesClass, parentView, {
								o: o,
								inDetails: inDetails
						});
					}
					this.propertiesViews[propertiesViewKey] = v;
				}
				else {
					v.setAttribute("o", o);
				}
				o.loadChildren(o.objectDefinition.getOpenGroupObjectDefinitions());
				o.loadReferences();
			}
			return v;
			]]>
		</method>
		
		<!---
			@keywords private
			Returns the context menu item text for creating a new object. If the newObjectMenuItemText attribute has not been set
			then this method will return the value constructed from the displayName attribute.

			@return String: the menu display text
		-->
		<method name="getNewObjectMenuItemText">
			<![CDATA[
			var menuItemText = '';
			if (typeof(this["newObjectMenuItemText"]) == "undefined") {
				menuItemText = foundationResources.replaceValues("contextMenuNew", [this.displayName]);
			} else {
				menuItemText = this.newObjectMenuItemText;
			}
			return menuItemText;
			]]>
		</method>

		<!---
			@keywords private
			This method returns the wcfPropertyDefinition with the specified property name.
			If the property definition is not enabled, then it will not be returned.
			
			@param wcfModelObject o The model object
			@param string propertyName The name of the property
			@param lz.Delegate delegate The delegate to register for the enablement condition
			@return wcfPropertyDefinition The property definition.
		-->
		<method name="getPropertyDefinition" args="o, propertyName, delegate=null">
			<![CDATA[
			var def;
			var propDefArray = this.propertyDefinitions[propertyName];
			if (propDefArray) {
				for (var i = 0; i < propDefArray.length; i++) {
					var pDef = propDefArray[i];
					if(pDef["enablementCondition"] && delegate != null) {
						pDef.enablementCondition.registerDelegate(o, delegate);
					}
					
					if (!pDef["enablementCondition"] || pDef.enablementCondition.isEnabled(o)) {
						def = pDef;
						break;
					}
				}
			}
			return def;
			]]>
		</method>
		
		<!---
			@keywords private
			This method removes the specified property definition from this object definition.
			
			@param string propertyName The name of the property
		-->
		<method name="removePropertyDefinition" args="propertyDefinition">
			<![CDATA[
			var propDefArray = this.propertyDefinitions[propertyDefinition.propertyName];
			if (propDefArray) {
				for (var i = 0; i < propDefArray.length; i++) {
					if (propertyDefinition = propDefArray[i]) {
						propDefArray.splice(i, 1);
						i--;
					}
				}
				if (propDefArray.length == 0) {
					delete this.propertyDefinitions[propertyDefinition.propertyName];
				}
			}
			]]>
		</method>

		<!---
			@keywords private
			To log wcfObjectDefinition detail.
		-->
		<method name="logDefinition">
			<![CDATA[
			wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "--- wcfObjectDefinition objectType=" + this.objectType + " " + this + " ---");

			// attributes
			if (typeof(this["allowImplicitParentCreate"]) != "undefined" && this.allowImplicitParentCreate) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "allowImplicitParentCreate = " + this.allowImplicitParentCreate);
			}

			if (typeof(this["baseType"]) != "undefined" && this.baseType != null) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "baseType = " + this.baseType);
			}

			if (typeof(this["browseFilterType"]) != "undefined" && this.browseFilterType != null) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "browseFilterType = " + this.browseFilterType);
			}
			
			if (typeof(this["collectionReference"]) != "undefined" && this.collectionReference) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "collectionReference = " + this.collectionReference);
			}
			
			if (typeof(this["compatibleObjectTypes"]) != "undefined" && this.compatibleObjectTypes != null && this.compatibleObjectTypes.length > 0) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "compatibleObjectTypes = " + this.compatibleObjectTypes);
			}
			
			if (typeof(this["copyProtected"]) != "undefined" && this.copyProtected) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "copyProtected = " + this.copyProtected);
			}
			
			if (typeof(this["creatable"]) != "undefined" && this.creatable) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "creatable = " + this.creatable);
			}
			
			if (typeof(this["defaultNavigationList"]) != "undefined" && this.defaultNavigationList != null) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "defaultNavigationList = " + this.defaultNavigationList);
			}
			
			if (typeof(this["detailsViewHeaderText"]) != "undefined" && this.detailsViewHeaderText != null) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "detailsViewHeaderText = " + this.detailsViewHeaderText);
			}

			if (typeof(this["displayName"]) != "undefined" && this.displayName != null) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "displayName = " + this.displayName);
			}
			
			if (typeof(this["displayNameObjectPath"]) != "undefined" && this.displayNameObjectPath != null) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "displayNameObjectPath = " + this.displayNameObjectPath);
			}
			
			if (typeof(this["displayNameProperty"]) != "undefined" && this.displayNameProperty != null && this.displayNameProperty.length > 0) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "displayNameProperty = " + this.displayNameProperty);
			}
			
			if (typeof(this["fileNamePropertyName"]) != "undefined" && this.fileNamePropertyName != null) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "fileNamePropertyName = " + this.fileNamePropertyName);
			}
			
			if (typeof(this["fileSizePropertyName"]) != "undefined" && this.fileSizePropertyName != null) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "fileSizePropertyName = " + this.fileSizePropertyName);
			}
			
			if (typeof(this["headerIcon"]) != "undefined" && this.headerIcon != null) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "headerIcon = " + this.headerIcon);
			}
			
			if (typeof(this["icon"]) != "undefined" && this.icon != null) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "icon = " + this.icon);
			}
			
			if (typeof(this["idProperty"]) != "undefined" && this.idProperty != null && this.idProperty.length > 0) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "idProperty = " + this.idProperty);
			}
			
			if (typeof(this["initializeObjectStoreId"]) != "undefined" && this.initializeObjectStoreId != null) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "initializeObjectStoreId = " + this.initializeObjectStoreId);
			}
			
			if (typeof(this["isBaseDefinition"]) != "undefined" && this.isBaseDefinition) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "isBaseDefinition = " + this.isBaseDefinition);
			}

			if (typeof(this["isFileObject"]) != "undefined" && this.isFileObject) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "isFileObject = " + this.isFileObject);
			}
			
			if (typeof(this["languageSensitive"]) != "undefined" && this.languageSensitive) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "languageSensitive = " + this.languageSensitive);
			}
			
			if (typeof(this["longDisplayNameObjectPath"]) != "undefined" && this.longDisplayNameObjectPath != null) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "longDisplayNameObjectPath = " + this.longDisplayNameObjectPath);
			}
			
			if (typeof(this["longDisplayNameProperty"]) != "undefined" && this.longDisplayNameProperty != null && this.longDisplayNameProperty.length > 0) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "longDisplayNameProperty = " + this.longDisplayNameProperty);
			}
			
			if (typeof(this["maximumFileSize"]) != "undefined" && this.maximumFileSize != null) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "maximumFileSize = " + this.maximumFileSize);
			}
			
			if (typeof(this["newDisplayName"]) != "undefined" && this.newDisplayName != null) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "newDisplayName = " + this.newDisplayName);
			}
			
			if (typeof(this["newObjectMenuItemText"]) != "undefined" && this.newObjectMenuItemText != null) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "newObjectMenuItemText = " + this.newObjectMenuItemText);
			}
			
			if (typeof(this["objectGroups"]) != "undefined" && this.objectGroups != null && this.objectGroups.length > 0) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "objectGroups = " + this.objectGroups);
			}

			if (typeof(this["openGroupTop"]) != "undefined" && this.openGroupTop) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "openGroupTop = " + this.openGroupTop);
			}
			
			if (typeof(this["organizational"]) != "undefined" && this.organizational) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "organizational = " + this.organizational);
			}
			
			if (typeof(this["parentReference"]) != "undefined" && this.parentReference) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "parentReference = " + this.parentReference);
			}
			
			if (typeof(this["primary"]) != "undefined" && this.primary) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "primary = " + this.primary);
			}
			
			if (typeof(this["propertiesClass"]) != "undefined" && this.propertiesClass != null) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "propertiesClass = " + this.propertiesClass);
			}

			if (typeof(this["reference"]) != "undefined" && this.reference) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "reference = " + this.reference);
			}

			if (typeof(this["releaseWhenClosed"]) != "undefined") {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "releaseWhenClosed = " + this.releaseWhenClosed);
			}
			
			if (typeof(this["saveParentPrimaryObject"]) != "undefined" && this.saveParentPrimaryObject) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "saveParentPrimaryObject = " + this.saveParentPrimaryObject);
			}
			
			if (typeof(this["savePriority"]) != "undefined" && this.savePriority != null) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "savePriority = " + this.savePriority);
			}
			
			if (typeof(this["searchType"]) != "undefined" && this.searchType != null) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "searchType = " + this.searchType);
			}
			
			if (typeof(this["singleInstance"]) != "undefined" && this.singleInstance) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "singleInstance = " + this.singleInstance);
			}
			
			if (typeof(this["summaryClass"]) != "undefined" && this.summaryClass != null) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "summaryClass = " + this.summaryClass);
			}

			if (typeof(this["createWizardClass"]) != "undefined" && this.createWizardClass != null) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "createWizardClass = " + this.createWizardClass);
			}

			if (typeof(this["helpLink"]) != "undefined" && this.helpLink != null && this.helpLink.length > 0) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "helpLink = " + this.helpLink);
			}

			if (typeof(this["allowedParentTypes"]) != "undefined" && this.allowedParentTypes != null && this.allowedParentTypes.length > 0) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "allowedParentTypes = " + this.allowedParentTypes);
			}
			
			if (typeof(this["templateTypeProperty"]) != "undefined" && this.templateTypeProperty != null && this.templateTypeProperty.length > 0) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "templateTypeProperty = " + this.templateTypeProperty);
			}

			if (typeof(this["referencedType"]) != "undefined" && this.referencedType != null && this.referencedType.length > 0) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "referencedType = " + this.referencedType);
			}

			if (typeof(this["referencedTypes"]) != "undefined" && this.referencedTypes != null && this.referencedTypes.length > 0) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "referencedTypes = " + this.referencedTypes);
			}

			if (typeof(this["allowDuplicates"]) != "undefined" && !this.allowDuplicates) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "allowDuplicates = " + this.allowDuplicates);
			}

			if (typeof(this["derivedId"]) != "undefined" && this.derivedId) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "derivedId = " + this.derivedId);
			}
			
			if (typeof(this["allowCrossStoreReferences"]) != "undefined" && !this.allowCrossStoreReferences) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "allowCrossStoreReferences = " + this.allowCrossStoreReferences);
			}

			if (typeof(this["cascadeDelete"]) != "undefined") {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "cascadeDelete = " + this.cascadeDelete);
			}
			
			if (typeof(this["organizedObjectTypes"]) != "undefined" && this.organizedObjectTypes != null && this.organizedObjectTypes.length > 0) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "organizedObjectTypes = " + this.organizedObjectTypes);
			}
			
			if (typeof(this["utilitiesListClass"]) != "undefined" && this.utilitiesListClass != null) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "utilitiesListClass = " + this.utilitiesListClass);
			}
			
			if (typeof(this["deferLoad"]) != "undefined" && this.deferLoad) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "deferLoad = " + this.deferLoad);
			}

			if (typeof(this["formulaIcon"]) != "undefined" && this.formulaIcon != null) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "formulaIcon = " + this.formulaIcon);
			}

			if (typeof(this["formulaText"]) != "undefined" && this.formulaText != null) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "formulaText = " + this.formulaText);
			}

			if (typeof(this["formulaTextProperty"]) != "undefined" && this.formulaTextProperty != null && this.formulaTextProperty.length > 0) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "formulaTextProperty = " + this.formulaTextProperty);
			}

			if (typeof(this["formulaTextObjectPath"]) != "undefined" && this.formulaTextObjectPath != null) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "formulaTextObjectPath = " + this.formulaTextObjectPath);
			}
			
			if (typeof(this["userDataPrefix"]) != "undefined" && this.userDataPrefix != "x_") {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "userDataPrefix = " + this.userDataPrefix);
			}
						
			// map attributes
			wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "Object Templates (wcfObjectTemplate):");
 			for (var key in objectTemplates) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "\t" + key + " " + this.objectTemplates[key]);
 			}

			wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "Property definitions (wcfPropertyDefinition):");
			for (var key in propertyDefinitions) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "\t" + key);
			}

			// array attributes
			if (typeof(this["clientActions"]) != "undefined" && this.clientActions != null && this.clientActions.length > 0) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "Client Actions (wcfClientAction):");
				for (var i=0; i < this.clientActions.length; i++) {
					wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "\t" + this.clientActions[i] + ", displayName = " + this.clientActions[i].displayName);
				}
			}
			if (typeof(this["fileTypes"]) != "undefined" && this.fileTypes != null && this.fileTypes.length > 0) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "File Types (wcfFileType):");
				for (var i=0; i < this.fileTypes.length; i++) {
					wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "\t" + this.fileTypes[i]);
				}
			}
			if (typeof(this["filters"]) != "undefined" && this.filters != null && this.filters.length > 0) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "Filters (wcfFilter):");
				for (var i=0; i < this.filters.length; i++) {
					wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "\t" + this.filters[i] + ", displayName = " + this.filters[i].displayName);
				}
			}
			if (typeof(this["navigationListDefinitions"]) != "undefined" && this.navigationListDefinitions != null && this.navigationListDefinitions.length > 0) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "Navigation List Definitions (wcfNavigationListDefinition):");
				for (var i=0; i < this.navigationListDefinitions.length; i++) {
					wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "\t" + this.navigationListDefinitions[i] + ", displayName = " + this.navigationListDefinitions[i].displayName);
				}
			}
			if (typeof(this["validators"]) != "undefined" && this.validators != null && this.validators.length > 0) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "Validators (wcfValidator):");
				for (var i=0; i < this.validators.length; i++) {
					wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "\t" + this.validators[i] + ", validatorId = " + this.validators[i].validatorId + ", validatorType = " + this.validators[i].validatorType);
				}
			}
			if (typeof(this["viewOptions"]) != "undefined" && this.viewOptions != null && this.viewOptions.length > 0) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "View Options (wcfViewOption):");
				for (var i=0; i < this.viewOptions.length; i++) {
					wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "\t" + this.viewOptions[i] + ", displayName = " + this.viewOptions[i].displayName + ", viewOptionType = " + this.viewOptions[i].viewOptionType + ", value = " + this.viewOptions[i].value);
				}
			}

			// services
			if (this.createService != null) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "createService = " + this.createService + " url = " + this.createService.url);
			}

			if (this.deleteService != null) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "deleteService = " + this.deleteService + " url = " + this.deleteService.url);
			}

			if (this.postSaveService != null) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "postSaveService = " + this.postSaveService + " url = " + this.postSaveService.url);
			}

			if (this.saveHandler != null) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "saveHandler = " + this.saveHandler);
			}
			
			if (this.newHandler == null) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "newHandler = " + this.newHandler);
			}
			
			if (this.refreshService != null) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "refreshService = " + this.refreshService + " url = " + this.refreshService.url);
			}

			if (this.saveService != null) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "saveService = " + this.saveService + " url = " + this.saveService.url);
			}

			// array of services
			if (typeof(this["customServices"]) != "undefined" && this.customServices != null && this.customServices.length > 0) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "Services (wcfCustomService):");
				for (var i=0; i < this.customServices.length; i++) {
					wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "\t" + this.customServices[i] + ", url = " + this.customServices[i].url);
				}
			}

			if (typeof(this["getChildrenServices"]) != "undefined" && this.getChildrenServices != null && this.getChildrenServices.length > 0) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "Get Children Services (wcfGetChildrenService):");
				for (var i=0; i < this.getChildrenServices.length; i++) {
					wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "\t" + this.getChildrenServices[i] + ", url = " + this.getChildrenServices[i].url);
				}
			}

			if (typeof(this["getReferencesServices"]) != "undefined" && this.getReferencesServices != null && this.getReferencesServices.length > 0) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "Get References Services (wcfGetReferencesService):");
				for (var i=0; i < this.getReferencesServices.length; i++) {
					wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "\t" + this.getReferencesServices[i] + ", url = " + this.getReferencesServices[i].url);
				}
			}

			if (this.populateNewObjectService != null) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "populateNewObjectService = " + this.populateNewObjectService + " url = " + this.populateNewObjectService.url);
			}

			if (this.getPreviewURLService != null) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "getPreviewURLService = " + this.getPreviewURLService + " url = " + this.getPreviewURLService.url);
			}

			wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "Child Object Definitions:");
			for (var i = 0; i < this.objectDefinitions.length; i++) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "INFO", "wcfObjectDefinition", "logDefinition", "\t" + this.objectDefinitions[i].objectDefinition.objectType + " " + this.objectDefinitions[i].objectDefinition);
			}
			wcfLogger.flush();
			for (var i = 0; i < this.objectDefinitions.length; i++) {
				this.objectDefinitions[i].objectDefinition.logDefinition();
			}
			]]>
		</method>
	</class>

	<!---
		<p>This class contains the definition for a primary object. A primary object definition describes a top level business object that exists as its own
		entity independent of other objects. They are unique from other object definition types in that primary objects can be
		found using a search service and can be referenced by other primary objects.
		
		<p>For example, objects such as the {@link catProductPrimaryObjectDefinition products} and the {@link catCatalogPrimaryObjectDefinition categories}
		in the catalog each have a wcfPrimaryObjectDefinition defined to represent them.
		
		<p>In contrast, an object such {@link catCatalogEntryDescription} is not a primary object because it can only exist as a child of a {@link catCatalogPrimaryObjectDefinition category}
		object. Other primary objects cannot refer to a {@link catCatalogEntryDescription} and search results will not return them either. For more details on child objects, refer to the
		documentation for {@link wcfChildObjectDefinition}.</p>
		
		<p>Primary object definitions are declared as direct child nodes of an instance of {@link wcfBusinessObjectEditor}. This declares that the
		Business Object Editor should manage this primary object.
		
		<p>Primary objects can have a special service, called a {@link wcfPostSaveService post save service} declared as its child. If such a service is defined then it
		will be invoked automatically each time the {@link wcfCreateService create} or {@link wcfUpdateService update} service are called.
		
	-->
	<class name="wcfPrimaryObjectDefinition" extends="wcfObjectDefinition" primary="true" openGroupTop="true">
		<!---
			This attribute specifies the relative URL to the help file containing the explanation of this object.
			The default value of this attribute is the empty string.
		-->		
		<attribute name="helpLink" type="string" value=""/>
	</class>
	
	<!---
		This class defines a child object definition. A child object definition describes a secondary business object that
		is owned by a primary object or another child object.
		
		<p>Child object definitions are declared as direct child nodes of an instance of {@link wcfPrimaryObjectDefinition}, or as the
		child nodes of another wcfChildObjectDefinition.
		Instances of the objects described by a child object definition cannot exist without an instance of their primary
		object definition. When the parent object is deleted, the child object is also deleted.
		
		<p>For example, a {@link catCatalogEntryDescription catalog entry description} is defined as a child object: This object is a descendant of a catalog entry - it's
		primary object. When that catalog entry is deleted, the {@link catCatalogEntryDescription description} is also be deleted. Also, aside from the owning catalog entry,
		no other {@link wcfPrimaryObjectDefinition primary objects} will refer to this {@link catCatalogEntryDescription description}.
		
		<p>These child objects do not refer to the heirarchical relationship between the primary objects.
	-->
	<class name="wcfChildObjectDefinition" extends="wcfObjectDefinition" initstage="defer">
		<!---
			A comma separated list of {@link wcfObjectDefinition#objectType} that this child object definition can be created under.  The
			objectTypes specified are checked with the parent primary object definition.
		-->		
		<attribute name="allowedParentTypes" type="string" value=""/>
	</class>
	
	<!---
		This class describes a relationship between two {@link wcfPrimaryObjectDefinition primary objects}.
		
		<p>This relationship object must be owned by one of these two objects. This object is called the owning object. The primary object on
		the other side of the relation is called the referenced object. The type of the referenced object must be specified as the value of
		{@link wcfReferenceObjectDefinition#referencedType}.

		<p>If either the owning object or the referenced object of the relationship is deleted, this relationship object is also deleted.

		<p>For example, a {@link catMerchandisingAssociation merchandising association} is modeled as a reference object as it
		represents a relationship between two primary objects in the catalog.

		<p>Consider the following code:
		@START_CODE
			<PrimaryObjectDefinition name="A" ...>
				<ReferenceObjectDefinition name="ReferenceToBObjects" referencedType="B".../>
			</PrimaryObjectDefinition>
			<PrimaryObjectDefinition name="B" .../>
		@END_CODE
		
		<p>In the snippet above, consider <CODE>ReferenceToBObjects</CODE>. <CODE>A</CODE> is the owning object of this reference object definition,
		while <CODE>B</CODE> is the referenced object.
	-->
	<class name="wcfReferenceObjectDefinition" extends="wcfChildObjectDefinition" reference="true">
		<!---
			The {@link wcfObjectDefinition#objectType} that this wcfReferenceObjectDefinition can reference. Attribute referenceTypes overides
			this attribute, specifying both will mean this attribute is ignored.
		-->
		<attribute name="referencedType" type="string" value=""/>
		<!---
			A comma separated list of {@link wcfObjectDefinition#objectType} that this wcfReferenceObjectDefinition can reference. This attribute
			overides the referencedType attribute, specifying both will mean the referencedType attribute is ignored.
		-->
		<attribute name="referencedTypes" type="string" value=""/>
		<!---
			This attribute indicates that the same business object can be referenced
			more than once through the relationship type described by this reference
			object definition. If this value is set to false, then the creation
			of duplicate references will be prevented.

			The default value for this attribute is "true". 			
		-->
		<attribute name="allowDuplicates" type="boolean"/>
		<!--- @keywords private -->
		<attribute name="allowDuplicates__type" type="string" value="boolean"/>
		<!---
			When "derivedId" is set to "true", the value of the {@link wcfObjectDefinition#idProperty ID property} of the
			reference object will be set to the value of the ID property of the referenced business object.
			
			The default value of this attribute is "false".
		-->
		<attribute name="derivedId" type="boolean"/>
		<!--- @keywords private -->
		<attribute name="deriveId__type" type="string" value="boolean"/>
		<!---
			Indicates whether or not the object type allows cross store references. When this attribute is set to false,
			the owning object and referenced object must belong to the same store.
			
			The default value for this attribute is "true".
		-->
		<attribute name="allowCrossStoreReferences" type="boolean"/>
		<!--- @keywords private -->
		<attribute name="allowCrossStoreReferences__type" type="string" value="boolean"/>
	</class>

	<!---
		This class defines a parent-child relationship between two primary objects. The parent object is the collection
		object and the child object is a member object in the collection. A member object can belong to more than one
		collection object. In this relationship, the parent is the owning object and the child is the referenced object.
		The owning object is the {@link wcfPrimaryObjectDefinition primary object definition} that contains the collection
		reference object definition.

		<p>The type of the referenced object must be specified as the value of {@link wcfReferenceObjectDefinition#referencedType}.

		<p>For example, a wcfCollectionReferenceObjectDefinition is used to describe the relationship between sales
		catalogs and sales categories. It is declared within the {@link catSalesCatalogPrimaryObjectDefinition} and
		specifies <CODE>SalesCatalogGroup</CODE> as its {@link wcfReferenceObjectDefinition#referencedType}. This declares
		that {@link catSalesCatalogPrimaryObjectDefinition} is the collection and <CODE>SalesCatalogGroup</CODE>s are the
		members in this relationship.
	-->
	<class name="wcfCollectionReferenceObjectDefinition" extends="wcfReferenceObjectDefinition" collectionReference="true">
	</class>

	<!---
		This class defines a parent child relationship. The owning object is the parent in this relationship, while the referenced
		object is the child. The owning object is the {@link wcfPrimaryObjectDefinition primary object definition} that contains
		this parent reference object definition.

		<p>The type of the referenced object must be specified as the value of {@link wcfReferenceObjectDefinition#referencedType}.

		<p>For example, a wcfParentReferenceObjectDefinition is used to describe the parent/child relationship between categories
		and products. It is declared within the {@link catCatalogGroupPrimaryObjectDefinition} and specifies <CODE>Product</CODE>
		as its {@link wcfReferenceObjectDefinition#referencedType}. This declares that
		{@link catCatalogGroupPrimaryObjectDefinition catalog} is the parent and <CODE>Product</CODE>s are the children in this
		relationship.
	-->
	<class name="wcfParentReferenceObjectDefinition" extends="wcfReferenceObjectDefinition" parentReference="true">
		<!---
			Indicates that when the parent object is deleted, the child primary objects will
			also be deleted. The {@link wcfDeleteService} associated with the parent object must ensure that
			the child objects are deleted on the server. When the parent's delete service completes successfully
			the child objects will be removed from the client side cache.
			The default value is <code>false</code>.
		-->
		<attribute name="cascadeDelete" type="boolean"/>
		<!--- @keywords private -->
		<attribute name="cascadeDelete__type" type="string" value="boolean"/>
	</class>
	
	<!---
		This class defines an organizational object definition. An organization object is a "client side only" object and has no
		corresponding object on the server. Organizational objects are represented in the navigation and utilities browse view as high level tree nodes.
		Instances of wcfOrganizationalObjectDefinition can only be declared as children of {@link wcfBusinessObjectEditor}.
		
		<p>Instances of {@link wcfCreateService}, {@link wcfUpdateService}, {@link wcfDeleteService}, {@link wcfRefreshService},
		{@link wcfGetReferencesService}, {@link wcfCustomService}, {@link wcfClientAction}, and {@link wcfViewOption} can not be
		declared as children of a wcfOrganizationalObjectDefinition.
		
		<p>Organizational objects can only be created by declaring them in the <code>template</code> {@OLlink LzDataset dataset} of
		{@link wcfTopObjectDefinition} or of another wcfOrganizationalObjectDefinition.
		
		<p>For example, {@link mktCampaignsOrganizationalObjectDefinition} and {@link mktActivitiesOrganizationalObjectDefinition} are
		organizational objects that are created because they are both declared in the <code>template</code> of
		{@link mktMarketingTopObjectDefinition}.
		
		<p>Instances of wcfOrganizationalObjectDefinition must have a {@OLlink LzDataset dataset} named <CODE>template</CODE>
		or at least one instance of {@link wcfGetChildrenService} declared as a child instance.
		
		<p>An example of a wcfOrganizationalObjectDefinition with a <code>template</code> {@OLlink LzDataset dataset} is the
		{@link wcfTopObjectDefinition TopObject} {@link mktMarketingTopObjectDefinition} and an example of a
		wcfOrganizationalObjectDefinition with a {@link wcfGetChildrenService} is {@link mktWebActivityTemplatesOrganizationalObjectDefinition}.
	-->
	<class name="wcfOrganizationalObjectDefinition" extends="wcfObjectDefinition" organizational="true">
		<!---
			Comma separated list of primary object types that are expected children of this organizational object.
			When new instances of one of these object types are created, they will be added as children of that organizational object by the framework.
			The default value of this attribute is the empty string.
		-->
		<attribute name="organizedObjectTypes" type="string" value=""/>
		<!---
			Indicates whether new object menu items are added to the explorer view context menu. A new object menu item will be added for each 
			creatable primary object specified by the <code>organizedObjectTypes</code> attribute. The default is <code>true</code>.
		-->
		<attribute name="addNewActionsToExplorerContextMenu" type="boolean" value="true"/>
	</class>
	
	<!---
		<p>A top object definition is an {@link wcfOrganizationalObjectDefinition organizational object definition} that describes the root
		object for an instance of {@link wcfBusinessObjectEditor}. This root object is the starting point for populating the {@link wcfNavigationObjectTree navigation tree}.
		
		<p>When the {@link wcfBusinessObjectEditor business object editor} is initialized, the objects in the tree will be populated using
		the top object definition. To do this, the top object will use its child <code>template</code> {@OLlink LzDataset dataset} and {@link wcfGetChildrenService} declarations.
		
		<p>For example, when the {@link mktMarketingManagement Marketing Management Tool} is initialized, the objects in the tree are populated using
		the definition of {@link mktMarketingTopObjectDefinition}. This {@link mktMarketingTopObjectDefinition top object definition} contains a child <code>template</code>
		{@OLlink LzDataset dataset} which declares that instances of {@link mktActivitiesOrganizationalObjectDefinition},
		{@link 	mktCampaignsOrganizationalObjectDefinition}, {@link mktEmailTemplatesOrganizationalObjectDefinition},
		{@link mktEMarketingSpotOrganizationalObjectDefinition}, and {@link mktWebActivityTemplatesOrganizationalObjectDefinition}
		 should also be created.
		
		<p>Only one top object definition can be declared for each {@link wcfBusinessObjectEditor}.
		
		<p>For example, {@link mktMarketingTopObjectDefinition} is the top object defined for the {@link mktMarketingManagement Marketing Management Tool}.
	-->
	<class name="wcfTopObjectDefinition" extends="wcfOrganizationalObjectDefinition" objectType="Top">
	</class>

	<!---
		@keywords deprecated

		<p>This class is used to register an object definition so it can be used by a {@link wcfBusinessObjectEditor} instance
		without being explicitly instantiated as a child of the business object editor instance. This is useful when business
		object editor's use each other's services and object definitions. When the framework encounters an object type
		that has not been declared, it will check the object definition registry and if a matching class is found, then
		the object definition will be implicitly instantiated under the business object editor instance.</p>
		
		<p>Only {@link wcfPrimaryObjectDefinition primary object definitions} and object {@link wcfObjectDefinition#isBaseDefinition base object definitions}
		should be registered using <code>wcfRegisterObjectDefinition</code>.</p>
		
		<p>Business object editor instances should still explicitly declare all of the primary object definitions that the business
		object editor is intending to manage. Primary object definitions that are used indirectly through {@link wcfReferenceObjectDefinition reference objects} do not need to
		be declared.</p>
		
		<p>Instances of <code>wcfRegisterObjectDefinition</code> must be declared directly under the <code>library</code> tag in the same
		library as the class being registered.</p>
		
		<p>The following is an example registers the <code>catAttributeDictionaryAttribute</code> class to
		the <code>AttributeDictionaryAttribute</code> object type.</p>
		@START_CODE
		<wcfRegisterObjectDefinition objectType="AttributeDictionaryAttribute" objectDefinitionClass="catAttributeDictionaryAttribute"/>
		@END_CODE
	-->
	<class name="wcfRegisterObjectDefinition" extends="node">
		<!---
			A string to identify the object type. All registed object definitions must have a unique object type.
			This is a required attribute.
		-->
		<attribute name="objectType" type="string"/>
		<!---
			The object definition class that will be instantiated when the object definition is required. This
			class must extend {@link wcfPrimaryObjectDefinition} or it must be an instance of {@link wcfObjectDefinition} with
			{@link wcfObjectDefinition:isBaseDefinition isBaseDefinition} set to <code>"true"</code>.
			@type string
		-->
		<attribute name="objectDefinitionClass" type="string"/>
		
		<!--- @keywords private -->
		<handler name="onconstruct">
			<![CDATA[
			var oDefs = global["objectDefinitionRegistry"];
			if (!oDefs) {
				oDefs = {};
				global.objectDefinitionRegistry = oDefs;
			}
			if (oDefs[this.objectType]) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "SEVERE", "wcfRegisterObjectDefinition", "onconstruct", "Duplicate registered object definition: " + this.objectType);
			}
			else {
				oDefs[this.objectType] = this;
				if (wcfLogger.enabled) {			
					wcfLogger.log("com.ibm.commerce.lobtools.foundation.model", "FINEST", "wcfRegisterObjectDefinition", "onconstruct", this.objectType);
				}
			}
			]]>
		</handler>
	</class>

</library>
