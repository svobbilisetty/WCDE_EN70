<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2007, 2011 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->
<library>	
	<!---
		The class wcfBaseComboBox implements a basic combobox.  Use wcfBaseComboBox when implementing a basic
		combobox that has WebSphere Commerce's look and feel.
		
		@START_CODE	
		<wcfBaseComboBox name="colorSelector" width="235">
			<node value="blue" text="${resourceBundle.blue.string}">
				<handler name="oninit">
					parent.addItem(this.text, this.value);
					parent.selectItem(this.value);
				</handler>
			</node>
			<node value="red" text="${resourceBundle.red.string}">
				<handler name="oninit">
					parent.addItem(this.text, this.value);
				</handler>
			</node>
		</wcfBaseComboBox>
		@END_CODE	
	-->
    <class name="wcfBaseComboBox" extends="wcfBaseValueSelector">
    	<!--- @keywords private -->
 		<attribute name="dropDownResource" type="string" value="comboxBoxButton"/>
 		<!---
 			@keywords private
 			The default height used for combobox in forms taken from the height specified in {@link wcfStyle}
 		 -->
		<attribute name="height" value="${this.style.forminputheight}"/>
		<!---
			@keywords private
			The default width used for combobox in forms
		-->
		<attribute name="width" value="230"/>
		
		<!--- @keywords private -->		
		<handler name="oninit"><![CDATA[
			this.showUp();
			]]>
		</handler>
		
		<!--- @keywords private -->
		<method name="getUntruncatedWidth"><![CDATA[
			return this.selectedValueText.getUntruncatedWidth() + this.dropdown.width + this.padding;
			]]>
		</method>
		
		<!--- @keywords private -->
		<method name="showDown">
 			<![CDATA[
 			this.dropdown.setAttribute('frame', 3); 
			]]>
		</method>
		
		<!--- @keywords private -->
		<method name="showUp">
 			<![CDATA[
 			if(this.enabled){
 				this.dropdown.setAttribute('frame', 1); 
 			}else{
 				this.dropdown.setAttribute('frame', 4);
 			}
			]]>
		</method>
		
		<!--- @keywords private -->
		<method name="showOver">
 			<![CDATA[
 			if(this.enabled){
 				this.dropdown.setAttribute('frame', 2);
 			} else {
 				this.dropdown.setAttribute('frame', 4);
 			}
			]]>
		</method>
		
		<!--- @keywords private -->
		<handler name="onenabled"><![CDATA[
			this.showUp();
			this._applystyle(null);
			]]>
		</handler>
		
		<layout name="layout">
			<!--- @keywords private -->
			<method name="init"><![CDATA[
				super.init();
				this.updateDelegate.register(classroot.selectedValueText, "onwidth");
				this.updateDelegate.register(classroot, "onwidth");
				]]>
			</method>
			
			<!--- @keywords private -->
			<method name="update" args="e=null"><![CDATA[
				// this method will be called even after this.dropdown and this.borders are destroyed. Therefore,
				// we need to make sure it updates layout only if dropdown button and borders are not destroyed.
				if(!this.locked && classroot["dropdown"] && classroot["borders"]){
					this.lock();
		
					classroot.borders.setAttribute('x', 0); 
					classroot.borders.setAttribute('y', 0); 
					classroot.borders.setAttribute('width', classroot.width - classroot.dropdown.width); 
					classroot.borders.setAttribute('height', classroot.height); 
					
					classroot.selectedValueText.setAttribute('x', classroot.padding); 
					classroot.selectedValueText.setAttribute('y', classroot.borders.middle.y); 
					
					classroot.dropdown.setAttribute('x', classroot.width - classroot.dropdown.width); 
					classroot.dropdown.setAttribute('y', 0); 
					
					this.locked = false;
				}
				]]>
			</method>
		</layout>
		<view name="borders" placement="background" bgcolor="${classroot.enabled ? classroot.style.forminputshadowbordercolor : classroot.style.disabledbordercolor}">
			<view name="middle" x="${classroot.style.forminputbordersize}" y="${classroot.style.forminputbordersize}" height="${parent.height - 2*classroot.style.forminputbordersize}" width="${parent.width - 2*classroot.style.forminputbordersize}" bgcolor="${classroot.enabled ? classroot.style.forminputbgcolor : classroot.style.forminputdisabledbgcolor}"/>
			<view x="${classroot.style.forminputbordersize}" y="${parent.height-this.height}" resource="shadow_stroke_bottom" width="${parent.width-2*classroot.style.forminputbordersize}" stretches="width" visible="${classroot.enabled}"/>
			<view x="${classroot.style.forminputbordersize}" y="${classroot.style.forminputbordersize}" resource="shadow_left" height="${parent.height-2*classroot.style.forminputbordersize}" stretches="height" visible="${classroot.enabled}"/>
			<view x="${parent.width-classroot.style.forminputbordersize-this.width}" y="${classroot.style.forminputbordersize}" resource="shadow_right" height="${parent.height-2*classroot.style.forminputbordersize}" stretches="height" visible="${classroot.enabled}"/>
			<view x="${classroot.style.forminputbordersize}" y="${classroot.style.forminputbordersize}" resource="shadow_top" width="${parent.width-2*classroot.style.forminputbordersize}" stretches="width" visible="${classroot.enabled}"/>
			<view x="${classroot.style.forminputbordersize}" y="${parent.height-classroot.style.forminputbordersize-this.height}" resource="shadow_bottom" width="${parent.width-2*classroot.style.forminputbordersize}" stretches="width" visible="${classroot.enabled}"/>
			<view resource="shadow_stroke_top" width="${parent.width}" stretches="width" visible="${classroot.enabled}"/>
		</view>
		<view name="dropdown" resource="${classroot.dropDownResource}"/>
    </class>

	<!---
		@keywords private
		
		This combo box implementation is for internal use by both {@link wcfPropertyCombobox} and {@link wcfGridComboBox}
		to bind a {@link wcfModelProperty} with the combo box.
		The relationship is bi-directional.  This means that the combo box state will be refreshed to represent the value
		of the property and the new property value will be stored when a user changes the combo box state.
	-->
	<class name="wcfComboBox" extends="wcfBaseComboBox">
		<!--- Reference to {@link wcfModelProperty} object that is being edited. -->
		<attribute name="property" value="null" setter="setProperty(property)"/>
		
		<!--- @keywords private -->
		<method name="destroy">
			<![CDATA[
			if (this["updateValueDel"]) {
				this.updateValueDel.unregisterAll();
				delete this.updateValueDel;
			}
			if (this["propValueDel"]) {
				this.propValueDel.unregisterAll();
				delete this.propValueDel;
			}
			
			this.setAttribute('visible', false);
			
			super.destroy();

			]]>
		</method>
		
		<!---
			Set the {@link wcfModelProperty} to be associated with this combo box. Listeners are created to
			watch the property value. If the property changes at anytime, the updateValue method will be called.
			@param wcfModelProperty newProperty: New Property associated with this combo box
		-->	
		<method name="setProperty" args="newProperty">
			<![CDATA[
			if (typeof(this["property"]) == "undefined" || newProperty != this["property"]) {
				if (typeof(this.updateValueDel) == "undefined") {
					this.updateValueDel = new lz.Delegate(this, "updateValue");
				}
				this.updateValueDel.unregisterAll();
				this.property = newProperty;
				
				this.createComboBox();
				
				if(this.property != null){
					this.updateValueDel.register(this.property, "onvalue");
					this.updateValue();
				}
				else {
					this.clearSelection();
				}
			}
			]]>
		</method>
		
		<!---
			@keywords private
			Calls createComboBox
		 -->
		<handler name="oninit">
			<![CDATA[
			if (this["property"]) {
				this.createComboBox();
			}
			]]>
		</handler>
		
		<!---
			Creates the combo box and adds the selectable options from those specified in the {@link wcfModelProperty}
			property definitions values.  The current selection is then set for the combo box from the
			{@link wcfModelProperty} value.
		-->
		<method name="createComboBox" args="e=null">
			<![CDATA[
			if (this.property != null && this.property.propertyDefinition != null) {
				var propDef = this.property.propertyDefinition;

				if (!this["propValueDel"]) {
					this.propValueDel = new lz.Delegate(this, "createComboBox");
				}
				else {
					this.propValueDel.unregisterAll();
				}				
				this._initializingComboBox = true;
				
				//Set values
				this.setValues(this.property.propertyDefinition.getPropertyValues(this.property.o, this.propValueDel));

				//Set currently selected item
				this.selectItem(this.property.value);
				
				if (this.selectedValue == null && this.property.value != null && this.property.value != "") {
					var unlistedValue = this.property.propertyDefinition.getPropertyValue(this.property, null);
					if (unlistedValue == null) {
						unlistedValue = {value:this.property.value, displayName:this.property.value};
					}
					
					this.selectValue(unlistedValue);
				}
				else {
					this.updateSelectedValue();
				}
				this._initializingComboBox = false;
			}
			]]>
		</method>	
		
		<!---
			Update and refresh the wcfComboBox value with a new wcfModelProperty value.
		-->
		<method name="updateValue" args="e=null">
			<![CDATA[
			var value = this.property.value;
			if (this.selectedValue == null || value != this.selectedValue.value) {
				if (value != null && value != "") {
					this.selectItem(value);
					if (this.selectedValue == null) {
						this.selectValue({value:value,displayName:value});
					}
				}
				else {
					this.clearSelection();
				}
			}
			]]>
		</method>
		
		<!---
			Set the wcfModelProperty to represent the wcfComboBox value. This method is called when the combo box
			value is changed.
		-->
		<method name="storeValue">
			<![CDATA[
			if (this.property) {
				var newValue = this["selectedValue"]?this.selectedValue.value:"";
				this.property.change(newValue);
				if(wcfLogger.enabled){
					wcfLogger.log("com.ibm.commerce.lobtools.foundation.view", "INFO", "wcfComboBox", "storeValue", "updates the model property " + this.property.propertyName + " with new value " + newValue + this.property.o.logString());
				}
			}
			]]>
		</method>
		
		<!---
			When the value of the combo box is changed by the business user, storeValue method will be called.
		-->		
		<handler name="onselectedValue">
			<![CDATA[
			if (!this["_initializingComboBox"]) {
				this.storeValue();
			}
			]]>
		</handler>
	</class>
			
	<!---
		@keywords final
		wcfPropertyCombobox is a property editor and is used to create a combo box that binds to a property
		value {@link wcfModelProperty}.  Use wcfPropertyCombobox when implementing a combo box inside a
		{@link wcfPropertyPane} or {@link wcfPropertyGroup}.  The class wcfPropertyCombobox is final, to create
		a new properties widget extend {@link wcfPropertyEditor}.
		
		This combo box widget to be used within a {@link wcfObjectProperties}.  This widget will allow users to select a
		value for the specified property by displaying a list of possible values.  The list of possible values is determined
		by examining the {@link wcfPropertyDefinition} associated with this property.  The possible values are listed as
		{@link wcfPropertyValues} as children under the property definition.
		
		The example	below would create a combo box inside a properties view and add the selectable options from those
		specified in the {@link wcfModelProperty} property definitions values.  The current color selection is then set
		for the combo box from the {@link wcfModelProperty} value.
		
		@START_CODE
			<PropertyCombobox
				propertyName="colorSelector"
				promptText="${resourceBundle.colorSelector}"/>
		@END_CODE
	-->
	<class name="wcfPropertyCombobox" extends="wcfPropertyEditor">
		<!---
			@keywords private
			Create the combo box editor for the given property component. This method overrides the createEditor method in
			the wcfPropertiesComponent class.
			@param wcfPropertiesComponent parentComponent The parent properties component from which to create the editor.
		-->
		<method name="createEditor" args="parentComponent">
			<![CDATA[
			new lz.wcfComboBox(parentComponent, {
				name: "editor",
				x: parentComponent.promptWidth + parentComponent.xspacing,
				property: parentComponent.property,
				enabled: parentComponent.enabled
			});
			]]>
		</method>
	 </class>
	
	<!---
		@keywords final
		A wrapper around {@link wcfBaseComboBox} for use with the {@link wcfObjectGrid}. This grid wrapper will show text as the
		viewer class and the actual {@link wcfComoBox} as the editor class.
		wcfGridComboBox works similar to {@link wcfPropertyCombobox} except it will display a column of
		combo boxes inside of {@link wcfObjectGrid}.
		
		The below example goes inside {@link wcfObjectGrid} tag. It would create a {@link wcfComboBox} column
		that would associate a combo box to the object_color property for each object displayed in the grid.
		
		@START_CODE
        <GridComboBox
            name="color"
            objectPath="ObjectGroup/ObjectGroupDescription"
            propertyName="object_color"
            required="true"
            visible="true"
            editable="true"
            text="${resourceBundle.objectColor}"
            width="100"/>
		@END_CODE
	-->
	<class name="wcfGridComboBox" extends="wcfGridColumn">
		<!---
			@keywords private
			Use "wcfGridComboBoxViewer" to create cell viewer instances.
		-->
		<attribute name="cellViewerClass" value="wcfGridComboBoxViewer"/>
		<!---
			@keywords private
			Use "wcfGridComboBoxEditor" to create cell editor instances.
		-->
		<attribute name="cellEditorClass" value="wcfGridComboBoxEditor"/>
		<!---
			@keywords private
			Use "wcfColumnComboBoxEditor" to create Column Editor editor.
		-->
		<attribute name="columnEditorClass" value="wcfColumnComboBoxEditor"/>
	</class>
	
	<!---
		@keywords final
		Use this class to display a combo box in a grid cell. Use this class instead
		of wcfGridComboBox if you need to display a combo box for some rows and something
		else for other rows.
	-->
	<class name="wcfGridComboBoxCellDescriptor" extends="wcfGridCellDescriptor">
		<!---
			@keywords private
			Use "wcfGridComboBoxViewer" to create cell viewer instances.
		-->
		<attribute name="cellViewerClass" value="wcfGridComboBoxViewer"/>
		<!---
			@keywords private
			Use "wcfGridComboBoxEditor" to create cell editor instances.
		-->
		<attribute name="cellEditorClass" value="wcfGridComboBoxEditor"/>
	</class>

	
	<!---
		@keywords private
		
		Combo box viewer class for internal use by {@link wcfGridComboBox} to display a property status and will be
		displayed while the grid is in view mode.
	-->
	<class name="wcfGridComboBoxViewer" extends="wcfGridTextViewer">
		<!---
			Gets the display value from the properties value and sets it as the text to be displayed in the viewer.
			@param lz.Delegate del An optional delegate to call when a change in property value is caused by the value service.
			@returns string: display value
		-->
		<method name="getDisplayValue" args="del">
			<![CDATA[
			var value = this.property.value;
			var displayValue = "";
			if (this.property.propertyDefinition != null) {
				var propertyValues = this.property.propertyDefinition.getPropertyValues(this.property.o, del);
				for (var i = 0; i < propertyValues.length; i++) {
					var propertyValue = propertyValues[i];
					if (propertyValue.value == value) {
						displayValue = propertyValue.displayName;
						del.register(propertyValue, "ondisplayName");
					}
				}
			}
			
			if(displayValue == "") {
				displayValue = this.property.value;
			}
			return displayValue;
			]]>
		</method>
		
		<!---
			Update and refresh wcfGridComboBoxViewer value with a new {@link wcfModelProperty} value.
		-->
		<method name="updateValue" args="e=null">
			<![CDATA[
			var displayValue = this.getDisplayValue(this.updateValueDel);
			if (this.text != displayValue) {
				this.setAttribute("text", displayValue);
			}
			]]>
		</method>
	</class>
	
	<!---
		@keywords private
		
		Combo box editor class for internal use by wcfGridComboBox to bind a property to the grid combo box and will be
		displayed while the grid is in edit mode. Extends {@link wcfComboBox} to handle transition from edit mode to view
		mode with mouse and key navigation.
	-->
	<class name="wcfGridComboBoxEditor" extends="wcfComboBox" width="${immediateparent.availableWidth}">
	</class>
	
	<!--- 
		@keywords private
		This combobox is used to edit {@link wcfGridComboBox} column
	 -->
	<class name="wcfColumnComboBoxEditor" extends="wcfBaseComboBox">
		<!--- 
			@keywords private
			The column {@link wcfGridComboBox} being edited by {@link wcfColumnComboBoxEditor}
		 -->
		<attribute name="column" value="null"/>
		
		<!--- Selected objects {@link wcfModelObject} in grid -->
		<attribute name="selectedObjects" value="null"/>
		
		<!--- @keywords private -->
		<handler name="oncolumn">
			<![CDATA[
			if (this.column == null) {
				this.setValues(null);
			}
			]]>
		</handler>
		
		<!--- @keywords private -->
		<method name="getValue">
			<![CDATA[
			return this["selectedValue"] ? this.selectedValue.value : "";
			]]>
		</method>
		
		<!--- @keywords private -->
		<method name="resetValue" args="initialValue">
			<![CDATA[
			var o = this.column.getObject(this.selectedObjects[0], null);
			var propertyName = this.column.getPropertyName(this.selectedObjects[0]);
			var property = o.getProperty(propertyName);
			if (property != null && property.propertyDefinition != null) {
				this.setValues(property.propertyDefinition.getPropertyValues(o, null));
			}
			this.selectItem(initialValue);
			]]>
		</method>
	</class>
</library>
