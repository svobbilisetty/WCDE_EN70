<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2007, 2011 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->
<library>

	<!--- @keywords private -->
	<class name="wcfFlowElementSorter" extends="node">
		<!--- @keywords private -->
		<attribute name="sequencePropertyName" type="string" value="sequence"/>

		<!--- @keywords private -->
		<method name="getSortOrder" args="o">
			<![CDATA[
			var sequence = o.getProperty(this.sequencePropertyName);
			if(sequence) {
				return Number(sequence.value);
			}
			else {
				return -1;
			}
			]]>
		</method>

		<!---
			The compare function used to sort the grid. 
			
			@param wcfModelObject o1 The first model object to compare. 
			@param wcfModelObject o2 The second model object to compare. 
			@param boolean sortAscending A boolean indicator of whether the required sort is into ascending order. 
			@return number If sortAscending is true, this method will return 1 when the value of o1 is greater than 
					       the value of o2 and -1 otherwise. If sortAscending is false, the comparison will return 1 if 
					       the value of o1 is less than the value of o2 and -1 otherwise. If the value of o1 is equal to the
					       value of o2, this method will return 0. 
		-->
		<method name="compare" args="o1,o2, sortAscending">
			<![CDATA[
			var result = 0;
			
			var v1 = this.getSortOrder(o1);
			var v2 = this.getSortOrder(o2);

			if (v1 > v2) {
				result = sortAscending ? 1 : -1;
			}
			else if (v1 < v2) {
				result = sortAscending ? -1 : 1;
			}
			
			return result;
			]]>
		</method>
	</class>
	

	<!--- 
		This class provides a basic view for flow path diagram in flow builder.
		@keywords private 
	-->
	<class name="wcfFlowPath" width="${this.PathView.x + this.PathView.width}" height="${Math.max(this.pathInfo.height + 5, this.PathView.height)}" placement="content">
		<!--- @keywords private -->
		<attribute name="objectClass" type="string" value="wcfFlowElement"/>
		<!--- @keywords private -->
		<attribute name="oList" value="null"/>
		
		<!--- @keywords private -->
		<attribute name="o" value="null" setter="this.setModelObject(o)"/>

		<!---
			A reference to the parent wcfFlow that this path is part of.
			@keywords private
		-->
		<attribute name="parentFlow" value="null"/>

		<!--- A reference to the parent wcfFlowElement if there is one. -->
		<attribute name="parentFlowElement" value="null" setter="this.setParentFlowElement(parentFlowElement);"/>
		
		<!--- @keywords private -->
		<attribute name="contextMenuClass" type="string" value="wcfFlowElementContextMenu" />

		<!---
			Numeric value indicating the sequence of this path relative to its sibling paths. If this path is not part
			of a branch element (<code>parentFlowElement</code> is <code>null</code>), this value is <code>null</code>.
			Otherwise, this value is 0 if it's the first path, 1 if it's not the first or the last path (ie: middle path),
			and 2 if it's the last path.

			@keywords private
		-->
		<attribute name="siblingSequence" value="null"/>

		<!---
			Whether or not this path has sibling paths. If so, <code>siblingSequence</code> will not be <code>null</code>.
			@keywords private
		-->
		<attribute name="siblingsExist" type="boolean" value="false"/>
		
		<!--- @keywords private -->
		<attribute name="flowPathFilter" value="null"/>
		
		<!--- @keywords private -->
		<attribute name="flowPathSorter" value="null"/>

		<!---
			Name of this path which comes from the "name" property of the object.
			@keywords private
		-->
		<attribute name="pathName" type="string" value=""/>
		
		<handler name="oninit">
			<![CDATA[
			this.flowPathFilter = new lz.wcfObjectGroupFilter(this, {objectGroup: "FlowElement"});
			this.flowPathSorter = new lz.wcfFlowElementSorter(this);
			this.parentFlow = wcfFlowUtils.getParentFlow(this);
			if(this.parentFlow && this.parentFlow["flowBuilder"]) {
				new lz[this.parentFlow.flowBuilder.flowConnectorClass](this.PathView.FlowConnectorView, {name: "flowconnector"});
			}
			
			if(this["o"]) {
				this.o.bindViewToChildren(this, this.flowPathFilter, null, this.flowPathSorter);
				this.setAttribute("parentFlowElement", wcfFlowUtils.getParentFlowElement(this));
			}
			
			this.contextMenu = new lz[this.contextMenuClass](this, {flowElement: this});
			this.contextMenu.addView(this.pathInfo.icon);
			]]>
		</handler>

		<!--- @keywords private -->
		<method name="destroy">
			<![CDATA[
			if(this["releaseModelObjectDel"]) {
				this.releaseModelObjectDel.unregisterAll();
				delete this.releaseModelObjectDel;
				
				this.sequenceDel.unregisterAll();
				delete this.sequenceDel;
				
				this.pathNameDel.unregisterAll();
				delete this.pathNameDel;
			}

			super.destroy();
			]]>
		</method>

		<!---
			@keywords private
			Set the model object for this tree node to the specified object.
			@param wcfModelObject newObject: the new object
		-->
		<method name="setModelObject" args="newObject">
			<![CDATA[
				if(this["o"]) {
					this.o.releaseViewFromChildren(this);
				}

				if (this["releaseModelObjectDel"]) {
					this.releaseModelObjectDel.unregisterAll();
					this.sequenceDel.unregisterAll();
				}
				else {
					this.releaseModelObjectDel = new lz.Delegate(this, "releaseModelObject");
					this.sequenceDel = new lz.Delegate(this, "updateSequence");
				}
				
				this.o = newObject;
				
				if(this.o) {
					// setup listeners
					this.releaseModelObjectDel.register(this.o, "beingDestroyed");
					var sequenceProp = this.o.getProperty("sequence");
					this.sequenceDel.register(sequenceProp, "onvalue");
					
					this.o.bindViewToChildren(this, this.flowPathFilter, null, this.flowPathSorter);
					this.setAttribute("parentFlowElement", wcfFlowUtils.getParentFlowElement(this));
				}
				
				this.updatePathName();
				this.updatePathIcon();
				this.updateSequence();
			]]>
		</method>

		<!---
			@keywords private
			This method releases the model object from this properties view by setting {@link wcfObjectProperties#o} to null.
		-->
		<method name="releaseModelObject" args="e=null">
			<![CDATA[
			this.setAttribute("o", null);
			]]>
		</method>

		<!---
			This method is called when the sequence of this path changes and notifies
			sibling paths to update themselves.
			@keywords private
		-->
		<method name="updateSequence" args="e=null">
			<![CDATA[
				if(this.o && this.parentFlowElement) {
					if(this.parentFlowElement["oList"]) {
						this.parentFlowElement.oList.refreshFilteredObjects();
					}
					
					this.resetSequence();
					
					// tell all other paths to update their sequence and icons
					var siblingPaths = this.parentFlowElement.getChildren();
					for(var j = 0; j < siblingPaths.length; j++) {
						if(siblingPaths[j] != this) { 
							siblingPaths[j].resetSequence();
						}
					}
				}
			]]>
		</method>

		<!---
			Compares this path with their sibling paths (if applicable), sets the
			<code>siblingSequence</code> attribute and updates the path icon.
			@keywords private
		-->
		<method name="resetSequence">
			<![CDATA[
				if(this.o && this.parentFlowElement) {
					var siblings = wcfFlowUtils.getSortedElements(this.o.parentObject);
					for(var i = 0; i < siblings.length; i++) {
						if(siblings[i] == this.o) {
							if(i == 0) {
								this.setAttribute("siblingSequence", 0);
							}
							else if(i == siblings.length - 1) {
								this.setAttribute("siblingSequence", 2);
							}
							else {
								this.setAttribute("siblingSequence", 1);
							}
						}
					}
					
					var hasSiblings = (siblings.length > 1);
					this.setAttribute("siblingsExist", hasSiblings);
				}
				else {
					this.setAttribute("siblingSequence", null);
					this.setAttribute("siblingsExist", false);
				}

				this.updatePathIcon();
			]]>
		</method>

		<!--- @keywords private -->
		<method name="updatePathName" args="e=null">
			<![CDATA[
				if (this["pathNameDel"]) {
					this.pathNameDel.unregisterAll();
				}
				else {
					this.pathNameDel = new lz.Delegate(this, "updatePathName");
				}
				if(this.o && this.parentFlowElement && this.parentFlowElement["o"]) {
					this.parentFlowElement.o.validate();
					var nameProperty = this.o.getProperty("name");
					var pathName = nameProperty.value;
					this.pathNameDel.register(nameProperty, "onvalue");
					if (nameProperty.propertyDefinition != null) {
						var propertyValue = nameProperty.propertyDefinition.getPropertyValue(nameProperty, this.pathNameDel);
						if (propertyValue != null) {
							pathName = propertyValue.displayName;
							this.pathNameDel.register(propertyValue, "ondisplayName");
						}
					}
					this.setAttribute("pathName", pathName);
				}
			]]>
		</method>

		<!---
			Updates all the path images including the icon and path backgrounds.
			@keywords private
		-->
		<method name="updatePathIcon" args="e=null">
			<![CDATA[
				if(this.o && this.parentFlowElement && this.parentFlowElement["o"]) {
					var parentState = "";
					if(this.parentFlowElement.o.objectType == "branch") {
						parentState = this.parentFlowElement.o.getPropertyValue("state");
					}

					// top path joints are always the same
					if(this.siblingSequence == 0) {
						this.leftJoint.setAttribute('frame', 1);
						this.rightJoint.setAttribute('frame', 1);
					}

					if(parentState == "inactive") {
						if(this.siblingSequence != 0) {
							this.background.setAttribute('frame', 2);
							this.pathInfo.icon.setAttribute('frame', 2);
							this.leftJoint.setAttribute('frame', 3);
							this.rightJoint.setAttribute('frame', 3);
						}
						else {
							this.background.setAttribute('frame', 1);
							this.pathInfo.icon.setAttribute('frame', 1);
						}
						this.leftTopVertical.setAttribute('frame', 2);
						this.leftBottomVertical.setAttribute('frame', 2);
						this.rightTopVertical.setAttribute('frame', 2);
						this.rightBottomVertical.setAttribute('frame', 2);
					} 
					else {
						if(this.siblingSequence != 0) {
							this.leftJoint.setAttribute('frame', 2);
							this.rightJoint.setAttribute('frame', 2);
						}
						this.background.setAttribute('frame', 1);
						this.pathInfo.icon.setAttribute('frame', 1);
						this.leftTopVertical.setAttribute('frame', 1);
						this.leftBottomVertical.setAttribute('frame', 1);
						this.rightTopVertical.setAttribute('frame', 1);
						this.rightBottomVertical.setAttribute('frame', 1);
					}
				}
			]]>
		</method>

		<!---
			Sets the parent flow element on this path and updates the views and widths.
			@keywords private
		-->
		<method name="setParentFlowElement" args="flowElement">
			<![CDATA[
			this.parentFlowElement = flowElement;
			if(this["parentFlowElementDimsDel"]) {
				this.parentFlowElementDimsDel.unregisterAll();
				this.parentFlowElementIconDel.unregisterAll();
			}
			else {
				this.parentFlowElementDimsDel = new lz.Delegate(this, "updatePathDimensions");
				this.parentFlowElementIconDel = new lz.Delegate(this, "updatePathIcon");
			}
			
			if(this.parentFlowElement != null) {
				this.parentFlowElementDimsDel.register(this.parentFlowElement, "onpathWidth");
				this.parentFlowElementDimsDel.register(this.parentFlowElement, "onpathHeight");
				
				if(this.parentFlowElement.o.objectType == "branch") {
					var parentStateProp = this.parentFlowElement.o.getProperty("state");
					this.parentFlowElementIconDel.register(parentStateProp, "onvalue");
				}
			}
			else if(this["PathView"]) {
				this.parentFlowElementDimsDel.register(this.PathView, "onwidth");
			}

			if(this["pathInfo"]) {
				var visible = (this.parentFlowElement != null) ? true : false;
				this.pathInfo.setAttribute("visible", visible);
			}

			this.parentFlowElementDimsDel.register(this, "onheight");

			this.updatePathDimensions();
			]]>
		</method>
		
		<!---
			Updates the width on the path background image.
			@keywords private
		-->
		<method name="updatePathDimensions" args="e=null">
			<![CDATA[
			if(this.parentFlowElement != null) {
				this.background.setAttribute("width", this.parentFlowElement.pathWidth);
			}
			else if(this["PathView"]) {
				this.background.setAttribute("width", this.PathView.width);
			}
			
			if(this["leftBottomVertical"] && this["rightBottomVertical"]) {
				this.leftBottomVertical.setAttribute("height", this.height);
				this.rightBottomVertical.setAttribute("height", this.height);
			}
			]]>
		</method>
		
		<!---
			Determine the placement for this grid.
		-->
		<method name="determinePlacement" args="v,p, a">
			<![CDATA[
			if (p == "content") {
				return this.PathView.FlowElementsView;
			}
			else {
				return super.determinePlacement(v, p, a);
			}
			]]>
		</method>

		<!--- @keywords private -->
		<method name="getChildren">
			<![CDATA[
				var childFlowElements = [];
				
				var childViews = this.PathView.FlowElementsView.subviews;
				for (var i = 0; i < childViews.length; i++) {
					if (childViews[i].visible && childViews[i] instanceof lz.wcfFlowElement) {
						childFlowElements.push(childViews[i]);
					}
				}
				
				return childFlowElements;
			]]>
		</method>

		<!--- @keywords private -->
		<method name="unselectChildren">
			<![CDATA[
				var childFlowElements = this.PathView.FlowElementsView.subviews;
				for (var i = 0; i < childFlowElements.length; i++) {
					var s = childFlowElements[i];
					if (s.visible && s instanceof lz.wcfFlowElement) {
						if (s.selected) {
							s.unselect();
						}
						s.unselectChildren();
					}
				}
			]]>
		</method>
		
		<!--- @keywords private -->
		<method name="getConnectorLeftExpansionSize" args="del=null">
			<![CDATA[
			var expansionSize = 0;
			if (this["pathInfo"]) {
				if (del != null) {
					del.register(this.pathInfo, "onvisible");
				}
				if (this.pathInfo.visible) {
					expansionSize = 70 - this.pathInfo.icon.width;
				}
			}
			return expansionSize;
			]]>
		</method>
		
		<!--- @keywords private -->
		<method name="getConnectorRightExpansionSize" args="del=null">
			<![CDATA[
			var expansionSize = 0;
			if (this["background"] && this["PathView"]) {
				if (del != null) {
					del.register(this.background, "onwidth");
					del.register(this.PathView, "onx");
					del.register(this.PathView, "onwidth");
				}
				expansionSize = this.background.width - this.PathView.width - this.PathView.x - 3;
				if (expansionSize < 0) {
					expansionSize = 0;
				}
			}
			return expansionSize;
			]]>
		</method>
		
		<view name="topDropZone" width="${parent.background.width}" height="${parent.background.y}">
			<wcfDropTarget targetKey="${'flowpath'}" dragAndDropManager="${wcfDndManager}" dropMouseOverBGColor="0xEEEEEE">
				<method name="isEnabled" args="currentDragSource">
					<![CDATA[
					if(currentDragSource[0]["flowPathObject"]) {
						return (classroot.siblingSequence != null) && (currentDragSource[0].flowPathObject != classroot);
					}
					else {
						return false;
					}
					]]>
				</method>
				<handler name="ondroppedintarget" args="sources">
					<![CDATA[
						if(sources[0]["flowPathObject"] && classroot.parentFlowElement != null) {
							var insertSequence = wcfFlowUtils.getNextSequenceNumber(classroot.parentFlowElement.o, classroot.o);
							var droppedFlowPathObj = sources[0].flowPathObject.o;
							droppedFlowPathObj.setPropertyValue("sequence", "", insertSequence);
						}
					]]>
				</handler>
			</wcfDropTarget>
		</view>
		<view name="bottomDropZone" width="${parent.background.width}" height="${parent.background.y}" y="${parent.background.y + 3}">
			<wcfDropTarget targetKey="${'flowpath'}" dragAndDropManager="${wcfDndManager}" dropMouseOverBGColor="0xEEEEEE">
				<method name="isEnabled" args="currentDragSource">
					<![CDATA[
					if(currentDragSource[0]["flowPathObject"]) {
						return (classroot.siblingSequence == 2) && (currentDragSource[0].flowPathObject != classroot);
					}
					else {
						return false;
					}
					]]>
				</method>
				<handler name="ondroppedintarget" args="sources">
					<![CDATA[
						if(sources[0]["flowPathObject"] && classroot.parentFlowElement != null) {
							var insertSequence = wcfFlowUtils.getNextSequenceNumber(classroot.parentFlowElement.o);
							var droppedFlowPathObj = sources[0].flowPathObject.o;
							droppedFlowPathObj.setPropertyValue("sequence", "", insertSequence);
						}
					]]>
				</handler>
			</wcfDropTarget>
		</view>

		<view name="background" resource="wcfPathHorizontal" stretches="width" y="14">
			<attribute name="dndstretches" type="string" value="width"/>
		</view>
		
		<view name="leftJoint" resource="wcfPathLeftJoint" y="14">
			<attribute name="dndvisible" type="string" value="false"/>
		</view>
		
		<view name="leftTopVertical" height="14" resource="wcfPathVertical" stretches="height"	visible="${parent.pathInfo.visible &amp;&amp; (classroot.siblingSequence != 0)}">
			<attribute name="dndvisible" type="string" value="false"/>
		</view>
		
		<view name="leftBottomVertical" resource="wcfPathVertical" stretches="height" y="16" visible="${parent.pathInfo.visible &amp;&amp; (classroot.siblingSequence != 2) &amp;&amp; classroot.siblingsExist}">
			<attribute name="dndvisible" type="string" value="false"/>
		</view>
		
		<view name="rightJoint" resource="wcfPathRightJoint" y="14" x="${parent.background.width - 3}">
			<attribute name="dndvisible" type="string" value="false"/>
		</view>
		
		<view name="rightTopVertical" height="14" resource="wcfPathVertical" stretches="height" x="${parent.background.width - 3}"	visible="${parent.pathInfo.visible &amp;&amp; (classroot.siblingSequence != 0)}">
			<attribute name="dndvisible" type="string" value="false"/>
		</view>
		
		<view name="rightBottomVertical" resource="wcfPathVertical" stretches="height" y="16" x="${parent.background.width - 3}" visible="${parent.pathInfo.visible &amp;&amp; (classroot.siblingSequence != 2) &amp;&amp; classroot.siblingsExist}">
			<attribute name="dndvisible" type="string" value="false"/>
		</view>
		
		<view name="pathInfo" x="5" y="${16 - Math.round(this.icon.height/2)}">
			<view name="icon" resource="wcfPathIcon"/>
			<view name="container" y="14">
				<simplelayout axis="y" spacing="0"/>
				<text name="pathName" multiline="true" width="115" fontsize="12" visible="${this.text != ''}" text="${this.escapeText(classroot.pathName)}"/>
			</view>
			<wcfDragSource targetKeys="${['flowpath']}" dragAndDropManager="${wcfDndManager}">
				<attribute name="dragObject" value="${classroot}" />
				<attribute name="dragObjectTarget" value="${parent}" />
				<attribute name="flowPathObject" value="${classroot}" />
				<method name="isEnabled">
					<![CDATA[
					var parentFlow = wcfFlowUtils.getParentFlow(classroot);
					if(parentFlow && !parentFlow.editableFlow) {
						return false;
					}
					else {
						return classroot.pathInfo.visible;
					}
					]]>
				</method>
			</wcfDragSource>
		</view>

		<view name="PathView" x="${(parent.pathInfo.visible) ? 115 : 0}" height="${Math.max(FlowElementsView.height, 50)}">
			<simplelayout axis="x" spacing="0" />
			<view name="FlowElementsView">
				<simplelayout axis="x" spacing="0" />
			</view>
			<view name="FlowConnectorView"/>
		</view>
	</class>
	
</library>
