<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2007, 2009 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->
<library>

	<!---
		@keywords private
		
		This class provides helper methods for number formatting based on various number preferences and for currency formating. There is a node
		declared named <CODE>wcfGlobalizationUtil</CODE> that can be used when necessary in the code. 	
		
		The {@link wcfNumberFormatPreference number formats} each specify a <code>decimalSeparator</code> and the and a <code>thousandsSeparator</code>.
		The <code>decimalSeparator</code> is a character that will be used to mark the boundary between the integral and the fractional parts of a number in CMC. 
		The <code>thousandsSeparator</code> is a character that will be used to separate between groups of three digits in the integral part of a number in CMC.
	-->
	<node id="wcfGlobalizationUtil">		
		<!-- 	
			The decimal separator to use for formatting the number. It is a character that will be used to mark the boundary
			between the integral and the fractional parts of the number.  This value is determined based on the 
			{@link wcfNumberFormatPreference number format preference} chosen by the user.
			The default value is ".".
		-->
		<attribute name="decimalSeparator" value="." type="string"/>
		<!-- 	
			The thousands separator to use for formatting the number. It is a character that will be used to separate between 
			groups of three digits in the integral part of the number.  This value is determined based on the 
			{@link wcfNumberFormatPreference number format preference} chosen by the user.
			The default value is ",".
		-->
		<attribute name="thousandsSeparator" value="," type="string"/>
		<!-- 
			@keywords private
			This map stores the mapping between the currency code and the number of decimal places for that currency.
		 -->
		<attribute name="CURRENCY_DECIMALS_MAP" value="${[]}"/>	
		<method name="init">
			<![CDATA[
				super.init();
				this.CURRENCY_DECIMALS_MAP = {
					'ALL':2, 'DZD':2, 'ARS':2, 'AUD':2, 'EUR':2, 'BHD':2, 'BYR':2, 'BOB':2, 'BAM':2, 'BRL':2, 'BGN':2, 'CAD':2, 'CLP':2, 'CNY':2, 'COP':2, 'CRC':2, 'HRK':2, 'CZK':2, 'DKK':2, 'DOP':2, 'USD':2, 'EGP':2, 'SVC':2, 'EEK':2, 'GTQ':2, 'HNL':2, 'HKD':2, 'HUF':2, 'ISK':2, 'INR':2, 'IDR':2, 'ILS':2, 'JPY':0, 'JOD':2, 'KZT':2, 'KRW':0, 'KWD':2, 'LVL':2, 'LBP':2, 'LTL':2, 'MKD':2, 'MYR':2, 'MXN':2, 'MAD':2, 'NZD':2, 'NIO':2, 'NOK':2, 'OMR':2, 'PAB':2, 'BYG':2, 'PEN':2, 'PHP':2, 'PLN':2, 'QAR':2, 'RON':2, 'RUB':2, 'SAR':2, 'RSD':2, 'SGD':2, 'SKK':2, 'SIT':2, 'ZAR':2, 'SEK':2, 'CHF':2, 'SYP':2, 'TWD':2, 'THB':2, 'TND':2, 'TRY':2, 'UAH':2, 'AED':2, 'GBP':2, 'UYU':2, 'VEB':2, 'VEF':2, 'VND':2, 'YER':2, 'MKN':2, 'ROL':2, 'RUR':2
				};				
			]]>		
		</method>
									
		<!---
			This method converts a given number in normalized number format to the formatting specified by the number format preference.
			@param string x: The number to be formatted in normalized (xxxx.yy) format.
			@param number numDecimalPlaces: the number of decimals to pad this number out to. By default, no padding will occur. 
			@param lz.Delegate delegate: a delegate that will be registered so that it is called when the display format changes. 
			@returns string The formatted number, or x if the input number is invalid.
		-->
		<method name="formatNumberToDisplayFormat" args="x, numDecimalPlaces=0, delegate=null">
			<![CDATA[
				var decPlaces;
				if (numDecimalPlaces && numDecimalPlaces != null && numDecimalPlaces > 0) {					
					decPlaces = numDecimalPlaces;
				} else {				
					decPlaces = 0;
				}
				if(typeof(x) != "string") { 
					x = String(x);
				}
							
				//check if this is a number. if it is not, then return the original unformatted number. 
				var isNum = wcfStringUtil.isNumber(x);
				if (!isNum) {
					return x;
				}
				
				// chunk number into whole number and fraction to parse them separately
				var strNum = wcfStringUtil.replace(x, " ", "");
				var wholeNumber = "";
				var fraction = "";

				var decimal = strNum.indexOf(".");
				if(decimal != -1) {
					wholeNumber = strNum.substring(0, decimal);
					fraction = strNum.substring(decimal + 1);
					fraction = fraction == 0 ? "" : fraction;
				}
				else {
					wholeNumber = strNum;
				}
				
				//to hold formatted value
				var separatedNum = "";
				
				//parse out the negative
				var negative = strNum.indexOf("-");
				if (negative != -1) {
					wholeNumber = wholeNumber.substring(negative + 1);						
				}					
				
				// add separator characters
				var cnt = 0;			
				for(var i = wholeNumber.length - 1; i >= 0; i--) {
					if(cnt == 3) {
						separatedNum = thousandsSeparator + separatedNum;
						cnt = 0;
					}
					separatedNum = wholeNumber.charAt(i) + separatedNum;
					cnt++;
				}
				
				//reintroduce the negative
				if (negative != -1) {
					separatedNum = "-"+separatedNum;
				}
				if (delegate != null) {
					delegate.register(this, "ondecimalSeparator");
				}				
				while (fraction.length > 0 && fraction.substring(fraction.length - 1, fraction.length) == '0') {
					fraction = fraction.substring(0, fraction.length - 1);
				}
				fraction = wcfStringUtil.padright(fraction, "0", decPlaces);
					
				if (fraction.toString().length > 0) {				
					return separatedNum + decimalSeparator + fraction;				
				} else {
					return separatedNum;
				}
				
			]]>
		</method>
		
		<!---
			This method converts the specified number from its localized display format to normalized number format. If the number
			is not valid, it will return the input. 
			
			Valid numbers have all of the thousands separators in the correct spot, or no thousands separators at all. There cannot
			  be any characters in the number other than digits, the specified thousand separator and the specified decimal separator. 
			  
			Numbers without a decimal part are valid.
			@param string x The number that is formatted. This means that the number can include the thousands separator, 
				and decimal separator for that number format preference.			
			@returns string The number in the normalized format or x if the input number is invalid
		-->
		<method name="formatNumberToDataFormat" args="x">
			<![CDATA[	
				//First check if the number is a valid format
				
				//Split the number into the section before and after the decimal place
				var strNum = x.toString();
				var wholeNumber = "";
				var fraction = "";

				var decimal = strNum.indexOf(decimalSeparator);
				if(decimal != -1) {
					wholeNumber = strNum.substring(0, decimal);
					fraction = strNum.substring(decimal + 1);	
				}
				else {
					wholeNumber = strNum;
				}
				//parse out the negative
				var negative = strNum.indexOf("-");
				if (negative == 0) {
					wholeNumber = wholeNumber.substring(negative + 1);						
				}		
				
				//Check for non digit characters in the decimal
				var isNum = wcfStringUtil.isNumber(fraction);	
				if (fraction != "" && !isNum) {		
					return x;
				}
				
				//Check for characters that are not thousand seperators and not digits in the whole part
				wholeNumber = wcfStringUtil.replace(wholeNumber, thousandsSeparator, "");
				isNum = wcfStringUtil.isNumber(wholeNumber);
				if (!isNum) {			
					return x;
				}
								
				// Now, know the number is a valid format so convert to string and get rid of spaces
				strNum = wcfStringUtil.replace(strNum, " ", "");
				
				// get rid of separators based on number format preference				
				strNum = wcfStringUtil.replace(strNum, thousandsSeparator, "");
					
				// replace decimal points with periods too (will leave string unchanged if decimalSeparator is a period)
				if (decimalSeparator != ".") {
					strNum = wcfStringUtil.replace(strNum, decimalSeparator, ".");				
				}
				
				// trim trailing zeros and decimal point
				var decimal = strNum.indexOf(".");
				if (decimal != -1) {
					var newLength = strNum.length;
					var lastChar = strNum.charAt(newLength - 1);
					while (lastChar == "0") {
						newLength--;
						lastChar = strNum.charAt(newLength - 1);
					}
					if (lastChar == ".") {
						newLength--;
					}
					strNum = strNum.substr(0, newLength);
				}			
				var numStart = 0;
				var minSize = 1;				
				if (negative == 0) {				
					numStart = 1;
					minSize = 2;
				}
				var decimal = strNum.indexOf(".");
				if (decimal != -1) {
					minSize += strNum.length - decimal;
				}	
			
				while (strNum.length > minSize && strNum.charAt(numStart) == "0") {				 									
					strNum = (negative == 0 ? "-" : "") + strNum.substr(numStart + 1);			
				}
				return strNum;
			]]>
		</method>
		
		<!---
			@keywords private
			This handler will update the number displayed if the user changes their number format preference.
		-->
		<handler name="preferenceChanged" reference="preferenceManager" args="preference">
			<![CDATA[
			//if this event is for the CMCNumberFormat preference
			if (preference == "CMCNumberFormat") {			
				var numberFormat = preferenceManager.getPreference("CMCNumberFormat");	
				numberFormat = wcfStringUtil.replace(numberFormat, "b", " ");				
				this.setAttribute("thousandsSeparator", numberFormat.length > 1 ? numberFormat.charAt(1) : "");
				//It's important to set the decimalSeparator after the thousandsSeparator as this will trigger the update of all of the numeric widgets
				this.setAttribute("decimalSeparator", numberFormat.charAt(0));
			}
			]]>
		</handler>
		
		<!---
			This method gets the number of decimal places for a given currency code. If this currency is not found, it returns null.
			@param string currencyCode The currency code. For example 'USD', 'JPY'.
			@returns number The number of decimal places for the currency code. For example 2 for 'USD', 0 for 'JPY'. The method
				returns null if the currencyCode is not found.
		-->
		<method name="getCurrencyDecimalPlaces" args="currencyCode">
			<![CDATA[
			var decimalPlaces = this.CURRENCY_DECIMALS_MAP[currencyCode];
			if (typeof(decimalPlaces) == "undefined") {
				decimalPlaces = null;
			}
			return decimalPlaces;
			]]>
		</method>
		
		<!---
			This method takes a number and truncates it to the desired number of decimal places with no rounding. For example, if the number
			is 123.4567 and should be truncated to 3 decimal places, the value 123.456 is returned. If the input number has less decimal places
			than the desired length, no truncation nor padding will occur. For example, if the number 123.4 is to be truncated to 2 decimal places,
			123.4 will be returned.
			
			@param string x The number to be formatted in normalized (xxxx.yy) format.
			@param number numDecimalPlaces The number of decimals that the number should be truncated to.
			@returns string The truncated value of <code>x</code> to <code>numDecimalPlaces</code> decimal places. If the input is invalid, the
				original value of <code>x</code> is returned.
		-->
		<method name="truncateDecimals" args="x, numDecimalPlaces">
			<![CDATA[
			var newX = x;
			if((x != undefined) && (numDecimalPlaces != undefined) && wcfStringUtil.isNumber(x.toString()) && wcfStringUtil.isNumber(numDecimalPlaces)) {
				var strNum = x.toString();
				
				var decimal = strNum.indexOf(".");
				if(decimal != -1) {
					// split up number into whole and fractional parts
					var wholeNumber = "";
					var fraction = "";
					wholeNumber = strNum.substring(0, decimal);
					fraction = strNum.substring(decimal + 1);

					// if the fraction is less than the desired number of decimal places, use original value and we're done
					if(fraction.length <= numDecimalPlaces) {
						newX = strNum;
					}
					// otherwise, loop until we have enough digits in place
					else {
						for(var i = 0; i < numDecimalPlaces; i++) {
							if(i == 0) {
								// add decimal back in
								wholeNumber = wholeNumber + ".";
							}
							wholeNumber = wholeNumber + fraction.charAt(i);
						}
						newX = wholeNumber;
					}
				}
				else {
					newX = strNum;
				}
			}

			return newX;
			]]>
		</method>
	</node>

</library>
