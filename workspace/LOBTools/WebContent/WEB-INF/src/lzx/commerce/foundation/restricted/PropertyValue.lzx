<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2007, 2010 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->
<library>
	<!---
		<p>This class defines a selectable value for a property.</p>
		
		<p>You can provide a list of selectable values for a {@link wcfPropertyDefinition property}.  To do this, create a wcfPropertyValue 
		for each selectable value. Widgets like {@link wcfPropertyRadioGroup}, {@link wcfPropertyCheckbox}, or {@link wcfPropertyCombobox}
		use this list of selectable values when displaying the property to the business user.  For example, if a property has wcfPropertyValues
		and this property is displayed using a wcfPropertyCombobox, the Management Center framework displays one option for each value. The 
		user can then select from one of the pre-defined values for that property.</p>
		
		<p>In some cases, you need to display a more user-friendly label to the business user. You might have a property to allow the 
		user to select a period of time where the value must be stored in days.  To the user, you want to display the options: "One year", 
		"One month", and "One week". To do this, you use the <code>displayName</code> attribute to indicate the label to display to the 
		user and the <code>value</code> attribute to specify the number of days. The attribute <code>isDefault</code> may also be specified
		to indicate the default value for the property definition. For example:
		
		@START_CODE
		<PropertyDefinition name="warrantyPeriod">
			<PropertyValue displayName="One year" value="365" isDefault="true"/>
			<PropertyValue displayName="One month" value="30"/>
			<PropertyValue displayName="One week" value="7"/>
		</PropertyDefinition>
		@END_CODE
		
		<p>In this example, the default value is "One year" and if the user selects "One month", the value "30" will be stored in the property.</p>
		
		<p>A single instance of {@link wcfEnablementCondition} can be declared as a child of a property value. If
		the enablement condition evaluates to false for a property value instance, then the property value will not be available.</p>
	-->
	<class name="wcfPropertyValue" extends="node">
		<!---
			The display name for the property value which is shown to the user. This is a required attribute.
		-->
		<attribute name="displayName" type="string"/>
		<!---
			The value that is stored in the model.
		-->
		<attribute name="value" type="string" value="${null}"/>
		<!---
			This attribute contains the name of the resource to be used as an icon for this property value. This value
			is used by {@link wcfGridPropertyImage}.
		-->
		<attribute name="icon" type="string" value="${null}"/>
		<!---
			@keywords private
			Flag that declares whether or not the property value is a dynamic value that was loaded 
			from a service.
		-->
		<attribute name="fromService" type="boolean" value="false"/>
		<!---
			@keywords private
			The values key associated with this property value.  This is the key for the entry in the property values
			map this property value is to be added to.
		-->
		<attribute name="valuesKey" type="string" value="${null}"/>
		<!---
			Indicates that this property value is the default property value. The default value is used as the initial
			property value when a new {@link wcfModelObject object} is created. For each property definition, only one
			property value can have this attribute set to <code>true</code>.
		-->
		<attribute name="isDefault" type="boolean" value="false"/>
		<!---
			@keywords private
			The enablement condition for this property value.
		-->
		<attribute name="enablementCondition" value="${null}"/>
		
		<!--- 
			@keywords private
		-->
		<method name="init">
			<![CDATA[
			if (this.value != null) {
				this.initializePropertyValue(null);
			}
			super.init();
			]]>
		</method>
		
		<!--- 
			@keywords private
			Initializes this property value for the given arguments and adds itself
			to the appropriate array in the parent property definition's map using the values key.
		-->
		<method name="initializePropertyValue" args="args">
			<![CDATA[
			if (args) {
				for (var attr in args) {
					this[attr] = args[attr];
				}
			}
			var values = parent["propertyValues"];
			if (!values) {
				values = {};
				parent.propertyValues = values;
			}
			var key = this.fromService?valuesKey:parent.BASE_VALUES_KEY;
			var valuesArray = values[key];
			if (!valuesArray) {
				valuesArray = [];
				values[key] = valuesArray;
			}
			valuesArray.push(this);
			]]>
		</method>
		
		<!--- 
			@keywords private
			Resets the attributes.
		-->
		<method name="release">
			<![CDATA[
			this.displayName = "";
			this.value = null;
			this.icon = null;
			this.fromService = false;
			this.valuesKey = null;
			this.isDefault = false;
			]]>
		</method>

		<!---
			@keywords private
			Returns the display name of the property value.
			@param lz.Delegate del optional, if passed to this method it will register the delegate to the "ondisplayName" event of the property value.
		-->
		<method name="getDisplayName" args="del">
			<![CDATA[
			if (del) { 
				del.register(this, "ondisplayName"); 
			}
			return this.displayName;
			]]>
		</method>
	</class>
	
	<!---
		@keywords private
		
		This class defines a selectable value for a property. The possible value for this property are derived from the 
		{@link wcfObjectTemplate#displayName displayName} of the template associated the property value.
	-->
	<class name="wcfTemplatePropertyValue" extends="wcfPropertyValue" displayName="${this.objectTemplate.displayName}">
		<!---
			@keywords private
			The object template associated with the object definition.
		-->
		<attribute name="objectTemplate"/>
		<!---
			@keywords private
			The description for the template object.
		-->
		<attribute name="description" value="${this.objectTemplate.description}"/>
	</class>
</library>
