<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2007, 2011 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->
<library>
	<!--- @keywords private -->
	<class name="wcfDaysSelectCell" extends="basecomponent" focusable="false">
		<attribute name="selector" value="null"/>
		<attribute name="labelText" type="string" value=""/>
		
		<simplelayout axis="x" spacing="1"/>
		<wcfBaseCheckbox name="input" enabled="${classroot.selector.enabled}">
			<handler name="onvalue"><![CDATA[
				if (classroot['selector']) {
					classroot.selector.setDaysValue();
				}
				]]>
			</handler>
		</wcfBaseCheckbox>
		<text name="label" y="${(parent.height - this.height) / 2}" fgcolor="${classroot.style.formlabeltextcolor}" text="${classroot.labelText}"/>
	</class>
	
	<!--- @keywords private -->
	<class name="wcfBaseDaysSelect" extends="basevaluecomponent" focusable="false">

		<attribute name="_valuesInited" type="boolean" value="false"/>
		
		<handler name="onvalue">
			<![CDATA[
			if (this["days"]) {
				this.initDaysOfTheWeek();
			}
			]]>
		</handler>
		
		<method name="initDaysOfTheWeek">
			<![CDATA[
			this._valuesInited = false;
			this.days.SUN.input.setValue(this.value.indexOf("U") >= 0);
			this.days.MON.input.setValue(this.value.indexOf("M") >= 0);
			this.days.TUE.input.setValue(this.value.indexOf("T") >= 0);
			this.days.WED.input.setValue(this.value.indexOf("W") >= 0);
			this.days.THU.input.setValue(this.value.indexOf("R") >= 0);
			this.days.FRI.input.setValue(this.value.indexOf("F") >= 0);
			this.days.SAT.input.setValue(this.value.indexOf("S") >= 0);
			this._valuesInited = true;
			]]>
		</method>
		
		<method name="setDaysValue">
			<![CDATA[
			if (this["days"] && this.days._daysInited && this._valuesInited) {
				var newValue =	
					(this.days.MON.input.value ? "M" : "") +
					(this.days.TUE.input.value ? "T" : "") +
					(this.days.WED.input.value ? "W" : "") +
					(this.days.THU.input.value ? "R" : "") +
					(this.days.FRI.input.value ? "F" : "") +
					(this.days.SAT.input.value ? "S" : "") +
					(this.days.SUN.input.value ? "U" : "");
				this.setAttribute("value", newValue);
			}
			]]>
		</method>
		 
		<view name="days">
			<attribute name="_daysInited" type="boolean" value="false"/>
		
			<handler name="oninit">
				this._daysInited = true;
				classroot.initDaysOfTheWeek();
			</handler>
					
			<simplelayout axis="x" spacing="5">
				<method name="update" args="e=null">
					<![CDATA[
					if(!this["prefDel"]) {
						this.prefDel = new lz.Delegate(this, "update");
						this.prefDel.register(preferenceManager, "preferenceChanged");
					}
					
					var firstDay = preferenceManager.getPreference("CMCFirstDayOfWeek");
					if(!this.locked && firstDay != null && firstDay != ""){
						this.lock();
						var length = this.subviews.length-1;
						while(this.subviews[0].name != firstDay) {
							// shift the subviews to reflect first day of week preference
							this.setLayoutOrder('first',this.subviews[length]);
						}
					 	this.locked = false;
					 }
					super.update();
					]]>
				</method>
			</simplelayout>
			
			<wcfDaysSelectCell name="SUN" selector="${classroot}" labelText="${foundationResources.sunday.string}"/>
			<wcfDaysSelectCell name="MON" selector="${classroot}" labelText="${foundationResources.monday.string}"/>
			<wcfDaysSelectCell name="TUE" selector="${classroot}" labelText="${foundationResources.tuesday.string}"/>
			<wcfDaysSelectCell name="WED" selector="${classroot}" labelText="${foundationResources.wednesday.string}"/>
			<wcfDaysSelectCell name="THU" selector="${classroot}" labelText="${foundationResources.thursday.string}"/>
			<wcfDaysSelectCell name="FRI" selector="${classroot}" labelText="${foundationResources.friday.string}"/>
			<wcfDaysSelectCell name="SAT" selector="${classroot}" labelText="${foundationResources.saturday.string}"/>
		</view>
		
	</class>
	
	<!--- @keywords private -->
	<class name="wcfDaysSelect" extends="wcfBaseDaysSelect">
	
		<attribute name="property" value="null" setter="setProperty(property)"/>
			
		<method name="destroy">
			<![CDATA[
			if (this["updateValueDel"]) {
				this.updateValueDel.unregisterAll();
				delete this.updateValueDel;
			}
			super.destroy();
			]]>
		</method>

		<method name="setProperty" args="newProperty">
			<![CDATA[
			if (newProperty != this["property"]) {
				if (typeof(this.updateValueDel) == "undefined") {
					this.updateValueDel = new lz.Delegate(this, "updateValue");
				}
				this.updateValueDel.unregisterAll();
				this.property = newProperty;
				if (this.property) {
					this.updateValueDel.register(this.property, "onvalue");
					this.updateValue();
				}
				else {
					this.setAttribute("value", "");
				}
			}
			]]>
		</method>

		<!---
			Update the widget with a new property value.
		-->
		<method name="updateValue" args="e=null">
			<![CDATA[
			var value = this.property.value;
			if (value != this.value) {
				this.setAttribute("value", value);
			}
			]]>
		</method>
		
		<!---
			Store the property value.
		-->
		<method name="storeValue">
			<![CDATA[
			if (this.property) {
				this.property.change(this.value);
				if(wcfLogger.enabled){
					wcfLogger.log("com.ibm.commerce.lobtools.foundation.view", "INFO", "wcfDaysSelect", "storeValue", "updates the model property " + this.property.propertyName + " with new value " + this.value + this.property.o.logString());
				}
			}
			]]>
		</method>
		
		<handler name="onvalue">
			this.storeValue();
		</handler>

	 </class>
	
	<!--- @keywords private -->
	<class name="wcfChildObjectDaysSelect" extends="wcfBaseDaysSelect">
		
		<!--- Reference to wcfModelObject that is the parent of the object being created and deleted. -->
		<attribute name="o" value="null" setter="setModelObject(o)"/>
		
		<attribute name="sundayObjectType"/>
		
		<attribute name="mondayObjectType"/>
		
		<attribute name="tuesdayObjectType"/>
		
		<attribute name="wednesdayObjectType"/>
		
		<attribute name="thursdayObjectType"/>
		
		<attribute name="fridayObjectType"/>
		
		<attribute name="saturdayObjectType"/>
		
		<method name="destroy">
			<![CDATA[
			if (this["updateValueDel"]) {
				this.updateValueDel.unregisterAll();
				delete this.updateValueDel;
			}
			super.destroy();
			]]>
		</method>

		<!---
			Set the parent {@link wcfModelObject}.
			@param wcfModelObject newObject: New parent object
		-->
		<method name="setModelObject" args="newObject">
			<![CDATA[
			if (typeof(this["o"]) == "undefined" || newObject != this["o"]) {
				if (typeof(this.updateValueDel) == "undefined") {
					this.updateValueDel = new lz.Delegate(this, "updateValue");
				}
				this.updateValueDel.unregisterAll();
				this.o = newObject;
				if (this.o) {
					this.updateValueDel.register(this.o, "onchildObjects");
					this.updateValue();
				}
			}
			]]>
		</method>
		
		<method name="updateChildObject" args="objectType, dayValue">
			<![CDATA[
			if (this.o) {
				if (dayValue) {
					var childObject = this.o.getObject(objectType, true);
					if(childObject.implicitNewObject) {
						childObject.setAttribute("implicitNewObject", false);
						childObject.openGroupObject.checkUnsavedChanges();
					}
				}
				else {
					var childObject = this.o.getObject(objectType);
					if (childObject != null) {
						childObject.deleteObject();
					}
				}
			}
			]]>
		</method>
		
		<!---
			Update the widget with a new property value.
		-->
		<method name="updateValue" args="e=null">
			<![CDATA[
			var value="";
			if (this["o"]) {
				if (this.o) {
					value =
						(this.o.getObject(this.mondayObjectType) != null ? "M" : "") +
						(this.o.getObject(this.tuesdayObjectType) != null ? "T" : "") +
						(this.o.getObject(this.wednesdayObjectType) != null ? "W" : "") +
						(this.o.getObject(this.thursdayObjectType) != null ? "R" : "") +
						(this.o.getObject(this.fridayObjectType) != null ? "F" : "") +
						(this.o.getObject(this.saturdayObjectType) != null ? "S" : "") +
						(this.o.getObject(this.sundayObjectType) != null ? "U" : "");
				}
				if (value != this.value) {
					this.__updateValueLock = true;
					this.setAttribute("value", value);
					this.__updateValueLock = false;
				}
			}
			]]>
		</method>
		
		<!---
			Create or delete the child model objects based on the current value of the wcfBaseDaysSelect widget.
		-->
		<method name="storeValue">
			<![CDATA[
			if (this["o"]) {
				this.updateChildObject(this.mondayObjectType, this.value.indexOf("M") >= 0);
				this.updateChildObject(this.tuesdayObjectType, this.value.indexOf("T") >= 0);
				this.updateChildObject(this.wednesdayObjectType, this.value.indexOf("W") >= 0);
				this.updateChildObject(this.thursdayObjectType, this.value.indexOf("R") >= 0);
				this.updateChildObject(this.fridayObjectType, this.value.indexOf("F") >= 0);
				this.updateChildObject(this.saturdayObjectType, this.value.indexOf("S") >= 0);
				this.updateChildObject(this.sundayObjectType, this.value.indexOf("U") >= 0);
			}
			]]>
		</method>
		
		<handler name="onvalue">
			<![CDATA[
			if (!this["__updateValueLock"]) {
				this.storeValue();
			}
			]]>
		</handler>
		
	</class>
	 
		 
	<!--- 
		@keywords final
		A day selector for use within an object properties panel. It allows a user to 
		select a day in a week as the value of a specified property. The following examples declares an instance
		of this class for the property with name "daysProperty". 
		
		@START_CODE
			<PropertyDaysSelect promptText="Days Selector" propertyName="daysProperty"/>
		@END_CODE
	-->
	<class name="wcfPropertyDaysSelect" extends="wcfPropertyEditor">
		
		<!--- 
			When displayTimeZone value is true, the server time zone is shown after the property components prompt text.  Defaulted to true.
		-->
		<attribute name="displayTimeZone" type="boolean" value="true"/>
		<!---
			@keywords private
			Create the editor for the given property component
			@param wcfPropertiesComponent parentComponent The parent properties component from which to create the editor
		-->
		<method name="createEditor" args="parentComponent">
			<![CDATA[
			new lz.wcfDaysSelect(parentComponent, {
				name: "editor",
				x: parentComponent.promptWidth + parentComponent.xspacing,
				property: parentComponent.property,
				enabled: parentComponent.enabled
				});
			]]>
		</method>
		
		<!---
			@keywords private
			Adds server time zone after the prompt text
		-->
		<method name="updateNewPromptText" args="e=null">
			<![CDATA[
			super.updateNewPromptText();
			if(this.displayTimeZone){
				var contextValue = wcfContextUtil.findContextValue(null, "serverTimeZoneDisplayName", this.updateNewPromptTextDel);
				this.setAttribute("newPrompt",(this["newPrompt"])? this.newPrompt+"\n("+contextValue.value+")" : "");
			}
			]]>
		</method>

	</class>
	
	<!--- 
		@keywords final
		<p>A child object check boxes day selector for use within a properties view. It allows a user to select days in a week.</p>
		 
		<p>When the user selects a day in the week, an instance of the specified child object is created. 
		When a business user clears the check box, the specified child object is deleted</p>
		
		<p>The following example demonstrates the declaration of the day selector that will create
		and delete child objects with object type "WeekDay". The child object will have a property named
		"day".
		
		@START_CODE
			<PropertyChildObjectDaysSelect
					objectType="WeekDay" propertyName="day"/>
		@END_CODE
	-->
	<class name="wcfPropertyChildObjectDaysSelect" extends="wcfPropertiesComponent">
		
		<!--- The object type of the object to be created.  -->
		<attribute name="objectType" value="" type="string"/>
		
		<!--- The name of the property that will be set to the value representing the day of the week. -->
		<attribute name="propertyName" value="day" type="string"/>
		
		<!--- The Sunday value of the object property. -->
		<attribute name="sundayValue" type="string" value="Sunday"/>
		
		<!--- The Monday value of the object property. -->
		<attribute name="mondayValue" type="string" value="Monday"/>
		
		<!--- The Tuesday value of the object property. -->
		<attribute name="tuesdayValue" type="string" value="Tuesday"/>
		
		<!--- The Wednesday value of the object property. -->
		<attribute name="wednesdayValue" type="string" value="Wednesday"/>
		
		<!--- The Thursday value of the object property. -->
		<attribute name="thursdayValue" type="string" value="Thursday"/>
		
		<!--- The Friday value of the object property. -->
		<attribute name="fridayValue" type="string" value="Friday"/>
		
		<!--- The Saturday value of the object property. -->
		<attribute name="saturdayValue" type="string" value="Saturday"/>
		
		<!--- 
			When displayTimeZone value is true, the server time zone is shown after the property components prompt text.  Defaulted to true.
		-->
		<attribute name="displayTimeZone" type="boolean" value="true"/>
		<!---
			@keywords private
			Create the editor for the given property component
			@param wcfPropertiesComponent parentComponent The parent properties component from which to create the editor
		-->
		<method name="createEditor" args="parentComponent">
			<![CDATA[
			new lz.wcfChildObjectDaysSelect(parentComponent, {
				name: "editor",
				x: parentComponent.promptWidth + parentComponent.xspacing,
				o: parentComponent.o,
				enabled: parentComponent.enabled,
				sundayObjectType: this.objectType + "[" + this.propertyName + "=" + this.sundayValue + "]",
				mondayObjectType: this.objectType + "[" + this.propertyName + "=" + this.mondayValue + "]",
				tuesdayObjectType: this.objectType + "[" + this.propertyName + "=" + this.tuesdayValue + "]",
				wednesdayObjectType: this.objectType + "[" + this.propertyName + "=" + this.wednesdayValue + "]",
				thursdayObjectType: this.objectType + "[" + this.propertyName + "=" + this.thursdayValue + "]",
				fridayObjectType: this.objectType + "[" + this.propertyName + "=" + this.fridayValue + "]",
				saturdayObjectType: this.objectType + "[" + this.propertyName + "=" + this.saturdayValue + "]"	});
			]]>
		</method>
		
		<!---
			@keywords private
			Adds server time zone after the prompt text
		-->
		<method name="updateNewPromptText" args="e=null">
			<![CDATA[
			super.updateNewPromptText();
			if(this.displayTimeZone){
				var contextValue = wcfContextUtil.findContextValue(null, "serverTimeZoneDisplayName", this.updateNewPromptTextDel);
				this.setAttribute("newPrompt",(this["newPrompt"])? this.newPrompt+"\n("+contextValue.value+")" : "");
			}
			]]>
		</method>

	</class>

</library>
