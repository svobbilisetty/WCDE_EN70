<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2007, 2011 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->
<library>
	<!--- @keywords private -->
	<class name="wcfBaseDragSource" extends="node">
		<!--- the object that is dragged  -->
		<attribute name="dragObject" value="null" />
		<!--- The drag source parent. This can be used by the drop target to prevent dropping
				a source object onto the same parent from which it was dragged. -->
		<attribute name="dragParent" value="null" />
		<!---
			@keywords private
		-->	
		<method name="getDragableView" args="dragger">
			<![CDATA[
				return wcfDragAndDropManagerUtils.cloneView(this.dragObject, dragger, 0, 0);
			]]>
		</method>
		
	</class>

	<!--- @keywords private -->
	<class name="wcfDragSource" extends="wcfBaseDragSource">
		<!--- the object target that is dragged  -->
		<attribute name="dragObjectTarget" value="null" />
		<!--- the drop target keys, used to determine which drop targets this source can be dropped on -->
		<attribute name="targetKeys" value="${[]}" />
		<!--- the drag and drop manager this drag source is associated with -->
		<attribute name="dragAndDropManager" value="null" />
		<!--- Whether this drag source is enabled -->
		<attribute name="enabled" value="true" type="boolean"/>
		
		<handler name="oninit">
			if (this.dragObject == null) {
				this.dragObject = this.immediateparent;
			}
			if (this.dragObjectTarget == null) {
				this.dragObjectTarget = this.dragObject;
			}
			this.dragAndDropManager.registerDragSource(this);
			//Debug.write("registered drag source:"+this.identifier);
			
			this.startDragDel = new lz.Delegate(this, "startDrag");
			this.addSubViewDel = new lz.Delegate(this, "registerOnMouseDown");

			this.dragObjectTarget.setAttribute('clickable', true);
			registerOnMouseDown(this.dragObjectTarget);
		</handler>

	    <method name="registerOnMouseDown" args="pView">
	    	<![CDATA[
				this.startDragDel.register(pView, "onmousedown");			
				this.addSubViewDel.register(pView, "onaddsubview");

				if(pView.subviews) {
					for (var i=0; i < pView.subviews.length; i++) {
						registerOnMouseDown(pView.subviews[i]);
					}
				}
			]]>
	    </method>

		<method name="isEnabled">
			<![CDATA[
			return this.enabled;
			]]>
		</method>
	    
	    <method name="startDrag" args="e=null">
	    	if (this.isEnabled()) {
				this.dragAndDropManager.startDrag(this, canvas.getMouse("x"), canvas.getMouse("y"));
			}
	    </method>
	    
	    <method name="stopDrag" args="e=null"/>
	    
	    <method name="destroy">
			if (this["startDragDel"]) {
				this.startDragDel.unregisterAll();
				delete this.startDragDel;
			}

			if (this["addSubViewDel"]) {
				this.addSubViewDel.unregisterAll();
				delete this.addSubViewDel;
			}
	    	    
			//Debug.write("about to unregister drag source:"+this.identifier);
			if (this.dragAndDropManager != null) {
				this.dragAndDropManager.unregisterDragSource(this);
			}
			super.destroy();
	    </method>
	    
		<!---
			Returns the drag source objects to be dragged
		-->	
	    <method name="getDragSources">
	    	<![CDATA[
				var dragSources = new Array();
				dragSources.push(this);
				
				return dragSources;
           ]]>
	    </method>
		
	</class>

	<!--- @keywords private -->
	<class name="wcfDropTarget" extends="node">
		<!--- the object where it's dropped  -->
		<attribute name="dropObject" value="null"/>
		<!--- the drop target key  -->
		<attribute name="targetKey" value="null"/>
		<!--- the drag and drop manager this drop target is associated with -->
		<attribute name="dragAndDropManager" value="null" />    	
		
		<!--- drop target bg color  -->		
    	<attribute name="originalBGColor" value="null"/>
		<!--- the bgcolor when an appropriate item is dragged over a view  -->		
    	<attribute name="dropMouseOverBGColor" value="0xCCCCCC"/>
		<!--- true if the target is enabled as a drop target, false if it's been disabled  -->		
    	<attribute name="enabled" value="true" type="boolean"/>
    	<!--- true if this target has been checked for enablement -->
    	<attribute name="enablementChecked" value="false" type="boolean"/>

		<!--- this event is fired for this class when drag sources have been dropped in this target  -->				
    	<event name="ondroppedintarget"/>
	
		<handler name="oninit">
			if (this.dropObject == null) {
				this.dropObject = this.immediateparent;
			}
			dragAndDropManager.registerDropTarget(this);
			
			this.trackMouseOverDel = new lz.Delegate(this, "sourceDraggedIn");
			this.trackMouseOutDel = new lz.Delegate(this, "sourceDraggedOut");
			this.trackMouseUpDel = new lz.Delegate(this, "sourceDroppedIn");
		</handler>

	    <method name="destroy">
	    	<![CDATA[
				//Debug.write("about to unregister drop target:"+this.identifier);
				dragAndDropManager.unregisterDropTarget(this);

				if (this.trackMouseOverDel) {
					this.trackMouseOverDel.unregisterAll();
					delete this.trackMouseOverDel;
				}
				
				if (this.trackMouseOutDel) {
					this.trackMouseOutDel.unregisterAll();
					delete this.trackMouseOutDel;
				}
				
				if (this.trackMouseUpDel) {
					this.trackMouseUpDel.unregisterAll();
					delete this.trackMouseUpDel;
				}
				
				super.destroy();
		    ]]>
	    </method>
	    
		<!---
			Dragging has started for drop targets with this targets target key
		-->		    	
    	<method name="registerDropTarget"> 
    		this._trackingRegistered = true;
    		this.enablementChecked = false;
			lz.Track.register(this.dropObject, "wcfDndManagerTrack");

			this.trackMouseOverDel.register(this.dropObject, "onmousetrackover");
			this.trackMouseOutDel.register(this.dropObject, "onmousetrackout");    
			this.trackMouseUpDel.register(this.dropObject, "onmousetrackup");
    	</method>

		<!---
			Dragging has stopped
		-->		    			
    	<method name="unregisterDropTarget"> 
    		if (this["_trackingRegistered"]) {
    			this._trackingRegistred = false;
    			this.enablementChecked = false;
				lz.Track.unregister(this.dropObject, "wcfDndManagerTrack");
				
				this.trackMouseOverDel.unregisterAll();
				this.trackMouseOutDel.unregisterAll();
				this.trackMouseUpDel.unregisterAll();
			}
    	</method>

		<!---
			A source object is dragged over the drag object
		-->		    			
    	<method name="isEnabled" args="currentDragSource">    		
    		return this.enabled;
    	</method>
    	
		<!---
			A source object is dragged over the drag object
		-->		    			
		<method name="sourceDraggedIn" args="e=null">
			<![CDATA[
			var enabled = true;
			if (!this.enablementChecked) {
				this.enablementChecked = true;
				enabled = this.isEnabled(this.dragAndDropManager.currentDragSource.getDragSources());
			}
			if (enabled) {
				this.originalBGColor = this.dropObject.bgcolor;
				this.dropObject.setAttribute('bgcolor', this.dropMouseOverBGColor);
				lz.Cursor.restoreCursor();
			}
			else {
				this.unregisterDropTarget();
			}
			]]>            	
		</method>
    	
		<!---
			A source object is dragged out of the drag object
		-->		    			
    	<method name="sourceDraggedOut" args="e=null"> 
    		lz.Cursor.setCursorGlobal('cursorNoDrop');	
            this.dropObject.setAttribute('bgcolor', this.originalBGColor);
			this.dropObject.bgcolor = this.originalBGColor;
    	</method>
		
		<method name="sourceDroppedIn" args="e=null">
			<![CDATA[
	            this.sourceDraggedOut();
	            lz.Cursor.restoreCursor();
				this.dragAndDropManager.droppedInTarget(this);
			]]>
		</method>

	</class>
	
	<!--- @keywords private -->
	<class name="wcfTrackingDropTarget" extends="wcfDropTarget" targetKey="${'TRACKING_DROP_TARGET'}">
		<!---
			A source object is dragged over the drag object
		-->		    			
    	<method name="sourceDraggedIn" args="e=null"/> 
		<!---
			A source object is dragged out of the drag object
		-->		    			
    	<method name="sourceDraggedOut" args="e=null"/>
	</class>

	<!--- @keywords private -->
	<class name="wcfDragAndDropManager" extends="node">
		<!-- An index to determine the next identifier to set on a drag source/drop target -->
		<attribute name="nextIdentifier" value="0" type="number"/>
		<!-- An array of the drag source objects -->
		<attribute name="dragSources" value="${[]}"/>
		<!--- An array of the drop target objects -->
		<attribute name="dropTargets" value="${[]}"/>
		<!--- The currently dragged drag source	-->
		<attribute name="currentDragSource" value="null"/>
		<!--- The currently dragged drag source	starting x position -->		
		<attribute name="startDragX" value="null"/>
		<!--- The currently dragged drag source	starting y position -->		
		<attribute name="startDragY" value="null"/>
		<!--- True if the currently dragged drag source is being dragged -->	
		<attribute name="dragging" type="boolean" value="false" />
		<!--- The view that drags.  This view clones the visual aspects of the drag sources views. -->	
		<attribute name="dragger" value="null" />
		
		<handler name="oninit">
			<![CDATA[
				this.stopDragDel = new lz.Delegate(this, "stopDrag");
				this.stopDragDel.register(lz.GlobalMouse, "onmouseup");
				
				this.trackMouseDel = new lz.Delegate(this, "trackMouse");
			]]>
		</handler>
		
	    <method name="destroy">
	    	<![CDATA[
				if (this.stopDragDel) {
					this.stopDragDel.unregisterAll();
					delete this.stopDragDel;
				}
				if (this.trackMouseDel) {
					this.trackMouseDel.unregisterAll();
					delete this.trackMouseDel;
				}
				
				if (this.dragger != null) {
					this.dragger.destroy();
				}
				
				super.destroy();
		    ]]>
	    </method>

		<!---
			Generates the next unique id
		-->		
	    <method name="idGen">
	    	<![CDATA[
	 		   	this.nextIdentifier++;
				return this.nextIdentifier;
		    ]]>
	    </method>
		
		<!---
			Register a drag source
			@param dragSource : the drag source
		-->
		<method name="registerDragSource" args="dragSource">
			<![CDATA[
				dragSource.identifier = this.idGen();
				dragSources.push(dragSource);
			]]>
		</method>
		
		<!---
			Register a drop target
			@param dropTarget : the drop target
		-->
		<method name="registerDropTarget" args="dropTarget">
			<![CDATA[
				dropTarget.identifier = this.idGen();
				dropTargets.push(dropTarget);
			]]>
		</method>
		
		<!---
			unregisters a drag source
			@param dragSource : the drag source
		-->
		<method name="unregisterDragSource" args="dragSource">
			<![CDATA[
	            for (var i = 0; i < this.dragSources.length; i++) {
	            	if (this.dragSources[i] != null && this.dragSources[i].identifier == dragSource.identifier) {
	            		this.dragSources[i] = null;
	            		this.dragSources.splice(i, 1);
	            		return;
	            	}
	            }
			]]>
		</method>
		
		<!---
			unregisters a drop target
			@param dropTarget : the drop target
		-->
		<method name="unregisterDropTarget" args="dropTarget">
			<![CDATA[
	            for (var i = 0; i < this.dropTargets.length; i++) {
	            	if (this.dropTargets[i] != null && this.dropTargets[i].identifier == dropTarget.identifier) {
	            		this.dropTargets[i] = null;
	            		this.dropTargets.splice(i, 1);
	            		return;
	            	}
	            }
			]]>
		</method>
		
		<!---
			Starts dragging a drag source if one is selected
		-->
        <method name="startDrag" args="dragSource, mouseX, mouseY">
			<![CDATA[				
				this.currentDragSource = dragSource;
				this.startDragX = mouseX;
				this.startDragY = mouseY;
				this.trackMouseDel.register(lz.Idle, "onidle");
            ]]>
        </method>
        
        <!--
			Checks if the given drag source target keys contain the givent target key
		-->
		<method name="containsTargetKey" args="dragSource,targetKey">
			<![CDATA[
				if (dragSource != null && dragSource.targetKeys != null) {
		            for (var i = 0; i < dragSource.targetKeys.length; i++) {
		            	if (dragSource.targetKeys[i] == targetKey) {
			            	return true;
			            }
		            }
		        }
		        
		        return false;
			]]>
		</method>
		
        <!--
			Checks if the given view is visible
		-->
		<method name="isViewVisible" args="v">
			<![CDATA[
				if (v == canvas) {
					return true;
				}
				else if (!v["visible"]) {
					return false;
				}
				else {
			        return this.isViewVisible(v.immediateparent);
			    }
			]]>
		</method>

		<method name="isAncestor" args="parent, child">
			<![CDATA[
				if (parent == child) {
					return true;
				}
				else if (child == canvas) {
					return false;
				}
				else {
					return isAncestor(parent, child.immediateparent);
				}
			]]>
		</method>
		
		<method name="compare" args="o1, o2">
			<![CDATA[
				if (this.isAncestor(o1.dropObject, o2.dropObject)) {
					return -1;
				}
				else if (this.isAncestor(o2.dropObject, o1.dropObject)) {
					return 1;
				}
			
				var commonAncestor = o1.dropObject;
				var o1AncestorChild = null;
				while (!this.isAncestor(commonAncestor, o2.dropObject)) {
					o1AncestorChild = commonAncestor;
					commonAncestor = commonAncestor.immediateparent;
				}
				
				var o2AncestorChild = o2.dropObject;
				
				while (o2AncestorChild.immediateparent != commonAncestor) {
					o2AncestorChild = o2AncestorChild.immediateparent;
				}
				
				var depthList = commonAncestor.getDepthList();
				for (var i = 0; i < depthList.length; i++) {
					if (depthList[i] == o1AncestorChild) {
						return -1;
					}
					else if (depthList[i] == o2AncestorChild) {
						return 1;
					}
				}
				
				return 0;
			]]>
		</method>

		<!---
			Tracks the mouse, detecting movement to begin the dragging.
		-->        
		<method name="trackMouse" args="e=null">
			<![CDATA[
				if (!this.dragging && (this.startDragX != canvas.getMouse('x') || this.startDragY != canvas.getMouse('y'))) {
					lz.Cursor.setCursorGlobal('cursorNoDrop');
					this.trackMouseDel.unregisterAll();
					
					var availableDropTargets = new Array();
		            for (var i = 0; i < this.dropTargets.length; i++) {
		            	if ((this.dropTargets[i].targetKey == "TRACKING_DROP_TARGET" || this.containsTargetKey(this.currentDragSource, this.dropTargets[i].targetKey)) && this.isViewVisible(this.dropTargets[i].dropObject)) {
		            		availableDropTargets.push(this.dropTargets[i]);
			            }
		            }
		            
					var comparator = function (o1,o2) {
						return arguments.callee.dndm.compare(o1, o2);
					}
					comparator.dndm = this;
					availableDropTargets.sort(comparator);
		            		           
		            for (var k = 0; k < availableDropTargets.length; k++) {
	            		availableDropTargets[k].registerDropTarget();
		            }
                   	lz.Track.activate("wcfDndManagerTrack");

					this.dragging = true;
					this.createAndStartDragger();
				}
				else if (this.dragging) {
					this.trackMouseDel.unregisterAll();
				}
			]]>
		</method>
		
		<method name="createAndStartDragger">
			<![CDATA[
				if (this.dragger == null) {
					this.dragger = new lz.wcfDragger(canvas);
				}
			
			    var currentDragSources = this.currentDragSource.getDragSources();
	        	for (var i = 0; i < currentDragSources.length; i++) {
	        		var dx = 0;
	        		var dy = 0;
	        		if (currentDragSources[i].dragObject != null) {
			        	dx = currentDragSources[i].dragObject.getAttributeRelative("x", this.currentDragSource.dragObject) - this.currentDragSource.dragObject.getAttributeRelative("x", this.currentDragSource.dragObject);
			        	dy = currentDragSources[i].dragObject.getAttributeRelative("y", this.currentDragSource.dragObject) - this.currentDragSource.dragObject.getAttributeRelative("y", this.currentDragSource.dragObject);

						var newView = currentDragSources[i].getDragableView(this.dragger);
						if (newView != null) {
							newView.setAttribute("x", newView.x + dx);
							newView.setAttribute("y", newView.y + dy);
							newView.setAttribute('opacity', 0.5);
						}
					}
		        }
	            this.dragger.deltaX = this.startDragX - this.currentDragSource.dragObject.getAttributeRelative("x", canvas);
	            this.dragger.deltaY = this.startDragY - this.currentDragSource.dragObject.getAttributeRelative("y", canvas);

	            this.dragger.startDragging();
			]]>
		</method>
		
		<!---
			Stops dragging the current drag source
		-->
        <method name="stopDrag" args="e=null">
			<![CDATA[
				this.trackMouseDel.unregisterAll();
				if (!this.dragging) {
					return;
				}
				lz.Cursor.restoreCursor(); 
				
				this.dragging = false;
								
				this.currentDragSource.stopDrag();
				
	            for (var i = 0; i < this.dropTargets.length; i++) {
	            	this.dropTargets[i].unregisterDropTarget();
	            }
			
	            this.dragger.stopDragging();
			]]>
        </method>

		<!---
			The current drag source has been dropped in the given drop target
			@param dropTarget: the drop target
		-->
        <method name="droppedInTarget" args="dropTarget">
			<![CDATA[
				dropTarget.ondroppedintarget.sendEvent(this.currentDragSource.getDragSources());
            	lz.Track.deactivate("wcfDndManagerTrack");
			]]>
        </method>

	</class>
	
	<wcfDragAndDropManager id="wcfDndManager"/>
	
	<!--- @keywords private -->		
	<class name="wcfDropFloatingListPane">
		<attribute name="targetX" value="null"/>
		<attribute name="targetY" value="null"/>
		<attribute name="objects" value="${[]}"/>
		<attribute name="menuItems" value="${[]}"/>		
		<view name="floatParentView" height="0" align="right" width="${actionList.width}" clip="true" y="$once{classroot.targetY}" x="$once{classroot.targetX}"> <!--  y="$once{canvas.getMouse('y')}" x="$once{canvas.getMouse('x')}"> -->
			<plainfloatinglist name="actionList" attach="bottom" visible="false">
      			<method name="updateAttachLocation">
					<![CDATA[
					super.updateAttachLocation();
					/*
					this.setAttribute("x",canvas.getMouse('x'));
					this.setAttribute("y",canvas.getMouse('y'));
					var right = this.x + this.width;
					if (right > canvas.width) {
						var newX = this.x - (right - canvas.width);
						if (newX < 0) {
							newX = 0;
						}
						this.setAttribute("x", this.x - (right - canvas.width));
					}
					*/
					]]>
				</method>
				
				<!--- @keywords private -->
				<method name="getNextSelection" />
				<!--- @keywords private -->
		        <method name="getPrevSelection" />
		        
			</plainfloatinglist>
		</view>
		
		<method name="init">
			<![CDATA[
			super.init();
			this.checkMouseDel = new lz.Delegate(this, "checkMouse");
			]]>
		</method>		
						
		<handler name="onkeydown" reference="floatParentView.actionList" args="k">
			if (k == 27) { // esc key
		    	this.closeActionList();
			}
		</handler>
		
		<handler name="onselect" reference="floatParentView.actionList" args="v">
			var delegate = v.value;			
			delegate.execute(this.objects);
			this.closeActionList();
		</handler>
		
		<method name="openAction">
			<![CDATA[
				this.checkMouseDel.register(lz.GlobalMouse, "onmousedown");	
				var items = this.menuItems;
				if (items) {
					for (var i = 0; i < items.length; i++) {
						var item = items[i];
						var item = new lz.textlistitem(this.floatParentView.actionList, {
							text: item.action,
							value: item.delegate
						});
					}
					this.floatParentView.actionList.setAttribute('visible',true);
					lz.Focus.setFocus(this.floatParentView.actionList);	
				}
			]]>
		</method>
		
		<method name="destroy">
			<![CDATA[
			if (this.checkMouseDel) {
				this.checkMouseDel.unregisterAll();
				delete this.checkMouseDel;
			}
			
			super.destroy();
			]]>
		</method>
		
		<method name="checkMouse" args="e=null">
			if (!this.floatParentView.actionList.containsPt(this.floatParentView.actionList.getMouse("x"), this.floatParentView.actionList.getMouse("y"))) 
				closeActionList();
		</method>
		
		<method name="closeActionList">
			this.setAttribute("actionListOpen", false);
			this.floatParentView.actionList.setAttribute("visible", false);
			lz.Focus.clearFocus();
			this.checkMouseDel.unregisterAll();
			this.destroy();
		</method>
				
		<method name="addMenuItem" args="action, delegate">
			var item = {action:action, delegate:delegate};			
			this.menuItems.push(item);
		</method>
	</class>
	
	<!--- @keywords private -->
	<node id="wcfDragAndDropManagerUtils">
		
		<!---
			Release the dragger
		-->		  
        <method name="release" args="v">
	    	<![CDATA[
			v.setAttribute("visible", false);
			v.dndused = false;

			for (var i = 0; i < v.subviews.length; i++) {
				this.release(v.subviews[i]);
			}
           ]]>
        </method>
	
		<!---
			Returns a cloned view from the pool or creates a new one
		-->
		<method name="getClonedView" args="owner, textView, clippedView, hasFontsize, hasFontstyle">
			<![CDATA[
			var clonedView = null;
	
			for (var i = 0; i < owner.subviews.length; i++) {
				var v = owner.subviews[i];
				if (("dndtext" in v && v.dndtext == textView) 
					&& ("dndclip" in v && v.dndclip == clippedView) 
					&& !("dndused" in v && v.dndused)
					&& (("fontsize" in v) == hasFontsize)
					&& (("fontstyle" in v) == hasFontstyle)) 
				{
					clonedView = v;
					break;
				}
			}

			if (clonedView == null) {
				if (textView && clippedView) {
					clonedView = new lz.wcfDraggerClippedText(owner, {dndtext: true, dndclip: true});
				}
				else if (textView && !clippedView) {
					clonedView = new lz.text(owner, {dndtext: true, dndclip: false});
				}
				else if (!textView && clippedView) {
					clonedView = new lz.wcfDraggerClippedView(owner, {dndtext: false, dndclip: true});
				}
				else if (!textView && !clippedView) {
					clonedView = new lz.view(owner, {dndtext: false, dndclip: false});
				}
				
			}

			return clonedView;
			]]>
		</method>

		<!---
			Clones the visual aspects of a single view item
			@param view : the view being cloned
			@param owner: the owner of the new cloned view
			@param dx: the delta x position to the dragger view
			@param dy: the delta y position to the dragger view
		-->	
		<method name="cloneViewItem" args="view,owner,dx,dy">
			<![CDATA[
				if (!owner) {
					return null;
				}

				if (view instanceof lz.view) {
					var clonedView = this.getClonedView(owner, (view instanceof lz.text), !("dndclip" in view && view.dndclip == false), ("fontsize" in view), ("fontstyle" in view));
					clonedView.dndused = true;
					clonedView.bringToFront();
		    		if (view instanceof lz.text) {
		    			clonedView.setAttribute('text', view.getText());
		    		} 	    		
		    		else if(view.resource && !("dndIgnoreResource" in view && view.dndIgnoreResource)){
		    			clonedView.setAttribute('resource', view.resource);
		    		}
		    		else if (clonedView.resource) {
		    			clonedView.setAttribute('resource', null);
		    		}
		    		
					if ("dndvisible" in view) {
		    			clonedView.setAttribute("visible", view.dndvisible == "true");
					}
					else {
		    			clonedView.setAttribute("visible", view.visible);
		    		}
		    		
		        	if ("dndstretches" in view) {
			        	clonedView.setAttribute("stretches", view.dndstretches);
			        }
			        else {
			        	clonedView.setAttribute("stretches", "none");
			        }

		    		clonedView.setAttribute('x', dx);
		    		clonedView.setAttribute('y', dy);

		        	clonedView.setAttribute('width', view.width);
		        	clonedView.setAttribute('height', view.height);
		        	
		        	clonedView.setAttribute('bgcolor', view.bgcolor);
		        	clonedView.setAttribute('opacity', view.opacity);

		        	clonedView.setAttribute("xoffset", view.xoffset);
		        	clonedView.setAttribute("yoffset", view.yoffset);
		        	
		        	if (clonedView['fontsize'] != view['fontsize']) {
		        		clonedView.setAttribute("fontsize", view['fontsize']);	
		        	}
		        	if (clonedView['fontstyle'] != view['fontstyle']) {
		        		clonedView.setAttribute("fontstyle", view['fontstyle']);
		        	}
		    		
		    		return clonedView;
		    	}
		    	else {
		    		return null;
		    	}
			]]>
		</method>

		<!---
			Clones the visual aspects of the dragged view for dragging
			@param view : the view being cloned
			@param owner: the owner of the new cloned view
			@param dx: the delta x position to the dragger view
			@param dy: the delta y position to the dragger view
		-->	
		<method name="cloneView" args="view,owner,dx,dy">
			<![CDATA[
			
	    		var clonedView = cloneViewItem(view,owner,dx,dy);
				
				if(view.subviews) {
					for (var i=0; i<view.subviews.length; i++) {
						var child = view.subviews[i];
						cloneView(child, clonedView,child.x,child.y);
					}
				}
				
				return clonedView;
				
				]]>
		</method>
	</node>
	
</library>
