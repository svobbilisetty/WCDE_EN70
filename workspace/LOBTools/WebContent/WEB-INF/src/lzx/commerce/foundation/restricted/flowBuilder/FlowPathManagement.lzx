<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2007, 2010 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->
<library>
	<!--- @keywords private -->
	<class name="wcfPropertyPathListEditor" extends="wcfPropertyChildListEditor">
		<!---
			@keywords private
			This method creates the editor for the given property component
			@param wcfPropertiesComponent parentComponent The parent properties component from which to create the editor
		-->
		<method name="createEditor" args="parentComponent">
			<![CDATA[
			new lz.wcfBasePathListEditor(parentComponent, {
				name: "editor",
				model: parentComponent.model,
				x: parentComponent.promptWidth + parentComponent.xspacing,
				o: parentComponent.o,
				objectTypes: this.objectTypes,
				listClass: this.listClass,
				listDefinitionName: this.listDefinitionName,
				embedded: true,
				singleChild: this.singleChild,
				newButtonResource: this.newButtonResource
			});
			
			if (parentComponent["prompt"]) {
				parentComponent.prompt.setAttribute('y', parentComponent.editor.content.y);
			}
			
			if (parentComponent["extendedHelpIcon"]) {			
				parentComponent.extendedHelpIcon.setAttribute('y', parentComponent.editor.content.y);
			}
			]]>
		</method>
	</class>

	<!--- @keywords private -->
	<class name="wcfBasePathListEditor" extends="wcfBaseChildListEditor">
		<!--- @keywords private -->
		<method name="createChild" args="actionDef">
			<![CDATA[
				if(actionDef) {
					var def = actionDef.objectSelector.objectDefinition;

					var currentPaths = wcfFlowUtils.getSortedElements(this.o);
					if(currentPaths.length > 0) {
						// get elements on the last current path
						var lastPath = currentPaths[currentPaths.length - 1];
						var elements = wcfFlowUtils.getSortedElements(lastPath);
						
						// create new path
						var insertSequence = wcfFlowUtils.getNextSequenceNumber(this.o);
						var pathObj = this.o.model.createNewObject(def, this.o);
						pathObj.setPropertyValue("sequence", null, insertSequence);
						
						// clone elements to new path
						if(elements.length > 0) {
							for(var i = 0; i < elements.length; i++) {
								insertSequence = wcfFlowUtils.getNextSequenceNumber(pathObj);
								var cloneObj = pathObj.model.createNewObject(null, pathObj, true, elements[i]);
								cloneObj.setPropertyValue("sequence", null, insertSequence);
							}
						}
						
						if (this.o.lockCount == 0) {
							this.o.updateChildObjects(true);
							this.list.showObjectInView(pathObj, true);
						}
					}
				}
			]]>
		</method>
		
		<!---
			@keywords private
			Check if delete is enabled.
		-->
		<method name="isDeleteEnabled" args="delegate=null">
			<![CDATA[
			var enableDelete = super.isDeleteEnabled(delegate);
			
			if(enableDelete && this.o) {
				var children = this.o.getObjects("FlowElement");
				var selectedObjects = this.list.getSelectedObjects();
				enableDelete = (children.length > 2) && (selectedObjects.length <= children.length - 2);
			}
			
			return enableDelete;
			]]>
		</method>
		
		<!---
			@keywords private
			Perform the add action for the specified list of objects.
		-->
		<method name="doAddAction" args="action, objects">
			<![CDATA[
				if (action == wcfCopyAction) {
					if (wcfEventTimer.enabled) wcfEventTimer.start("wcfBasePathListEditor " + (action["displayName"] ? action.displayName : "doAddAction") + ": " + this.o.objectDisplayName + " #objects=" + objects.length);
					if (this.singleChild) {
						this.doDeleteAll();
					}
					this.triggerCopy(objects);
					if (wcfEventTimer.enabled) wcfEventTimer.end();
				} else {
					super.doAddAction(action, objects);
				}
			]]>
		</method>

		<!---
			@keywords private
			Trigger a copy action for each of the specified objects. Overriding default behaviour to handle
			branching and to resequence automatically.
			@param array objects: array of wcfModelObject instances to be copied.
		-->
		<method name="triggerCopy" args="objects">
			<![CDATA[
			for (var i = 0; i < objects.length; i++) {
				var sourceObject = objects[i].getReferencedObject();

				for (var j = 0; j < this.objectSelectors.length; j++) {
					var def = this.objectSelectors[j].objectDefinition;

					// copy path into new path
					var insertSequence = wcfFlowUtils.getNextSequenceNumber(this.o);
					var pathObj = this.o.model.createNewObject(def, this.o, false, sourceObject);
					pathObj.setPropertyValue("sequence", null, insertSequence);
					
					if (this.o.lockCount == 0) {
						this.o.updateChildObjects(true);
						this.list.showObjectInView(pathObj, true);
					}
				}
			}
			]]>
		</method>
	</class>

</library>
