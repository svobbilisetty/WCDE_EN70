<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2007, 2011 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->
<library>

	<!---
		<p>The flow connector class used in {@link prcFlowBuilder price rule builder}. 
	-->
	<class name="prcPriceRuleFlowConnector" extends="wcfBaseFlowConnector">
		
		<method name="isEnabled" args="dragSources">
			<![CDATA[
			var enable = super.isEnabled(dragSources);
			if(!enable) {
				return false;
			}
			else {
				var parentFlowPath = wcfFlowUtils.getParentFlowPath(this);
				if(parentFlowPath) {
					var parentFlowElement = this.getFlowElement();
					var draggedObjectType = null;
					
					// Drag element from palette case
					if(dragSources.length == 1 && dragSources[0].dragObject["objectType"]) {
						draggedObjectType = dragSources[0].dragObject.objectType;
					} else if(dragSources.length == 1 && dragSources[0].flowElement.o["objectType"]){
						// Move element case
						draggedObjectType = dragSources[0].flowElement.o.objectType;
					} else {
						return false;
					}
					
					// If we already have a coordinator branch, we only allow rounding elements
					// dragged into the end of this rule.
					if( wcfFlowUtils.getElementDepth(this) == 1 && hasCoordinatorOnRootPath()){
						return parentFlowElement == null && draggedObjectType == "roundingPrice";
					} else if (wcfFlowUtils.getElementDepth(this) == 2 && hasCoordinatorOnRootPath()){
						// We only allow nested price rule element dragged into the paths of coordinator branch
						return draggedObjectType == "nestedPriceRule"
							&& wcfFlowUtils.getSortedElements(parentFlowPath.o).length == 0;
					} else if (wcfFlowUtils.getElementDepth(this) == 1 && hasDynamicKitBranchOnRootPath()) {
						// If there is already a dynamic kit branch on the root path, no other elements
						// can be dragged into the root path.
						return false;
					} else if (wcfFlowUtils.getElementDepth(this) == 2 && hasDynamicKitBranchOnRootPath()) {
						// We only allow nested price rule element dragged into the paths of dynamic kit branch
						return draggedObjectType == "nestedPriceRule"
							&& wcfFlowUtils.getSortedElements(parentFlowPath.o).length == 0;
					}
					
					// We only allow drag coordinator branch or dynamic kit branch into an empty rule
					if (draggedObjectType == "coordinatorBranch" || draggedObjectType == "dynamicKitBranch"){
						return wcfFlowUtils.getElementDepth(this) == 1
							&& wcfFlowUtils.getSortedElements(parentFlowPath.o).length == 0;
					}
					
					// dragging multiple elements (move scenario)
					var movedBranch = null;
					if(dragSources[0]["flowElement"]) {
						for(var i = 0; i < dragSources.length; i++) {
							if(dragSources[i].flowElement.o && dragSources[i].flowElement.isBranch()) {
								movedBranch = dragSources[i].flowElement;
								break;
							}
						}
					}
					// disable if a branch is being moved and we are a descendent
					if(movedBranch) {
						var ancestor = this;
						while(ancestor != null && ancestor != canvas) {
							if(ancestor == movedBranch) {
								return false;
							}
							ancestor = ancestor.parent;
						}
					}
				
				}
			
				return true;
			}
			]]>
		</method>
		
		<!--- @keywords private -->
		<method name="hasCoordinatorOnRootPath">
			<![CDATA[
				if (this.parentFlow.flowPath) {
					var elements = wcfFlowUtils.getSortedElements(this.parentFlow.flowPath.o);
					for(var i = 0; i < elements.length; i++) {
						if (elements[i].objectType == 'coordinatorBranch') {
								return true;
						}
					} 
				}
				return false;
			]]>
		</method>
		
		<!--- @keywords private -->
		<method name="hasDynamicKitBranchOnRootPath">
			<![CDATA[
				if (this.parentFlow.flowPath) {
					var elements = wcfFlowUtils.getSortedElements(this.parentFlow.flowPath.o);
					for(var i = 0; i < elements.length; i++) {
						if (elements[i].objectType == 'dynamicKitBranch') {
								return true;
						}
					} 
				}
				return false;
			]]>
		</method>
		
		<!--- @keywords private -->
		<method name="handleDroppedElements" args="sources">
			<![CDATA[
			this.parentFlow.o.lock();
			
			var parentPath = wcfFlowUtils.getParentFlowPath(this);
			if(parentPath) {
				var parentPathObj = parentPath.o;

				// make sure we're not trying to move an element to the same place
				// var parentFlowElement = wcfFlowUtils.getParentFlowElement(this);
				var parentFlowElement = this.getFlowElement();
				if((parentFlowElement != null) && sources[0]["flowElement"]) {
					if(sources[0].flowElement.o == parentFlowElement.o) {
						this.parentFlow.o.unlock(true);
						this.parentFlow.o.updateChildObjects();
						return;
					}
				}

				for(var i = 0; i < sources.length; i++) {
					var newObject = null;

					var insertSequence;
					if(parentFlowElement == null) {
						insertSequence = wcfFlowUtils.getNextSequenceNumber(parentPathObj);
					}
					else {
						insertSequence = wcfFlowUtils.getNextSequenceNumber(parentPathObj, parentFlowElement.o);
					}
					
					// move case
					if (sources[i]["flowElement"]) {
						var moveObj = sources[i]["flowElement"].o;
						newObject = parentPathObj.model.createNewObject(null, parentPathObj, true, moveObj);
						newObject.setPropertyValue("sequence", null, insertSequence);
						moveObj.deleteObject();
					}
					// new element from palette
					else {
						var objectType = sources[i].dragObject.objectType;
						var objectDef = parentPathObj.model.getObjectDefinition(parentPathObj, objectType)
						var branchType = "";
						
						// If an branch is dropped, we automatically create the branch using the next element
						// in the flow. We also include all of the next elements that are of the same type of the
						// first included element.
						if((objectDef.elemTemplateType == "Branch" || objectDef.objectType == "coordinatorBranch") && (parentFlowElement != null)) {
							this.parentFlow.unselectAll();
							var parentFlowElementType = parentFlowElement.o.objectDefinition.elemTemplateType;
							
							var siblings = parentPath.getChildren();
							for(var i = 0; i < siblings.length; i++) {
								// search for ourself
								if(siblings[i] == parentFlowElement) {
									var j = i + 1;
									// check everything after for the same type and include them
									while((j < siblings.length) && (siblings[j].o.objectDefinition.elemTemplateType == parentFlowElementType)) {
										siblings[j].select();
										j++;
									}
									break;
								}
							}
							
							// create branch
							parentFlowElement.select();
							parentFlowElement.addElementsToBranch(branchType, objectType);
						}
						else {
							newObject = parentPathObj.model.createNewObject(objectDef, parentPathObj);
							newObject.setPropertyValue("sequence", null, insertSequence);
							// if the branching element was placed at the end of a path
							if(objectDef.elemTemplateType == "Branch" || objectDef.objectType == "coordinatorBranch" || objectDef.objectType == "dynamicKitBranch") {
								var pathObjectDefinition = newObject.model.getObjectDefinition(newObject, parentPathObj.objectType);
					
								// create top path element
								insertSequence = wcfFlowUtils.getNextSequenceNumber(newObject);
								var topFlowObj = newObject.model.createNewObject(pathObjectDefinition, newObject);
								topFlowObj.setPropertyValue("sequence", null, insertSequence);
								if(objectDef.objectType == "dynamicKitBranch"){
									topFlowObj.setPropertyValue("name", null, "nonDKPriceRulePath");
								}
					
								// create bottom path element
								insertSequence = wcfFlowUtils.getNextSequenceNumber(newObject);
								var botFlowObj = newObject.model.createNewObject(pathObjectDefinition, newObject);
								botFlowObj.setPropertyValue("sequence", null, insertSequence);
								if(objectDef.objectType == "dynamicKitBranch"){
									botFlowObj.setPropertyValue("name", null, "dKPriceRulePath");
								}
								
								newObject.updateChildObjects();
								topFlowObj.updateChildObjects();
								botFlowObj.updateChildObjects();
							}
						}
					}
				}
			}

			this.parentFlow.o.unlock(true);
			this.parentFlow.o.updateChildObjects();
			this.parentFlow.unselectAll();
			]]>
		</method>
	</class>
</library>
